Subject: [PATCH] Update Patch
---
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java	(date 1725177022649)
@@ -8,9 +8,6 @@
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
-
-import com.mohistmc.banner.bukkit.entity.MohistModsChestHorse;
-import com.mohistmc.banner.bukkit.entity.MohistModsTameableEntity;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -19,8 +16,6 @@
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.TamableAnimal;
-import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.projectile.AbstractArrow;
@@ -104,16 +99,6 @@
             return (CraftEntity) entityTypeData.convertFunction().apply(server, entity);
         }
 
-        boolean flag;
-        if (entity instanceof TamableAnimal) {
-            flag = !(entity instanceof net.minecraft.world.entity.animal.Wolf)
-                    && !(entity instanceof net.minecraft.world.entity.animal.Cat)
-                    && !(entity instanceof net.minecraft.world.entity.animal.Parrot);
-            if (flag) {
-                return new MohistModsTameableEntity( server, ( TamableAnimal ) entity);
-            }
-        }
-
         throw new AssertionError("Unknown entity " + (entity == null ? null : entity.getClass()));
     }
 
@@ -218,8 +203,8 @@
         // Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
             // Prevent teleportation to an other world during world generation
-            Preconditions.checkState(!this.entity.bridge$generation(), "Cannot teleport entity to an other world during world generation");
-            entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location));
+            Preconditions.checkState(!this.entity.generation, "Cannot teleport entity to an other world during world generation");
+            this.entity.changeDimension(new DimensionTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location), Vec3.ZERO, location.getPitch(), location.getYaw(), DimensionTransition.DO_NOTHING, TeleportCause.PLUGIN));
             return true;
         }
 
@@ -243,7 +228,7 @@
 
     @Override
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot get nearby entities during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot get nearby entities during world generation");
         org.spigotmc.AsyncCatcher.catchOp("getNearbyEntities"); // Spigot
 
         List<Entity> notchEntityList = this.entity.level().getEntities(this.entity, this.entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
@@ -309,7 +294,8 @@
 
     @Override
     public void remove() {
-        entity.discard();
+        this.entity.pluginRemoved = true;
+        this.entity.discard(this.getHandle().generation ? null : EntityRemoveEvent.Cause.PLUGIN);
     }
 
     @Override
@@ -319,7 +305,7 @@
 
     @Override
     public boolean isValid() {
-        return this.entity.isAlive() && this.entity.bridge$valid() && this.entity.isChunkLoaded() && this.isInWorld();
+        return this.entity.isAlive() && this.entity.valid && this.entity.isChunkLoaded() && this.isInWorld();
     }
 
     @Override
@@ -329,12 +315,12 @@
 
     @Override
     public boolean isPersistent() {
-        return this.entity.bridge$persist();
+        return this.entity.persist;
     }
 
     @Override
     public void setPersistent(boolean persistent) {
-        this.entity.banner$setPersist(persistent);
+        this.entity.persist = persistent;
     }
 
     public Vector getMomentum() {
@@ -445,7 +431,7 @@
     @Override
     public void playEffect(EntityEffect type) {
         Preconditions.checkArgument(type != null, "Type cannot be null");
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot play effect during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot play effect during world generation");
 
         if (type.getApplicable().isInstance(this)) {
             this.getHandle().level().broadcastEntityEvent(this.getHandle(), type.getData());
@@ -572,7 +558,7 @@
 
     @Override
     public void setVisibleByDefault(boolean visible) {
-        if (this.getHandle().bridge$visibleByDefault() != visible) {
+        if (this.getHandle().visibleByDefault != visible) {
             if (visible) {
                 // Making visible by default, reset and show to all players
                 for (Player player : this.server.getOnlinePlayers()) {
@@ -585,18 +571,18 @@
                 }
             }
 
-            this.getHandle().banner$setVisibleByDefault(visible);
+            this.getHandle().visibleByDefault = visible;
         }
     }
 
     @Override
     public boolean isVisibleByDefault() {
-        return this.getHandle().bridge$visibleByDefault();
+        return this.getHandle().visibleByDefault;
     }
 
     @Override
     public Set<Player> getTrackedBy() {
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot get tracking players during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot get tracking players during world generation");
         ImmutableSet.Builder<Player> players = ImmutableSet.builder();
 
         ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
@@ -794,13 +780,13 @@
 
     @Override
     public boolean isInWorld() {
-        return this.getHandle().bridge$inWorld();
+        return this.getHandle().inWorld;
     }
 
     @Override
     public String getAsString() {
         CompoundTag tag = new CompoundTag();
-        if (!this.getHandle().saveAsPassenger(tag)) {
+        if (!this.getHandle().saveAsPassenger(tag, false)) {
             return null;
         }
 
@@ -833,7 +819,7 @@
 
     private Entity copy(net.minecraft.world.level.Level level) {
         CompoundTag compoundTag = new CompoundTag();
-        this.getHandle().saveAsPassenger(compoundTag);
+        this.getHandle().saveAsPassenger(compoundTag, false);
 
         return net.minecraft.world.entity.EntityType.loadEntityRecursive(compoundTag, level, java.util.function.Function.identity());
     }
@@ -877,20 +863,19 @@
     }
 
     public void update(ServerPlayer player) {
-        if (!getHandle().isAlive()) {
+        if (!this.getHandle().isAlive()) {
             return;
         }
 
-        ServerLevel world = ((CraftWorld) getWorld()).getHandle();
-        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(getEntityId());
+        ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
+        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(this.getEntityId());
 
         if (entityTracker == null) {
             return;
         }
 
-        player.connection.send(getHandle().getAddEntityPacket(entityTracker.serverEntity));
+        player.connection.send(this.getHandle().getAddEntityPacket(entityTracker.serverEntity));
     }
-
 
     private static PermissibleBase getPermissibleBase() {
         if (CraftEntity.perm == null) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/banner_server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java	(date 1725177022726)
@@ -26,7 +26,6 @@
 
 /**
  * The fundamental concepts for this implementation:
- * <ul>
  * <li>Main thread owns {@link #head} and {@link #currentTick}, but it may be read from any thread</li>
  * <li>Main thread exclusively controls {@link #temp} and {@link #pending}.
  *     They are never to be accessed outside of the main thread; alternatives exist to prevent locking.</li>
@@ -42,7 +41,6 @@
  * <li>Sync tasks are only to be removed from runners on the main thread when coupled with a removal from pending and temp.</li>
  * <li>Most of the design in this scheduler relies on queuing special tasks to perform any data changes on the main thread.
  *     When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
- * </ul>
  */
 public class CraftScheduler implements BukkitScheduler {
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java	(date 1725177022705)
@@ -62,7 +62,12 @@
         result.put("saturation", this.getSaturation());
         result.put("can-always-eat", this.canAlwaysEat());
         result.put("eat-seconds", this.getEatSeconds());
-        result.put("using-converts-to", this.getUsingConvertsTo());
+
+        ItemStack usingConvertsTo = this.getUsingConvertsTo();
+        if (usingConvertsTo != null) {
+            result.put("using-converts-to", usingConvertsTo);
+        }
+
         result.put("effects", this.getEffects());
         return result;
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/Main.java b/banner_server/src/main/java/org/bukkit/craftbukkit/Main.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/Main.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/Main.java	(date 1725177022558)
@@ -1,149 +1,158 @@
 package org.bukkit.craftbukkit;
 
-import joptsimple.OptionParser;
-import joptsimple.OptionSet;
-import joptsimple.util.PathConverter;
-import net.minecrell.terminalconsole.TerminalConsoleAppender;
-
 import java.io.File;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-
-import static java.util.Arrays.asList;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import joptsimple.util.PathConverter;
+import org.fusesource.jansi.AnsiConsole;
 
-public class Main extends OptionParser {
-
+public class Main {
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
-    public Main() {
+    public static void main(String[] args) {
+        // Todo: Installation script
+        OptionParser parser = new OptionParser() {
+            {
+                this.acceptsAll(Main.asList("?", "help"), "Show the help");
 
-        acceptsAll(asList("?", "help"), "Show the help");
-
-        acceptsAll(asList("c", "config"), "Properties file to use")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("server.properties"))
-                .describedAs("Properties file");
+                this.acceptsAll(Main.asList("c", "config"), "Properties file to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("server.properties"))
+                        .describedAs("Properties file");
 
-        acceptsAll(asList("P", "plugins"), "Plugin directory to use")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("plugins"))
-                .describedAs("Plugin directory");
+                this.acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("plugins"))
+                        .describedAs("Plugin directory");
 
-        acceptsAll(asList("h", "host", "server-ip"), "Host to listen on")
-                .withRequiredArg()
-                .ofType(String.class)
-                .describedAs("Hostname or IP");
+                this.acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("Hostname or IP");
 
-        acceptsAll(asList("W", "world-dir", "universe", "world-container"), "World container")
-                .withRequiredArg()
-                .ofType(File.class)
-                .describedAs("Directory containing worlds");
+                this.acceptsAll(Main.asList("W", "world-dir", "universe", "world-container"), "World container")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("."))
+                        .describedAs("Directory containing worlds");
 
-        acceptsAll(asList("w", "world", "level-name"), "World name")
-                .withRequiredArg()
-                .ofType(String.class)
-                .describedAs("World name");
+                this.acceptsAll(Main.asList("w", "world", "level-name"), "World name")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("World name");
 
-        acceptsAll(asList("p", "port", "server-port"), "Port to listen on")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .describedAs("Port");
+                this.acceptsAll(Main.asList("p", "port", "server-port"), "Port to listen on")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Port");
 
-        accepts("serverId", "Server ID")
-                .withRequiredArg();
+                this.accepts("serverId", "Server ID")
+                        .withRequiredArg();
 
-        accepts("jfrProfile", "Enable JFR profiling");
+                this.accepts("jfrProfile", "Enable JFR profiling");
 
-        accepts("pidFile", "pid File")
-                .withRequiredArg()
-                .withValuesConvertedBy(new PathConverter());
+                this.accepts("pidFile", "pid File")
+                        .withRequiredArg()
+                        .withValuesConvertedBy(new PathConverter());
 
-        acceptsAll(asList("o", "online-mode"), "Whether to use online authentication")
-                .withRequiredArg()
-                .ofType(Boolean.class)
-                .describedAs("Authentication");
+                this.acceptsAll(Main.asList("o", "online-mode"), "Whether to use online authentication")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Authentication");
 
-        acceptsAll(asList("s", "size", "max-players"), "Maximum amount of players")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .describedAs("Server size");
+                this.acceptsAll(Main.asList("s", "size", "max-players"), "Maximum amount of players")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Server size");
 
-        acceptsAll(asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
-                .withRequiredArg()
-                .ofType(SimpleDateFormat.class)
-                .describedAs("Log date format");
+                this.acceptsAll(Main.asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
+                        .withRequiredArg()
+                        .ofType(SimpleDateFormat.class)
+                        .describedAs("Log date format");
 
-        acceptsAll(asList("log-pattern"), "Specfies the log filename pattern")
-                .withRequiredArg()
-                .ofType(String.class)
-                .defaultsTo("server.log")
-                .describedAs("Log filename");
+                this.acceptsAll(Main.asList("log-pattern"), "Specfies the log filename pattern")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .defaultsTo("server.log")
+                        .describedAs("Log filename");
 
-        acceptsAll(asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .defaultsTo(0)
-                .describedAs("Max log size");
+                this.acceptsAll(Main.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(0)
+                        .describedAs("Max log size");
 
-        acceptsAll(asList("log-count"), "Specified how many log files to cycle through")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .defaultsTo(1)
-                .describedAs("Log count");
+                this.acceptsAll(Main.asList("log-count"), "Specified how many log files to cycle through")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(1)
+                        .describedAs("Log count");
 
-        acceptsAll(asList("log-append"), "Whether to append to the log file")
-                .withRequiredArg()
-                .ofType(Boolean.class)
-                .defaultsTo(true)
-                .describedAs("Log append");
+                this.acceptsAll(Main.asList("log-append"), "Whether to append to the log file")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .defaultsTo(true)
+                        .describedAs("Log append");
 
-        acceptsAll(asList("log-strip-color"), "Strips color codes from log file");
+                this.acceptsAll(Main.asList("log-strip-color"), "Strips color codes from log file");
 
-        acceptsAll(asList("b", "bukkit-settings"), "File for bukkit settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("bukkit.yml"))
-                .describedAs("Yml file");
+                this.acceptsAll(Main.asList("b", "bukkit-settings"), "File for bukkit settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bukkit.yml"))
+                        .describedAs("Yml file");
 
-        acceptsAll(asList("C", "commands-settings"), "File for command settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("commands.yml"))
-                .describedAs("Yml file");
+                this.acceptsAll(Main.asList("C", "commands-settings"), "File for command settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("commands.yml"))
+                        .describedAs("Yml file");
 
-        acceptsAll(asList("forceUpgrade"), "Whether to force a world upgrade");
-        acceptsAll(asList("eraseCache"), "Whether to force cache erase during world upgrade");
+                this.acceptsAll(Main.asList("forceUpgrade"), "Whether to force a world upgrade");
+                this.acceptsAll(Main.asList("eraseCache"), "Whether to force cache erase during world upgrade");
+                this.acceptsAll(Main.asList("recreateRegionFiles"), "Whether to recreate region files during world upgrade");
+                this.acceptsAll(Main.asList("nogui"), "Disables the graphical console");
+
+                this.acceptsAll(Main.asList("nojline"), "Disables jline and emulates the vanilla console");
 
-        acceptsAll(asList("nojline"), "Disables jline and emulates the vanilla console");
+                this.acceptsAll(Main.asList("noconsole"), "Disables the console");
 
-        acceptsAll(asList("noconsole"), "Disables the console");
-        acceptsAll(asList("v", "version"), "Show the CraftBukkit Version");
+                this.acceptsAll(Main.asList("v", "version"), "Show the CraftBukkit Version");
 
-        acceptsAll(asList("demo"), "Demo mode");
+                this.acceptsAll(Main.asList("demo"), "Demo mode");
+
+                this.acceptsAll(Main.asList("initSettings"), "Only create configuration files and then exit"); // SPIGOT-5761: Add initSettings option
 
-        // Spigot Start
-        acceptsAll(asList("S", "spigot-settings"), "File for spigot settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("spigot.yml"))
-                .describedAs("Yml file");
-
-        // Banner Start
-        acceptsAll(asList("B", "banner-settings"), "File for banner settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("banner-config","banner.yml"))
-                .describedAs("Yml file");
+                // Spigot Start
+                this.acceptsAll(Main.asList("S", "spigot-settings"), "File for spigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("spigot.yml"))
+                        .describedAs("Yml file");
+                // Spigot End
+            }
+        };
 
-        allowsUnrecognizedOptions();
-    }
+        OptionSet options = null;
+
+        try {
+            options = parser.parse(args);
+        } catch (joptsimple.OptionException ex) {
+            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, ex.getLocalizedMessage());
+        }
 
-    public static void handleParser(OptionParser parser, OptionSet options) {
         if ((options == null) || (options.has("?"))) {
             try {
                 parser.printHelpOn(System.out);
@@ -161,33 +170,56 @@
             }
 
             float javaVersion = Float.parseFloat(System.getProperty("java.class.version"));
-            if (javaVersion < 61.0) {
-                System.err.println("Unsupported Java detected (" + javaVersion + "). This version of Minecraft requires at least Java 17. Check your Java version with the command 'java -version'.");
-                return;
-            }
-            if (javaVersion > 65.0) {
-                System.err.println("Unsupported Java detected (" + javaVersion + "). Only up to Java 21 is supported.");
+            if (javaVersion > 66.0) {
+                System.err.println("Unsupported Java detected (" + javaVersion + "). Only up to Java 22 is supported.");
                 return;
             }
 
-            String javaVersionName = System.getProperty("java.version");
-            // J2SE SDK/JRE Version String Naming Convention
-            boolean isPreRelease = javaVersionName.contains("-");
-            if (isPreRelease && javaVersion == 61.0) {
-                System.err.println("Unsupported Java detected (" + javaVersionName + "). You are running an outdated, pre-release version. Only general availability versions of Java are supported. Please update your Java version.");
-                return;
-            }
+            try {
+                // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
+                String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+                String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+
+                Main.useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
 
-            if (options.has("nojline")) {
-                System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false");
-                useJline = false;
-            }
+                if (options.has("nojline")) {
+                    System.setProperty("user.language", "en");
+                    Main.useJline = false;
+                }
+
+                if (Main.useJline) {
+                    AnsiConsole.systemInstall();
+                } else {
+                    // This ensures the terminal literal will always match the jline implementation
+                    System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
+                }
 
-            if (options.has("noconsole")) {
-                useConsole = false;
-                useJline = false;
-                System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false");
+                if (options.has("noconsole")) {
+                    Main.useConsole = false;
+                }
+
+                if (Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
+                    Date buildDate = new Date(Integer.parseInt(Main.class.getPackage().getImplementationVendor()) * 1000L);
+
+                    Calendar deadline = Calendar.getInstance();
+                    deadline.add(Calendar.DAY_OF_YEAR, -14);
+                    if (buildDate.before(deadline.getTime())) {
+                        System.err.println("*** Error, this build is outdated ***");
+                        System.err.println("*** Please download a new build as per instructions from https://www.spigotmc.org/go/outdated-spigot ***");
+                        System.err.println("*** Server will start in 20 seconds ***");
+                        Thread.sleep(TimeUnit.SECONDS.toMillis(20));
+                    }
+                }
+
+                System.out.println("Loading libraries, please wait...");
+                net.minecraft.server.Main.main(options);
+            } catch (Throwable t) {
+                t.printStackTrace();
             }
         }
     }
+
+    private static List<String> asList(String... params) {
+        return Arrays.asList(params);
+    }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java	(date 1725177022705)
@@ -35,7 +35,7 @@
 
     public CraftJukeboxComponent(Map<String, Object> map) {
         String song = SerializableMeta.getObject(String.class, map, "song", false);
-        Boolean showTooltip = SerializableMeta.getObject(boolean.class, map, "show-in-tooltip", true);
+        Boolean showTooltip = SerializableMeta.getObject(Boolean.class, map, "show-in-tooltip", true);
 
         this.handle = new JukeboxPlayable(new EitherHolder<>(ResourceKey.create(Registries.JUKEBOX_SONG, ResourceLocation.parse(song))), (showTooltip != null) ? showTooltip : true);
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java b/banner_server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java	(date 1725177022726)
@@ -157,7 +157,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getHandle().bridge$persistentDataContainer();
+        return this.getHandle().persistentDataContainer;
     }
 
     public StructureTemplate getHandle() {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java	(date 1725177022649)
@@ -16,27 +16,27 @@
 
     @Override
     public float getYield() {
-        return this.getHandle().bridge$bukkitYield();
+        return this.getHandle().bukkitYield;
     }
 
     @Override
     public boolean isIncendiary() {
-        return this.getHandle().bridge$isIncendiary();
+        return this.getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-        this.getHandle().banner$setIsIncendiary(isIncendiary);
+        this.getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        this.getHandle().banner$setBukkitYield(yield);
+        this.getHandle().bukkitYield = yield;
     }
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -46,25 +46,26 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
     public Vector getDirection() {
-        return getAcceleration();
+        return this.getAcceleration();
     }
 
     @Override
     public void setDirection(Vector direction) {
         Preconditions.checkArgument(direction != null, "Vector direction cannot be null");
         if (direction.isZero()) {
-            setVelocity(direction);
-            setAcceleration(direction);
+            this.setVelocity(direction);
+            this.setAcceleration(direction);
             return;
         }
+
         direction = direction.clone().normalize();
-        setVelocity(direction.clone().multiply(getVelocity().length()));
-        setAcceleration(direction.multiply(getAcceleration().length()));
+        this.setVelocity(direction.clone().multiply(this.getVelocity().length()));
+        this.setAcceleration(direction.multiply(this.getAcceleration().length()));
     }
 
     @Override
@@ -72,14 +73,14 @@
         Preconditions.checkArgument(acceleration != null, "Vector acceleration cannot be null");
         // SPIGOT-6993: EntityFireball#assignPower will normalize the given values
         // Note: Because of MC-80142 the fireball will stutter on the client when setting the power to something other than 0 or the normalized vector * 0.1
-        getHandle().assignDirectionalMovement(new Vec3(acceleration.getX(), acceleration.getY(), acceleration.getZ()), acceleration.length());
-        update(); // SPIGOT-6579
+        this.getHandle().assignDirectionalMovement(new Vec3(acceleration.getX(), acceleration.getY(), acceleration.getZ()), acceleration.length());
+        this.update(); // SPIGOT-6579
     }
 
     @NotNull
     @Override
     public Vector getAcceleration() {
-        Vec3 delta = getHandle().getDeltaMovement();
+        Vec3 delta = this.getHandle().getDeltaMovement();
         return new Vector(delta.x, delta.y, delta.z);
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java	(date 1725177022649)
@@ -65,8 +65,7 @@
 
     public static CraftEntitySnapshot create(CraftEntity entity) {
         CompoundTag tag = new CompoundTag();
-        // Banner TODO fixme
-        if (!entity.getHandle().saveAsPassenger(tag)) {
+        if (!entity.getHandle().saveAsPassenger(tag, false)) {
             return null;
         }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java	(date 1725177022649)
@@ -8,8 +8,6 @@
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Function;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.entity.decoration.HangingEntity;
@@ -466,8 +464,8 @@
                 if (nmsBlock.isSolid() || DiodeBlock.isDiode(nmsBlock)) {
                     boolean taken = false;
                     AABB bb = (ItemFrame.class.isAssignableFrom(clazz))
-                            ? BukkitExtraConstants.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height)
-                            : BukkitExtraConstants.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
+                            ? net.minecraft.world.entity.decoration.ItemFrame.calculateBoundingBoxStatic(pos, CraftBlock.blockFaceToNotch(dir).getOpposite())
+                            : net.minecraft.world.entity.decoration.Painting.calculateBoundingBoxStatic(pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
                     List<net.minecraft.world.entity.Entity> list = spawnData.world().getEntities(null, bb);
                     for (Iterator<net.minecraft.world.entity.Entity> it = list.iterator(); !taken && it.hasNext(); ) {
                         net.minecraft.world.entity.Entity e = it.next();
Index: banner_server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/banner_server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java	(date 1725177022726)
@@ -92,7 +92,7 @@
                 launch = new net.minecraft.world.entity.projectile.Arrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW), null);
             }
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.ALLOWED;
-            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).banner$setProjectileSource(this);
+            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).projectileSource = this;
         } else if (Fireball.class.isAssignableFrom(projectile)) {
             double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
             double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
@@ -116,14 +116,14 @@
                 ((AbstractHurtingProjectile) launch).assignDirectionalMovement(new Vec3(d3, d4, d5), 0.1D);
             }
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
+            ((AbstractHurtingProjectile) launch).projectileSource = this;
         }
 
         Preconditions.checkArgument(launch != null, "Projectile not supported");
 
         if (launch instanceof net.minecraft.world.entity.projectile.Projectile) {
             if (launch instanceof ThrowableProjectile) {
-                ((ThrowableProjectile) launch).banner$setProjectileSource(this);
+                ((ThrowableProjectile) launch).projectileSource = this;
             }
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java	(date 1725177022656)
@@ -1,14 +1,16 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.animal.FrogVariant;
 import net.minecraft.world.entity.animal.frog.Frog;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.entity.Entity;
 
 public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
@@ -53,17 +55,11 @@
         this.getHandle().setVariant(CraftVariant.bukkitToMinecraftHolder(variant));
     }
 
-    public static class CraftVariant {
+    public static class CraftVariant implements Variant, Handleable<FrogVariant> {
+        private static int count = 0;
 
         public static Variant minecraftToBukkit(FrogVariant minecraft) {
-            Preconditions.checkArgument(minecraft != null);
-
-            net.minecraft.core.Registry<FrogVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.FROG_VARIANT);
-            Variant bukkit = Registry.FROG_VARIANT.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-            Preconditions.checkArgument(bukkit != null);
-
-            return bukkit;
+            return CraftRegistry.minecraftToBukkit(minecraft, Registries.FROG_VARIANT, Registry.FROG_VARIANT);
         }
 
         public static Variant minecraftHolderToBukkit(Holder<FrogVariant> minecraft) {
@@ -71,23 +67,80 @@
         }
 
         public static FrogVariant bukkitToMinecraft(Variant bukkit) {
-            Preconditions.checkArgument(bukkit != null);
-
-            return CraftRegistry.getMinecraftRegistry(Registries.FROG_VARIANT)
-                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+            return CraftRegistry.bukkitToMinecraft(bukkit);
         }
 
         public static Holder<FrogVariant> bukkitToMinecraftHolder(Variant bukkit) {
-            Preconditions.checkArgument(bukkit != null);
+            return CraftRegistry.bukkitToMinecraftHolder(bukkit, Registries.FROG_VARIANT);
+        }
+
+        private final NamespacedKey key;
+        private final FrogVariant frogVariant;
+        private final String name;
+        private final int ordinal;
+
+        public CraftVariant(NamespacedKey key, FrogVariant frogVariant) {
+            this.key = key;
+            this.frogVariant = frogVariant;
+            // For backwards compatibility, minecraft values will still return the uppercase name without the namespace,
+            // in case plugins use for example the name as key in a config file to receive variant specific values.
+            // Custom variants will return the key with namespace. For a plugin this should look than like a new variant
+            // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+            if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+                this.name = key.getKey().toUpperCase(Locale.ROOT);
+            } else {
+                this.name = key.toString();
+            }
+            this.ordinal = CraftVariant.count++;
+        }
+
+        @Override
+        public FrogVariant getHandle() {
+            return this.frogVariant;
+        }
+
+        @Override
+        public NamespacedKey getKey() {
+            return this.key;
+        }
+
+        @Override
+        public int compareTo(Variant variant) {
+            return this.ordinal - variant.ordinal();
+        }
+
+        @Override
+        public String name() {
+            return this.name;
+        }
+
+        @Override
+        public int ordinal() {
+            return this.ordinal;
+        }
 
-            net.minecraft.core.Registry<FrogVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.FROG_VARIANT);
+        @Override
+        public String toString() {
+            // For backwards compatibility
+            return this.name();
+        }
 
-            if (registry.wrapAsHolder(CraftVariant.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<FrogVariant> holder) {
-                return holder;
+        @Override
+        public boolean equals(Object other) {
+            if (this == other) {
+                return true;
             }
 
-            throw new IllegalArgumentException("No Reference holder found for " + bukkit
-                    + ", this can happen if a plugin creates its own frog variant with out properly registering it.");
+            if (!(other instanceof CraftVariant)) {
+                return false;
+            }
+
+            return this.getKey().equals(((Variant) other).getKey());
+        }
+
+        @Override
+        public int hashCode() {
+            return this.getKey().hashCode();
         }
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/banner_server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java	(date 1725177022635)
@@ -57,12 +57,10 @@
 
     private final NamespacedKey key;
     private final Holder<net.minecraft.world.item.enchantment.Enchantment> handle;
-    private final int id;
 
     public CraftEnchantment(NamespacedKey key, net.minecraft.world.item.enchantment.Enchantment handle) {
         this.key = key;
         this.handle = CraftRegistry.getMinecraftRegistry(Registries.ENCHANTMENT).wrapAsHolder(handle);
-        this.id = CraftRegistry.getMinecraftRegistry(Registries.ENCHANTMENT).getId(handle);
     }
 
     @Override
@@ -108,50 +106,31 @@
     @Override
     public String getName() {
         // PAIL: migration paths
-        return switch (this.id) {
-            case 0 -> "PROTECTION_ENVIRONMENTAL";
-            case 1 -> "PROTECTION_FIRE";
-            case 2 -> "PROTECTION_FALL";
-            case 3 -> "PROTECTION_EXPLOSIONS";
-            case 4 -> "PROTECTION_PROJECTILE";
-            case 5 -> "OXYGEN";
-            case 6 -> "WATER_WORKER";
-            case 7 -> "THORNS";
-            case 8 -> "DEPTH_STRIDER";
-            case 9 -> "FROST_WALKER";
-            case 10 -> "BINDING_CURSE";
-            case 11 -> "SOUL_SPEED";
-            case 12 -> "SWIFT_SNEAK";
-            case 13 -> "DAMAGE_ALL";
-            case 14 -> "DAMAGE_UNDEAD";
-            case 15 -> "DAMAGE_ARTHROPODS";
-            case 16 -> "KNOCKBACK";
-            case 17 -> "FIRE_ASPECT";
-            case 18 -> "LOOT_BONUS_MOBS";
-            case 19 -> "SWEEPING_EDGE";
-            case 20 -> "DIG_SPEED";
-            case 21 -> "SILK_TOUCH";
-            case 22 -> "DURABILITY";
-            case 23 -> "LOOT_BONUS_BLOCKS";
-            case 24 -> "ARROW_DAMAGE";
-            case 25 -> "ARROW_KNOCKBACK";
-            case 26 -> "ARROW_FIRE";
-            case 27 -> "ARROW_INFINITE";
-            case 28 -> "LUCK";
-            case 29 -> "LURE";
-            case 30 -> "LOYALTY";
-            case 31 -> "IMPALING";
-            case 32 -> "RIPTIDE";
-            case 33 -> "CHANNELING";
-            case 34 -> "MULTISHOT";
-            case 35 -> "QUICK_CHARGE";
-            case 36 -> "PIERCING";
-            case 37 -> "DENSITY";
-            case 38 -> "BREACH";
-            case 39 -> "WIND_BURST";
-            case 40 -> "MENDING";
-            case 41 -> "VANISHING_CURSE";
-            default -> this.getKey().toString();
+        if (!this.getKey().getNamespace().equals(NamespacedKey.MINECRAFT)) {
+            return this.getKey().toString();
+        }
+        String keyName = this.getKey().getKey().toUpperCase(Locale.ROOT);
+        return switch (keyName) {
+            case "PROTECTION" -> "PROTECTION_ENVIRONMENTAL";
+            case "FIRE_PROTECTION" -> "PROTECTION_FIRE";
+            case "FEATHER_FALLING" -> "PROTECTION_FALL";
+            case "BLAST_PROTECTION" -> "PROTECTION_EXPLOSIONS";
+            case "PROJECTILE_PROTECTION" -> "PROTECTION_PROJECTILE";
+            case "RESPIRATION" -> "OXYGEN";
+            case "AQUA_AFFINITY" -> "WATER_WORKER";
+            case "SHARPNESS" -> "DAMAGE_ALL";
+            case "SMITE" -> "DAMAGE_UNDEAD";
+            case "BANE_OF_ARTHROPODS" -> "DAMAGE_ARTHROPODS";
+            case "LOOTING" -> "LOOT_BONUS_MOBS";
+            case "EFFICIENCY" -> "DIG_SPEED";
+            case "UNBREAKING" -> "DURABILITY";
+            case "FORTUNE" -> "LOOT_BONUS_BLOCKS";
+            case "POWER" -> "ARROW_DAMAGE";
+            case "PUNCH" -> "ARROW_KNOCKBACK";
+            case "FLAME" -> "ARROW_FIRE";
+            case "INFINITY" -> "ARROW_INFINITE";
+            case "LUCK_OF_THE_SEA" -> "LUCK";
+            default -> keyName;
         };
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java	(date 1725177022655)
@@ -26,121 +26,121 @@
 
     @Override
     public int getMinWaitTime() {
-        return this.getHandle().bridge$minWaitTime();
+        return this.getHandle().minWaitTime;
     }
 
     @Override
     public void setMinWaitTime(int minWaitTime) {
         Preconditions.checkArgument(minWaitTime >= 0 && minWaitTime <= this.getMaxWaitTime(), "The minimum wait time should be between %s and %s (the maximum wait time)", 0, this.getMaxWaitTime());
         FishingHook hook = this.getHandle();
-        hook.banner$setMinWaitTime(minWaitTime);
+        hook.minWaitTime = minWaitTime;
     }
 
     @Override
     public int getMaxWaitTime() {
-        return this.getHandle().bridge$maxWaitTime();
+        return this.getHandle().maxWaitTime;
     }
 
     @Override
     public void setMaxWaitTime(int maxWaitTime) {
         Preconditions.checkArgument(maxWaitTime >= 0 && maxWaitTime >= this.getMinWaitTime(), "The maximum wait time should be between %s and %s (the minimum wait time)", 0, this.getMinWaitTime());
         FishingHook hook = this.getHandle();
-        hook.banner$setMaxWaitTime(maxWaitTime);
+        hook.maxWaitTime = maxWaitTime;
     }
 
     @Override
     public void setWaitTime(int min, int max) {
         Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum wait time should be higher than or equal to 0 and the minimum wait time");
-        this.getHandle().banner$setMinWaitTime(min);
-        this.getHandle().banner$setMaxWaitTime(max);
+        this.getHandle().minWaitTime = min;
+        this.getHandle().maxWaitTime = max;
     }
 
     @Override
     public int getMinLureTime() {
-        return this.getHandle().bridge$minLureTime();
+        return this.getHandle().minLureTime;
     }
 
     @Override
     public void setMinLureTime(int minLureTime) {
         Preconditions.checkArgument(minLureTime >= 0 && minLureTime <= this.getMaxLureTime(), "The minimum lure time (%s) should be between 0 and %s (the maximum wait time)", minLureTime, this.getMaxLureTime());
-        this.getHandle().banner$setMinLureTime(minLureTime);
+        this.getHandle().minLureTime = minLureTime;
     }
 
     @Override
     public int getMaxLureTime() {
-        return this.getHandle().bridge$maxLureTime();
+        return this.getHandle().maxLureTime;
     }
 
     @Override
     public void setMaxLureTime(int maxLureTime) {
         Preconditions.checkArgument(maxLureTime >= 0 && maxLureTime >= this.getMinLureTime(), "The maximum lure time (%s) should be higher than or equal to 0 and %s (the minimum wait time)", maxLureTime, this.getMinLureTime());
-        this.getHandle().banner$setMaxLureTime(maxLureTime);
+        this.getHandle().maxLureTime = maxLureTime;
     }
 
     @Override
     public void setLureTime(int min, int max) {
         Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum lure time should be higher than or equal to 0 and the minimum wait time.");
-        this.getHandle().banner$setMinLureTime(min);
-        this.getHandle().banner$setMaxLureTime(max);
+        this.getHandle().minLureTime = min;
+        this.getHandle().maxLureTime = max;
     }
 
     @Override
     public float getMinLureAngle() {
-        return this.getHandle().bridge$minLureAngle();
+        return this.getHandle().minLureAngle;
     }
 
     @Override
     public void setMinLureAngle(float minLureAngle) {
         Preconditions.checkArgument(minLureAngle <= this.getMaxLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", minLureAngle, this.getMaxLureAngle());
-        this.getHandle().banner$setMinLureAnglee(minLureAngle);
+        this.getHandle().minLureAngle = minLureAngle;
     }
 
     @Override
     public float getMaxLureAngle() {
-        return this.getHandle().bridge$maxLureAngle();
+        return this.getHandle().maxLureAngle;
     }
 
     @Override
     public void setMaxLureAngle(float maxLureAngle) {
         Preconditions.checkArgument(maxLureAngle >= this.getMinLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", maxLureAngle, this.getMinLureAngle());
-        this.getHandle().banner$setMaxLureAnglee(maxLureAngle);
+        this.getHandle().maxLureAngle = maxLureAngle;
     }
 
     @Override
     public void setLureAngle(float min, float max) {
         Preconditions.checkArgument(min <= max, "The minimum lure (%s) angle should be less than the maximum lure angle (%s)", min, max);
-        this.getHandle().banner$setMinLureAnglee(min);
-        this.getHandle().banner$setMaxLureAnglee(max);
+        this.getHandle().minLureAngle = min;
+        this.getHandle().maxLureAngle = max;
     }
 
     @Override
     public boolean isSkyInfluenced() {
-        return this.getHandle().bridge$skyInfluenced();
+        return this.getHandle().skyInfluenced;
     }
 
     @Override
     public void setSkyInfluenced(boolean skyInfluenced) {
-        this.getHandle().banner$setSkyInfluenced(skyInfluenced);
+        this.getHandle().skyInfluenced = skyInfluenced;
     }
 
     @Override
     public boolean isRainInfluenced() {
-        return this.getHandle().bridge$rainInfluenced();
+        return this.getHandle().rainInfluenced;
     }
 
     @Override
     public void setRainInfluenced(boolean rainInfluenced) {
-        this.getHandle().banner$setRainInfluenced(rainInfluenced);
+        this.getHandle().rainInfluenced = rainInfluenced;
     }
 
     @Override
     public boolean getApplyLure() {
-        return this.getHandle().bridge$applyLure();
+        return this.getHandle().applyLure;
     }
 
     @Override
     public void setApplyLure(boolean applyLure) {
-        this.getHandle().banner$setApplyLure(applyLure);
+        this.getHandle().applyLure = applyLure;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java	(date 1725177022656)
@@ -63,7 +63,7 @@
     public void setLaserTicks(int ticks) {
         Preconditions.checkArgument(ticks >= CraftGuardian.MINIMUM_ATTACK_TICKS, "ticks must be >= %s. Given %s", CraftGuardian.MINIMUM_ATTACK_TICKS, ticks);
 
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().guardianAttackGoal;
         if (goal != null) {
             goal.attackTime = ticks;
         }
@@ -71,7 +71,7 @@
 
     @Override
     public int getLaserTicks() {
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().guardianAttackGoal;
         return (goal != null) ? goal.attackTime : CraftGuardian.MINIMUM_ATTACK_TICKS;
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java	(date 1725177022656)
@@ -42,7 +42,7 @@
             default:
                 throw new IllegalArgumentException(String.format("%s is not a valid facing direction", face));
         }
-        if (!force && !this.getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !this.getHandle().generation && !hanging.survives()) {
             // Revert since it doesn't fit
             hanging.setDirection(dir);
             return false;
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java	(date 1725177022656)
@@ -309,14 +309,14 @@
         if (this.getHandle().containerMenu == formerContainer) {
             return null;
         }
-        this.getHandle().containerMenu.banner$setCheckReachable(false);
+        this.getHandle().containerMenu.checkReachable = false;
         return this.getHandle().containerMenu.getBukkitView();
     }
 
     private static void openCustomInventory(Inventory inventory, ServerPlayer player, MenuType<?> windowType) {
         if (player.connection == null) return;
         Preconditions.checkArgument(windowType != null, "Unknown windowType");
-        AbstractContainerMenu container = new CraftContainer(inventory, player, player.nextContainerCounterInt());
+        AbstractContainerMenu container = new CraftContainer(inventory, player, player.nextContainerCounter());
 
         container = CraftEventFactory.callInventoryOpenEvent(player, container);
         if (container == null) return;
@@ -341,7 +341,7 @@
         }
         this.getHandle().openMenu(Blocks.CRAFTING_TABLE.defaultBlockState().getMenuProvider(this.getHandle().level(), CraftLocation.toBlockPosition(location)));
         if (force) {
-            this.getHandle().containerMenu.banner$setCheckReachable(false);
+            this.getHandle().containerMenu.checkReachable = false;
         }
         return this.getHandle().containerMenu.getBukkitView();
     }
@@ -363,13 +363,14 @@
         this.getHandle().openMenu(Blocks.ENCHANTING_TABLE.defaultBlockState().getMenuProvider(this.getHandle().level(), pos));
 
         if (force) {
-            this.getHandle().containerMenu.banner$setCheckReachable(false);
+            this.getHandle().containerMenu.checkReachable = false;
         }
         return this.getHandle().containerMenu.getBukkitView();
     }
 
     @Override
     public void openInventory(InventoryView inventory) {
+        Preconditions.checkArgument(this.equals(inventory.getPlayer()), "InventoryView must belong to the opening player");
         if (!(this.getHandle() instanceof ServerPlayer)) return; // TODO: NPC support?
         if (((ServerPlayer) this.getHandle()).connection == null) return;
         if (this.getHandle().containerMenu != this.getHandle().inventoryMenu) {
@@ -381,7 +382,7 @@
         if (inventory instanceof CraftInventoryView) {
             container = ((CraftInventoryView) inventory).getHandle();
         } else {
-            container = new CraftContainer(inventory, this.getHandle(), player.nextContainerCounterInt());
+            container = new CraftContainer(inventory, this.getHandle(), player.nextContainerCounter());
         }
 
         // Trigger an INVENTORY_OPEN event
@@ -626,32 +627,32 @@
 
     @Override
     public int getSaturatedRegenRate() {
-        return this.getHandle().getFoodData().bridge$saturatedRegenRate();
+        return this.getHandle().getFoodData().saturatedRegenRate;
     }
 
     @Override
     public void setSaturatedRegenRate(int i) {
-        this.getHandle().getFoodData().banner$setSaturatedRegenRate(i);
+        this.getHandle().getFoodData().saturatedRegenRate = i;
     }
 
     @Override
     public int getUnsaturatedRegenRate() {
-        return this.getHandle().getFoodData().bridge$unsaturatedRegenRate();
+        return this.getHandle().getFoodData().unsaturatedRegenRate;
     }
 
     @Override
     public void setUnsaturatedRegenRate(int i) {
-        this.getHandle().getFoodData().banner$setUnsaturatedRegenRate(i);
+        this.getHandle().getFoodData().unsaturatedRegenRate = i;
     }
 
     @Override
     public int getStarvationRate() {
-        return this.getHandle().getFoodData().bridge$starvationRate();
+        return this.getHandle().getFoodData().starvationRate;
     }
 
     @Override
     public void setStarvationRate(int i) {
-        this.getHandle().getFoodData().banner$setSaturatedRegenRate(i);
+        this.getHandle().getFoodData().starvationRate = i;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java	(date 1725177022739)
@@ -15,7 +15,7 @@
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.place", "Gives the user the ability to place restricted blocks with NBT in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.copy", "Gives the user the ability to copy NBT in creative", org.bukkit.permissions.PermissionDefault.TRUE, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick", "Gives the user the ability to use the debug stick in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
-        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE/* , parent */); // Paper - should not have this parent, as it's not a "vanilla" utility
+        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE, parent);
         // Spigot end
         parent.recalculatePermissibles();
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java	(date 1725177022656)
@@ -73,7 +73,6 @@
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
-import org.bukkit.event.entity.EntityRemoveEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
@@ -106,9 +105,8 @@
         Preconditions.checkArgument(health >= 0 && health <= this.getMaxHealth(), "Health value (%s) must be between 0 and %s", health, this.getMaxHealth());
 
         // during world generation, we don't want to run logic for dropping items and xp
-        if (this.getHandle().bridge$generation() && health == 0) {
-            this.getHandle().discard(); // Add Bukkit remove cause
-            this.getHandle().pushRemoveCause(null);
+        if (this.getHandle().generation && health == 0) {
+            this.getHandle().discard(null); // Add Bukkit remove cause
             return;
         }
 
@@ -163,7 +161,7 @@
     }
 
     private List<Block> getLineOfSight(Set<Material> transparent, int maxDistance, int maxLength) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot get line of sight during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot get line of sight during world generation");
 
         if (transparent == null) {
             transparent = Sets.newHashSet(Material.AIR, Material.CAVE_AIR, Material.VOID_AIR);
@@ -221,7 +219,7 @@
 
     @Override
     public RayTraceResult rayTraceBlocks(double maxDistance, FluidCollisionMode fluidCollisionMode) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot ray tray blocks during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot ray tray blocks during world generation");
 
         Location eyeLocation = this.getEyeLocation();
         Vector direction = eyeLocation.getDirection();
@@ -240,12 +238,12 @@
 
     @Override
     public int getMaximumAir() {
-        return this.getHandle().bridge$maxAirTicks();
+        return this.getHandle().maxAirTicks;
     }
 
     @Override
     public void setMaximumAir(int ticks) {
-        this.getHandle().banner$setMaxAirTicks(ticks);
+        this.getHandle().maxAirTicks = ticks;
     }
 
     @Override
@@ -312,7 +310,7 @@
 
     private void damage(double amount, DamageSource damageSource) {
         Preconditions.checkArgument(damageSource != null, "damageSource cannot be null");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot damage entity during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot damage entity during world generation");
 
         this.entity.hurt(damageSource, (float) amount);
     }
@@ -437,7 +435,7 @@
     @Override
     @SuppressWarnings("unchecked")
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot launch projectile during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot launch projectile during world generation");
 
         net.minecraft.world.level.Level world = ((CraftWorld) this.getWorld()).getHandle();
         net.minecraft.world.entity.Entity launch = null;
@@ -496,7 +494,7 @@
                 launch = new LargeFireball(world, this.getHandle(), vec, 1);
             }
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
+            ((AbstractHurtingProjectile) launch).projectileSource = this;
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();
@@ -531,7 +529,7 @@
 
     @Override
     public boolean hasLineOfSight(Entity other) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot check line of sight during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot check line of sight during world generation");
 
         return this.getHandle().hasLineOfSight(((CraftEntity) other).getHandle());
     }
@@ -558,7 +556,7 @@
         if (this.getHandle() instanceof Mob) {
             ((Mob) this.getHandle()).setCanPickUpLoot(pickup);
         } else {
-            this.getHandle().banner$setBukkitPickUpLoot(pickup);
+            this.getHandle().bukkitPickUpLoot = pickup;
         }
     }
 
@@ -567,7 +565,7 @@
         if (this.getHandle() instanceof Mob) {
             return ((Mob) this.getHandle()).canPickUpLoot();
         } else {
-            return this.getHandle().bridge$bukkitPickUpLoot();
+            return this.getHandle().bukkitPickUpLoot;
         }
     }
 
@@ -604,7 +602,7 @@
 
     @Override
     public boolean setLeashHolder(Entity holder) {
-        if (this.getHandle().bridge$generation() || (this.getHandle() instanceof WitherBoss) || !(this.getHandle() instanceof Mob)) {
+        if (this.getHandle().generation || (this.getHandle() instanceof WitherBoss) || !(this.getHandle() instanceof Mob)) {
             return false;
         }
 
@@ -653,14 +651,14 @@
 
     @Override
     public boolean isClimbing() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot check if climbing during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot check if climbing during world generation");
 
         return this.getHandle().onClimbable();
     }
 
     @Override
     public AttributeInstance getAttribute(Attribute attribute) {
-        return this.getHandle().bridge$craftAttributes().getAttribute(attribute);
+        return this.getHandle().craftAttributes.getAttribute(attribute);
     }
 
     @Override
@@ -678,7 +676,7 @@
     @Override
     public void attack(Entity target) {
         Preconditions.checkArgument(target != null, "target == null");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot attack during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot attack during world generation");
 
         if (this.getHandle() instanceof net.minecraft.world.entity.player.Player) {
             ((net.minecraft.world.entity.player.Player) this.getHandle()).attack(((CraftEntity) target).getHandle());
@@ -689,14 +687,14 @@
 
     @Override
     public void swingMainHand() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot swing hand during world generation");
 
         this.getHandle().swing(InteractionHand.MAIN_HAND, true);
     }
 
     @Override
     public void swingOffHand() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot swing hand during world generation");
 
         this.getHandle().swing(InteractionHand.OFF_HAND, true);
     }
@@ -717,17 +715,17 @@
 
     @Override
     public void setCollidable(boolean collidable) {
-        this.getHandle().banner$setCollides(collidable);
+        this.getHandle().collides = collidable;
     }
 
     @Override
     public boolean isCollidable() {
-        return this.getHandle().bridge$collides();
+        return this.getHandle().collides;
     }
 
     @Override
     public Set<UUID> getCollidableExemptions() {
-        return this.getHandle().bridge$collidableExemptions();
+        return this.getHandle().collidableExemptions;
     }
 
     @Override
@@ -796,7 +794,7 @@
 
     @Override
     public void setInvisible(boolean invisible) {
-        this.getHandle().banner$setPersistentInvisibility(invisible);
+        this.getHandle().persistentInvisibility = invisible;
         this.getHandle().setSharedFlag(5, invisible);
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java	(date 1725177022656)
@@ -45,7 +45,7 @@
     public void setStrength(int strength) {
         Preconditions.checkArgument(1 <= strength && strength <= 5, "strength must be [1,5]");
         if (strength == this.getStrength()) return;
-        this.getHandle().setStrength(strength);
+        this.getHandle().setStrengthPublic(strength);
         this.getHandle().createInventory();
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java	(date 1725177022656)
@@ -25,7 +25,7 @@
         Preconditions.checkArgument(newDir != null, "%s is not a valid facing direction", face);
 
         this.getHandle().setDirection(newDir);
-        if (!force && !this.getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !this.getHandle().generation && !hanging.survives()) {
             hanging.setDirection(oldDir);
             return false;
         }
@@ -44,7 +44,7 @@
         this.getHandle().getEntityData().markDirty(net.minecraft.world.entity.decoration.ItemFrame.DATA_ROTATION);
 
         // update redstone
-        if (!this.getHandle().bridge$generation()) {
+        if (!this.getHandle().generation) {
             this.getHandle().level().updateNeighbourForOutputSignal(this.getHandle().getPos(), Blocks.AIR);
         }
     }
@@ -57,7 +57,7 @@
     @Override
     public void setItem(org.bukkit.inventory.ItemStack item, boolean playSound) {
         // only updated redstone and play sound when it is not in generation
-        this.getHandle().setItem(CraftItemStack.asNMSCopy(item), !this.getHandle().bridge$generation(), !this.getHandle().bridge$generation() && playSound);
+        this.getHandle().setItem(CraftItemStack.asNMSCopy(item), !this.getHandle().generation, !this.getHandle().generation && playSound);
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java	(date 1725177022656)
@@ -15,7 +15,7 @@
     public boolean setFacingDirection(BlockFace face, boolean force) {
         Preconditions.checkArgument(face == BlockFace.SELF, "%s is not a valid facing direction", face);
 
-        return force || this.getHandle().bridge$generation() || this.getHandle().survives();
+        return force || this.getHandle().generation || this.getHandle().survives();
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java	(date 1725177022663)
@@ -1,7 +1,19 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Preconditions;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
+import net.minecraft.util.RandomSource;
+import net.minecraft.util.random.SimpleWeightedRandomList;
 import net.minecraft.world.entity.vehicle.MinecartSpawner;
+import net.minecraft.world.level.SpawnData;
+import org.bukkit.block.spawner.SpawnRule;
+import org.bukkit.block.spawner.SpawnerEntry;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.block.CraftCreatureSpawner;
+import org.bukkit.entity.EntitySnapshot;
+import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 
 final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMinecart {
@@ -9,6 +21,152 @@
         super(server, entity);
     }
 
+    @Override
+    public EntityType getSpawnedType() {
+        SpawnData spawnData = this.getHandle().getSpawner().nextSpawnData;
+        if (spawnData == null) {
+            return null;
+        }
+
+        Optional<net.minecraft.world.entity.EntityType<?>> type = net.minecraft.world.entity.EntityType.by(spawnData.getEntityToSpawn());
+        return type.map(CraftEntityType::minecraftToBukkit).orElse(null);
+    }
+
+    @Override
+    public void setSpawnedType(EntityType entityType) {
+        if (entityType == null) {
+            this.getHandle().getSpawner().spawnPotentials = SimpleWeightedRandomList.empty(); // need clear the spawnPotentials to avoid nextSpawnData being replaced later
+            this.getHandle().getSpawner().nextSpawnData = new SpawnData();
+            return;
+        }
+        Preconditions.checkArgument(entityType != EntityType.UNKNOWN, "Can't spawn EntityType %s from mob spawners!", entityType);
+
+        RandomSource rand = this.getHandle().level().getRandom();
+        this.getHandle().getSpawner().setEntityId(CraftEntityType.bukkitToMinecraft(entityType), this.getHandle().level(), rand, this.getHandle().blockPosition());
+    }
+
+    @Override
+    public EntitySnapshot getSpawnedEntity() {
+        SpawnData spawnData = this.getHandle().getSpawner().nextSpawnData;
+        if (spawnData == null) {
+            return null;
+        }
+
+        return CraftEntitySnapshot.create(spawnData.getEntityToSpawn());
+    }
+
+    @Override
+    public void setSpawnedEntity(EntitySnapshot snapshot) {
+        CraftCreatureSpawner.setSpawnedEntity(this.getHandle().getSpawner(), snapshot, null, null);
+    }
+
+    @Override
+    public void setSpawnedEntity(SpawnerEntry spawnerEntry) {
+        Preconditions.checkArgument(spawnerEntry != null, "Entry cannot be null");
+
+        CraftCreatureSpawner.setSpawnedEntity(this.getHandle().getSpawner(), spawnerEntry.getSnapshot(), spawnerEntry.getSpawnRule(), spawnerEntry.getEquipment());
+    }
+
+    @Override
+    public void addPotentialSpawn(EntitySnapshot snapshot, int weight, SpawnRule spawnRule) {
+        CraftCreatureSpawner.addPotentialSpawn(this.getHandle().getSpawner(), snapshot, weight, spawnRule, null);
+    }
+
+    @Override
+    public void addPotentialSpawn(SpawnerEntry spawnerEntry) {
+        Preconditions.checkArgument(spawnerEntry != null, "Entry cannot be null");
+
+        CraftCreatureSpawner.addPotentialSpawn(this.getHandle().getSpawner(), spawnerEntry.getSnapshot(), spawnerEntry.getSpawnWeight(), spawnerEntry.getSpawnRule(), spawnerEntry.getEquipment());
+    }
+
+    @Override
+    public void setPotentialSpawns(Collection<SpawnerEntry> entries) {
+        CraftCreatureSpawner.setPotentialSpawns(this.getHandle().getSpawner(), entries);
+    }
+
+    @Override
+    public List<SpawnerEntry> getPotentialSpawns() {
+        return CraftCreatureSpawner.getPotentialSpawns(this.getHandle().getSpawner());
+    }
+
+    @Override
+    public int getDelay() {
+        return this.getHandle().getSpawner().spawnDelay;
+    }
+
+    @Override
+    public void setDelay(int delay) {
+        this.getHandle().getSpawner().spawnDelay = delay;
+    }
+
+    @Override
+    public int getMinSpawnDelay() {
+        return this.getHandle().getSpawner().minSpawnDelay;
+    }
+
+    @Override
+    public void setMinSpawnDelay(int spawnDelay) {
+        Preconditions.checkArgument(spawnDelay <= this.getMaxSpawnDelay(), "Minimum Spawn Delay must be less than or equal to Maximum Spawn Delay");
+        this.getHandle().getSpawner().minSpawnDelay = spawnDelay;
+    }
+
+    @Override
+    public int getMaxSpawnDelay() {
+        return this.getHandle().getSpawner().maxSpawnDelay;
+    }
+
+    @Override
+    public void setMaxSpawnDelay(int spawnDelay) {
+        Preconditions.checkArgument(spawnDelay > 0, "Maximum Spawn Delay must be greater than 0.");
+        Preconditions.checkArgument(spawnDelay >= this.getMinSpawnDelay(), "Maximum Spawn Delay must be greater than or equal to Minimum Spawn Delay");
+        this.getHandle().getSpawner().maxSpawnDelay = spawnDelay;
+    }
+
+    @Override
+    public int getMaxNearbyEntities() {
+        return this.getHandle().getSpawner().maxNearbyEntities;
+    }
+
+    @Override
+    public void setMaxNearbyEntities(int maxNearbyEntities) {
+        this.getHandle().getSpawner().maxNearbyEntities = maxNearbyEntities;
+    }
+
+    @Override
+    public int getSpawnCount() {
+        return this.getHandle().getSpawner().spawnCount;
+    }
+
+    @Override
+    public void setSpawnCount(int count) {
+        this.getHandle().getSpawner().spawnCount = count;
+    }
+
+    @Override
+    public int getRequiredPlayerRange() {
+        return this.getHandle().getSpawner().requiredPlayerRange;
+    }
+
+    @Override
+    public void setRequiredPlayerRange(int requiredPlayerRange) {
+        this.getHandle().getSpawner().requiredPlayerRange = requiredPlayerRange;
+    }
+
+    @Override
+    public int getSpawnRange() {
+        return this.getHandle().getSpawner().spawnRange;
+    }
+
+    @Override
+    public void setSpawnRange(int spawnRange) {
+        this.getHandle().getSpawner().spawnRange = spawnRange;
+    }
+
+    @Override
+    public MinecartSpawner getHandle() {
+        return (MinecartSpawner) this.entity;
+    }
+
     @Override
     public String toString() {
         return "CraftMinecartMobSpawner";
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java	(date 1725177022656)
@@ -28,24 +28,24 @@
 
     @Override
     public double getMaxSpeed() {
-        return this.getHandle().bridge$maxSpeed();
+        return this.getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setMaxSpeed(speed);
+            this.getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public boolean isSlowWhenEmpty() {
-        return this.getHandle().bridge$slowWhenEmpty();
+        return this.getHandle().slowWhenEmpty;
     }
 
     @Override
     public void setSlowWhenEmpty(boolean slow) {
-        this.getHandle().banner$setSlowWhenEmpty(slow);
+        this.getHandle().slowWhenEmpty = slow;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java	(date 1725177022663)
@@ -17,7 +17,7 @@
 
     @Override
     public void setTarget(LivingEntity target) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         net.minecraft.world.entity.Mob entity = this.getHandle();
         if (target == null) {
@@ -36,12 +36,12 @@
 
     @Override
     public void setAware(boolean aware) {
-        this.getHandle().banner$setAware(aware);
+        this.getHandle().aware = aware;
     }
 
     @Override
     public boolean isAware() {
-        return this.getHandle().bridge$aware();
+        return this.getHandle().aware;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java	(date 1725177022663)
@@ -33,7 +33,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$allowedBarterItems().add(item);
+        return this.getHandle().allowedBarterItems.add(item);
     }
 
     @Override
@@ -41,7 +41,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$allowedBarterItems().remove(item);
+        return this.getHandle().allowedBarterItems.remove(item);
     }
 
     @Override
@@ -49,7 +49,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$interestItems().add(item);
+        return this.getHandle().interestItems.add(item);
     }
 
     @Override
@@ -57,17 +57,17 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$interestItems().remove(item);
+        return this.getHandle().interestItems.remove(item);
     }
 
     @Override
     public Set<Material> getInterestList() {
-        return Collections.unmodifiableSet(this.getHandle().bridge$interestItems().stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(this.getHandle().interestItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
     public Set<Material> getBarterList() {
-        return Collections.unmodifiableSet(this.getHandle().bridge$allowedBarterItems().stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(this.getHandle().allowedBarterItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java	(date 1725177022663)
@@ -30,7 +30,7 @@
         Holder<PaintingVariant> oldArt = painting.getVariant();
         painting.setVariant(CraftArt.bukkitToMinecraftHolder(art));
         painting.setDirection(painting.getDirection());
-        if (!force && !this.getHandle().bridge$generation() && !painting.survives()) {
+        if (!force && !this.getHandle().generation && !painting.survives()) {
             // Revert painting since it doesn't fit
             painting.setVariant(oldArt);
             painting.setDirection(painting.getDirection());
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java	(date 1725177022663)
@@ -12,7 +12,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -22,7 +22,7 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java	(date 1725177022663)
@@ -35,8 +35,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-
-import net.md_5.bungee.chat.ComponentSerializer;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -46,7 +44,12 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.common.*;
+import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPopPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPushPacket;
+import net.minecraft.network.protocol.common.ClientboundServerLinksPacket;
+import net.minecraft.network.protocol.common.ClientboundStoreCookiePacket;
+import net.minecraft.network.protocol.common.ClientboundTransferPacket;
 import net.minecraft.network.protocol.common.custom.DiscardedPayload;
 import net.minecraft.network.protocol.cookie.ClientboundCookieRequestPacket;
 import net.minecraft.network.protocol.cookie.ServerboundCookieResponsePacket;
@@ -104,8 +107,24 @@
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapId;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
-import net.minecraft.world.phys.Vec3;
-import org.bukkit.*;
+import org.bukkit.BanEntry;
+import org.bukkit.BanList;
+import org.bukkit.Bukkit;
+import org.bukkit.DyeColor;
+import org.bukkit.Effect;
+import org.bukkit.GameMode;
+import org.bukkit.Instrument;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Note;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Particle;
+import org.bukkit.ServerLinks;
+import org.bukkit.Sound;
+import org.bukkit.Statistic;
+import org.bukkit.WeatherType;
+import org.bukkit.WorldBorder;
 import org.bukkit.ban.IpBanList;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.block.Block;
@@ -118,7 +137,16 @@
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.CraftEffect;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.CraftOfflinePlayer;
+import org.bukkit.craftbukkit.CraftParticle;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftServerLinks;
+import org.bukkit.craftbukkit.CraftSound;
+import org.bukkit.craftbukkit.CraftStatistic;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.CraftWorldBorder;
 import org.bukkit.craftbukkit.advancement.CraftAdvancement;
 import org.bukkit.craftbukkit.advancement.CraftAdvancementProgress;
 import org.bukkit.craftbukkit.block.CraftBlockEntityState;
@@ -271,7 +299,7 @@
 
     @Override
     public boolean isTransferred() {
-        return this.getHandle().bridge$transferCookieConnection().isTransferred();
+        return this.getHandle().transferCookieConnection.isTransferred();
     }
 
     @Override
@@ -282,7 +310,7 @@
         ResourceLocation nms = CraftNamespacedKey.toMinecraft(key);
         this.requestedCookies.add(new CookieFuture(nms, future));
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundCookieRequestPacket(nms));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundCookieRequestPacket(nms));
 
         return future;
     }
@@ -292,17 +320,17 @@
         Preconditions.checkArgument(key != null, "Cookie key cannot be null");
         Preconditions.checkArgument(value != null, "Cookie value cannot be null");
         Preconditions.checkArgument(value.length <= 5120, "Cookie value too large, must be smaller than 5120 bytes");
-        Preconditions.checkState(this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.PLAY, "Can only store cookie in CONFIGURATION or PLAY protocol.");
+        Preconditions.checkState(this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.PLAY, "Can only store cookie in CONFIGURATION or PLAY protocol.");
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundStoreCookiePacket(CraftNamespacedKey.toMinecraft(key), value));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundStoreCookiePacket(CraftNamespacedKey.toMinecraft(key), value));
     }
 
     @Override
     public void transfer(String host, int port) {
         Preconditions.checkArgument(host != null, "Host cannot be null");
-        Preconditions.checkState(this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.PLAY, "Can only transfer in CONFIGURATION or PLAY protocol.");
+        Preconditions.checkState(this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.PLAY, "Can only transfer in CONFIGURATION or PLAY protocol.");
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundTransferPacket(host, port));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundTransferPacket(host, port));
     }
 
     @Override
@@ -360,17 +388,17 @@
 
     @Override
     public String getDisplayName() {
-        return this.getHandle().bridge$displayName();
+        return this.getHandle().displayName;
     }
 
     @Override
     public void setDisplayName(final String name) {
-        getHandle().banner$setDisplayName(name == null ? getName() : name);
+        this.getHandle().displayName = name == null ? this.getName() : name;
     }
 
     @Override
     public String getPlayerListName() {
-        return getHandle().getTabListDisplayName() == null ? getName() : CraftChatMessage.fromComponent(getHandle().getTabListDisplayName());
+        return this.getHandle().listName == null ? this.getName() : CraftChatMessage.fromComponent(this.getHandle().listName);
     }
 
     @Override
@@ -378,7 +406,7 @@
         if (name == null) {
             name = this.getName();
         }
-        getHandle().banner$setListName(name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name));
+        this.getHandle().listName = name.equals(this.getName()) ? null : CraftChatMessage.fromStringOrNull(name);
         for (ServerPlayer player : (List<ServerPlayer>) this.server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this.getHandle()));
@@ -450,7 +478,7 @@
         org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
         if (this.getHandle().connection == null) return;
 
-        this.getHandle().connection.disconnect(CraftChatMessage.fromStringOrEmpty(message));
+        this.getHandle().connection.disconnect(CraftChatMessage.fromStringOrEmpty(message, true));
     }
 
     @Override
@@ -465,7 +493,7 @@
 
     @Override
     public Location getCompassTarget() {
-        return this.getHandle().bridge$compassTarget();
+        return this.getHandle().compassTarget;
     }
 
     @Override
@@ -704,12 +732,9 @@
 
         // Construct the packets using the data allocated above and send then to the players
         for (Map.Entry<SectionPos, ChunkSectionChanges> entry : changes.entrySet()) {
-            // Banner start
             ChunkSectionChanges chunkChanges = entry.getValue();
-            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), null);
-            packet.putBukkitPacket(chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
-            getHandle().connection.send(packet);
-            // Banner end
+            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
+            this.getHandle().connection.send(packet);
         }
     }
 
@@ -784,7 +809,7 @@
         }
         sign.setText(text, true);
 
-        getHandle().connection.send(sign.getUpdatePacket());
+        this.getHandle().connection.send(new ClientboundBlockEntityDataPacket(sign.getBlockPos(), sign.getType(), sign.getUpdateTag(this.getHandle().registryAccess())));
     }
 
     @Override
@@ -955,13 +980,13 @@
 
     @Override
     public void sendLinks(ServerLinks links) {
-        if (getHandle().connection == null) {
+        if (this.getHandle().connection == null) {
             return;
         }
         Preconditions.checkArgument(links != null, "links cannot be null");
 
         net.minecraft.server.ServerLinks nms = ((CraftServerLinks) links).getServerLinks();
-        getHandle().connection.send(new ClientboundServerLinksPacket(nms.untrust()));
+        this.getHandle().connection.send(new ClientboundServerLinksPacket(nms.untrust()));
     }
 
     @Override
@@ -1049,8 +1074,9 @@
         if (fromWorld == toWorld) {
             entity.connection.teleport(to);
         } else {
+            entity.portalProcess = null; // SPIGOT-7785: there is no need to carry this over as it contains the old world/location and we might run into trouble if there is a portal in the same spot in both worlds
             // The respawn reason should never be used if the passed location is non null.
-            this.server.getHandle().respawn(entity, toWorld, true, to, true, Entity.RemovalReason.CHANGED_DIMENSION, null);
+            this.server.getHandle().respawn(entity, true, Entity.RemovalReason.CHANGED_DIMENSION, null, to);
         }
         return true;
     }
@@ -1093,13 +1119,13 @@
 
     @Override
     public void setSleepingIgnored(boolean isSleeping) {
-        this.getHandle().banner$setFauxSleeping(isSleeping);
+        this.getHandle().fauxSleeping = isSleeping;
         ((CraftWorld) this.getWorld()).getHandle().updateSleepingPlayerList();
     }
 
     @Override
     public boolean isSleepingIgnored() {
-        return this.getHandle().bridge$fauxSleeping();
+        return this.getHandle().fauxSleeping;
     }
 
     @Override
@@ -1113,7 +1139,7 @@
         BlockPos bed = this.getHandle().getRespawnPosition();
 
         if (world != null && bed != null) {
-            Optional<ServerPlayer.RespawnPosAngle> spawnLoc = ServerPlayer.findRespawnAndUseSpawnBlock(world, bed, getHandle().getRespawnAngle(), getHandle().isRespawnForced(), true);
+            Optional<ServerPlayer.RespawnPosAngle> spawnLoc = ServerPlayer.findRespawnAndUseSpawnBlock(world, bed, this.getHandle().getRespawnAngle(), this.getHandle().isRespawnForced(), true);
             if (spawnLoc.isPresent()) {
                 ServerPlayer.RespawnPosAngle vec = spawnLoc.get();
                 return CraftLocation.toBukkit(vec.position(), world.getWorld(), vec.yaw(), 0);
@@ -1259,13 +1285,13 @@
 
     @Override
     public void setPlayerTime(long time, boolean relative) {
-        getHandle().banner$setTimeOffset(time);
-        getHandle().banner$setRelativeTime(relative);
+        this.getHandle().timeOffset = time;
+        this.getHandle().relativeTime = relative;
     }
 
     @Override
     public long getPlayerTimeOffset() {
-        return this.getHandle().bridge$timeOffset();
+        return this.getHandle().timeOffset;
     }
 
     @Override
@@ -1275,7 +1301,7 @@
 
     @Override
     public boolean isPlayerTimeRelative() {
-        return this.getHandle().bridge$relativeTime();
+        return this.getHandle().relativeTime;
     }
 
     @Override
@@ -1532,7 +1558,7 @@
         // Remove the hidden entity from this player user list, if they're on it
         if (other instanceof ServerPlayer) {
             ServerPlayer otherPlayer = (ServerPlayer) other;
-            if (otherPlayer.bridge$sentListPacket()) {
+            if (otherPlayer.sentListPacket) {
                 this.getHandle().connection.send(new ClientboundPlayerInfoRemovePacket(List.of(otherPlayer.getUUID())));
             }
         }
@@ -1643,11 +1669,8 @@
         return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
     }
 
-    public boolean canSee(UUID uuid) {
+    public boolean canSeePlayer(UUID uuid) {
         org.bukkit.entity.Entity entity = this.getServer().getPlayer(uuid);
-        if (entity == null) {
-            entity = this.getServer().getEntity(uuid); // Also includes players, but check players first for efficiency
-        }
 
         return (entity != null) ? this.canSee(entity) : false; // If we can't find it, we can't see it
     }
@@ -1719,11 +1742,11 @@
 
             if (data.contains("newExp")) {
                 ServerPlayer handle = this.getHandle();
-                handle.banner$setNewExp(data.getInt("newExp"));
-                handle.banner$setNewTotalExp(data.getInt("newTotalExp"));
-                handle.banner$setNewLevel(data.getInt("newLevel"));
-                handle.banner$setExpToDrop(data.getInt("expToDrop"));
-                handle.banner$setKeepLevel(data.getBoolean("keepLevel"));
+                handle.newExp = data.getInt("newExp");
+                handle.newTotalExp = data.getInt("newTotalExp");
+                handle.newLevel = data.getInt("newLevel");
+                handle.expToDrop = data.getInt("expToDrop");
+                handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
     }
@@ -1735,14 +1758,11 @@
 
         CompoundTag data = nbttagcompound.getCompound("bukkit");
         ServerPlayer handle = this.getHandle();
-        data.putInt("newExp", handle.bridge$newExp());
-        data.putInt("newTotalExp", handle.bridge$newTotalExp());
-        data.putInt("newLevel", handle.bridge$newLevel());
-        data.putInt("expToDrop", handle.bridge$expToDrop());
-        data.putBoolean("keepLevel", handle.bridge$keepLevel());
-        data.putLong("firstPlayed", getFirstPlayed());
-        data.putLong("lastPlayed", System.currentTimeMillis());
-        data.putString("lastKnownName", handle.getScoreboardName());
+        data.putInt("newExp", handle.newExp);
+        data.putInt("newTotalExp", handle.newTotalExp);
+        data.putInt("newLevel", handle.newLevel);
+        data.putInt("expToDrop", handle.expToDrop);
+        data.putBoolean("keepLevel", handle.keepLevel);
         data.putLong("firstPlayed", this.getFirstPlayed());
         data.putLong("lastPlayed", System.currentTimeMillis());
         data.putString("lastKnownName", handle.getScoreboardName());
@@ -1785,10 +1805,8 @@
     }
 
     private void sendCustomPayload(ResourceLocation id, byte[] message) {
-        // Banner - TODO fix
-        /*
         ClientboundCustomPayloadPacket packet = new ClientboundCustomPayloadPacket(new DiscardedPayload(id, Unpooled.wrappedBuffer(message)));
-        this.getHandle().connection.send(packet);*/
+        this.getHandle().connection.send(packet);
     }
 
     @Override
@@ -2107,7 +2125,7 @@
         }
         this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
 
-        this.getHandle().banner$setMaxHealthCache(this.getMaxHealth());
+        this.getHandle().maxHealthCache = this.getMaxHealth();
     }
 
     @Override
@@ -2240,20 +2258,18 @@
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
-        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), true, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
-        this.getHandle().connection.send(packetplayoutworldparticles);
-
+        this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, false);
     }
 
     @Override
     public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
-        spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data, force);
+        this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data, force);
     }
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
         ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), force, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
-        getHandle().connection.send(packetplayoutworldparticles);
+        this.getHandle().connection.send(packetplayoutworldparticles);
     }
 
     @Override
@@ -2329,7 +2345,7 @@
         @Override
         public InetSocketAddress getRawAddress()
         {
-            return (InetSocketAddress) CraftPlayer.this.getHandle().connection.connection.getRawAddress();
+            return (InetSocketAddress) CraftPlayer.this.getHandle().connection.getRawAddress();
         }
 
         @Override
@@ -2337,7 +2353,7 @@
         {
             if ( CraftPlayer.this.getHealth() <= 0 && CraftPlayer.this.isOnline() )
             {
-                server.getServer().getPlayerList().respawn( getHandle(), false, Entity.RemovalReason.KILLED, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
+                CraftPlayer.this.server.getServer().getPlayerList().respawn( CraftPlayer.this.getHandle(), false, Entity.RemovalReason.KILLED, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
             }
         }
 
@@ -2393,14 +2409,9 @@
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
-            if ( getHandle().connection == null ) return;
-            // Banner - TODO fix
-            /*
-            getHandle().connection.send(new
-                    net.minecraft.network.protocol.game.ClientboundSystemChatPacket(
-                    Component.Serializer.fromJson(ComponentSerializer.
-                            toString(components)),
-                    position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));*/
+            if ( CraftPlayer.this.getHandle().connection == null ) return;
+
+            CraftPlayer.this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
         }
     };
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java	(date 1725177022663)
@@ -14,7 +14,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -24,7 +24,7 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
@@ -34,7 +34,7 @@
 
     @Override
     public void setTarget(org.bukkit.entity.Entity target) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         this.getHandle().setTarget(target == null ? null : ((CraftEntity) target).getHandle());
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCursor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCursor.java b/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCursor.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCursor.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCursor.java	(date 1725177022720)
@@ -1,27 +1,23 @@
 package org.bukkit.craftbukkit.map;
 
-import com.google.common.base.Preconditions;
+import java.util.Locale;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.level.saveddata.maps.MapDecorationType;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.CraftRegistry;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.map.MapCursor;
 
 public final class CraftMapCursor {
 
-    public static final class CraftType {
+    public static final class CraftType implements MapCursor.Type, Handleable<MapDecorationType> {
+
+        private static int count = 0;
 
         public static MapCursor.Type minecraftToBukkit(MapDecorationType minecraft) {
-            Preconditions.checkArgument(minecraft != null);
-
-            net.minecraft.core.Registry<MapDecorationType> registry = CraftRegistry.getMinecraftRegistry(Registries.MAP_DECORATION_TYPE);
-            MapCursor.Type bukkit = Registry.MAP_DECORATION_TYPE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-            Preconditions.checkArgument(bukkit != null);
-
-            return bukkit;
+            return CraftRegistry.minecraftToBukkit(minecraft, Registries.MAP_DECORATION_TYPE, Registry.MAP_DECORATION_TYPE);
         }
 
         public static MapCursor.Type minecraftHolderToBukkit(Holder<MapDecorationType> minecraft) {
@@ -29,23 +25,85 @@
         }
 
         public static MapDecorationType bukkitToMinecraft(MapCursor.Type bukkit) {
-            Preconditions.checkArgument(bukkit != null);
-
-            return CraftRegistry.getMinecraftRegistry(Registries.MAP_DECORATION_TYPE)
-                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+            return CraftRegistry.bukkitToMinecraft(bukkit);
         }
 
         public static Holder<MapDecorationType> bukkitToMinecraftHolder(MapCursor.Type bukkit) {
-            Preconditions.checkArgument(bukkit != null);
+            return CraftRegistry.bukkitToMinecraftHolder(bukkit, Registries.MAP_DECORATION_TYPE);
+        }
+
+        private final NamespacedKey key;
+        private final MapDecorationType mapDecorationType;
+        private final String name;
+        private final int ordinal;
+
+        public CraftType(NamespacedKey key, MapDecorationType mapDecorationType) {
+            this.key = key;
+            this.mapDecorationType = mapDecorationType;
+            // For backwards compatibility, minecraft values will still return the uppercase name without the namespace,
+            // in case plugins use for example the name as key in a config file to receive type specific values.
+            // Custom types will return the key with namespace. For a plugin this should look than like a new type
+            // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+            if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+                this.name = key.getKey().toUpperCase(Locale.ROOT);
+            } else {
+                this.name = key.toString();
+            }
+            this.ordinal = CraftType.count++;
+        }
+
+        @Override
+        public MapDecorationType getHandle() {
+            return this.mapDecorationType;
+        }
+
+        @Override
+        public NamespacedKey getKey() {
+            return this.key;
+        }
+
+        @Override
+        public int compareTo(MapCursor.Type type) {
+            return this.ordinal - type.ordinal();
+        }
+
+        @Override
+        public String name() {
+            return this.name;
+        }
+
+        @Override
+        public int ordinal() {
+            return this.ordinal;
+        }
 
-            net.minecraft.core.Registry<MapDecorationType> registry = CraftRegistry.getMinecraftRegistry(Registries.MAP_DECORATION_TYPE);
+        @Override
+        public String toString() {
+            // For backwards compatibility
+            return this.name();
+        }
 
-            if (registry.wrapAsHolder(CraftType.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<MapDecorationType> holder) {
-                return holder;
+        @Override
+        public boolean equals(Object other) {
+            if (this == other) {
+                return true;
             }
 
-            throw new IllegalArgumentException("No Reference holder found for " + bukkit
-                    + ", this can happen if a plugin creates its own map cursor type without properly registering it.");
+            if (!(other instanceof CraftType)) {
+                return false;
+            }
+
+            return this.getKey().equals(((MapCursor.Type) other).getKey());
+        }
+
+        @Override
+        public int hashCode() {
+            return this.getKey().hashCode();
+        }
+
+        @Override
+        public byte getValue() {
+            return (byte) CraftRegistry.getMinecraftRegistry(Registries.MAP_DECORATION_TYPE).getId(this.getHandle());
         }
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java	(date 1725177022721)
@@ -6,8 +6,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -33,7 +31,7 @@
 
     @Override
     public int getId() {
-        return this.worldMap.bridge$mapView().getId();
+        return this.worldMap.id.id();
     }
 
     @Override
@@ -54,14 +52,14 @@
     @Override
     public World getWorld() {
         ResourceKey<net.minecraft.world.level.Level> dimension = this.worldMap.dimension;
-        ServerLevel world = BukkitExtraConstants.getServer().getLevel(dimension);
+        ServerLevel world = MinecraftServer.getServer().getLevel(dimension);
 
         if (world != null) {
             return world.getWorld();
         }
 
-        if (this.worldMap.bridge$uniqueId() != null) {
-            return Bukkit.getServer().getWorld(this.worldMap.bridge$uniqueId());
+        if (this.worldMap.uniqueId != null) {
+            return Bukkit.getServer().getWorld(this.worldMap.uniqueId);
         }
         return null;
     }
@@ -69,7 +67,7 @@
     @Override
     public void setWorld(World world) {
         this.worldMap.dimension = ((CraftWorld) world).getHandle().dimension();
-        this.worldMap.banner$setUniqueId(world.getUID());
+        this.worldMap.uniqueId = world.getUID();
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java b/banner_server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java	(date 1725177022558)
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.authlib.GameProfile;
 import java.time.Duration;
 import java.time.Instant;
@@ -162,10 +161,10 @@
     }
 
     static GameProfile getProfileByUUID(UUID uuid) {
-        return (BukkitExtraConstants.getServer() != null) ? BukkitExtraConstants.getServer().getProfileCache().get(uuid).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(uuid).orElse(null) : null;
     }
 
     static GameProfile getProfileByName(String name) {
-        return (BukkitExtraConstants.getServer() != null) ? BukkitExtraConstants.getServer().getProfileCache().get(name).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(name).orElse(null) : null;
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java b/banner_server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java	(date 1725177022635)
@@ -93,8 +93,7 @@
                 return !((CraftWorld) world).getHandle().equals(this.handle.level);
             });
 
-            this.handle.respawnDragon(list.stream().map(enderCrystal -> ((CraftEnderCrystal) enderCrystal).getHandle()).collect(Collectors.toList()));
-            return this.handle.bridge$isRespawnDragon();
+            return this.handle.respawnDragon(list.stream().map(enderCrystal -> ((CraftEnderCrystal) enderCrystal).getHandle()).collect(Collectors.toList()));
         }
         return false;
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java	(date 1725177022733)
@@ -1,11 +1,14 @@
 package org.bukkit.craftbukkit.util;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Multimap;
 import com.google.common.io.ByteStreams;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
@@ -24,6 +27,7 @@
 import org.bukkit.craftbukkit.legacy.FieldRename;
 import org.bukkit.craftbukkit.legacy.MaterialRerouting;
 import org.bukkit.craftbukkit.legacy.MethodRerouting;
+import org.bukkit.craftbukkit.legacy.enums.EnumEvil;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteArgument;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteBuilder;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteMethodData;
@@ -61,6 +65,12 @@
             "org/bukkit/inventory/ItemStack (S)V setDurability"
     ));
 
+    private static final Map<String, String> ENUM_RENAMES = Map.of(
+            "java/lang/Enum", "java/lang/Object",
+            "java/util/EnumSet", "org/bukkit/craftbukkit/legacy/enums/ImposterEnumSet",
+            "java/util/EnumMap", "org/bukkit/craftbukkit/legacy/enums/ImposterEnumMap"
+    );
+
     private static final Map<String, String> RENAMES = Map.of(
             "org/bukkit/entity/TextDisplay$TextAligment", "org/bukkit/entity/TextDisplay$TextAlignment", // SPIGOT-7335
             "org/spigotmc/event/entity/EntityMountEvent", "org/bukkit/event/entity/EntityMountEvent",
@@ -68,7 +78,13 @@
     );
 
     private static final Map<String, String> CLASS_TO_INTERFACE = Map.of(
-            "org/bukkit/inventory/InventoryView", "org/bukkit/craftbukkit/inventory/CraftAbstractInventoryView"
+            "org/bukkit/inventory/InventoryView", "org/bukkit/craftbukkit/inventory/CraftAbstractInventoryView",
+            "org/bukkit/entity/Villager$Type", "NOP",
+            "org/bukkit/entity/Villager$Profession", "NOP",
+            "org/bukkit/entity/Frog$Variant", "NOP",
+            "org/bukkit/entity/Cat$Type", "NOP",
+            "org/bukkit/map/MapCursor$Type", "NOP",
+            "org/bukkit/block/banner/PatternType", "NOP"
     );
 
     private static Map<String, RerouteMethodData> createReroutes(Class<?> clazz) {
@@ -82,6 +98,7 @@
     private static final Map<String, RerouteMethodData> FIELD_RENAME_METHOD_REROUTE = Commodore.createReroutes(FieldRename.class);
     private static final Map<String, RerouteMethodData> MATERIAL_METHOD_REROUTE = Commodore.createReroutes(MaterialRerouting.class);
     private static final Map<String, RerouteMethodData> METHOD_REROUTE = Commodore.createReroutes(MethodRerouting.class);
+    private static final Map<String, RerouteMethodData> ENUM_METHOD_REROUTE = Commodore.createReroutes(EnumEvil.class);
 
     public static void main(String[] args) {
         OptionParser parser = new OptionParser();
@@ -147,10 +164,22 @@
 
     public static byte[] convert(byte[] b, final String pluginName, final ApiVersion pluginVersion, final Set<String> activeCompatibilities) {
         final boolean modern = pluginVersion.isNewerThanOrSameAs(ApiVersion.FLATTENING);
+        final boolean enumCompatibility = pluginVersion.isOlderThanOrSameAs(ApiVersion.getOrCreateVersion("1.20.6")) && activeCompatibilities.contains("enum-compatibility-mode");
         ClassReader cr = new ClassReader(b);
-        ClassWriter cw = new ClassWriter(cr, 0);
+        ClassWriter cw = new ClassWriter(0); // TODO 2024-06-22: Open PR to ASM to included interface in handle hash
+
+        List<String> methodEnumSignatures = Commodore.getMethodSignatures(b);
+        Multimap<String, String> enumLessToEnum = HashMultimap.create();
+        for (String method : methodEnumSignatures) {
+            enumLessToEnum.put(method.replace("Ljava/lang/Enum;", "Ljava/lang/Object;"), method);
+        }
 
-        cr.accept(new ClassRemapper(new ClassVisitor(Opcodes.ASM9, cw) {
+        ClassVisitor visitor = cw;
+        if (enumCompatibility) {
+            visitor = new LimitedClassRemapper(cw, new SimpleRemapper(Commodore.ENUM_RENAMES));
+        }
+
+        cr.accept(new ClassRemapper(new ClassVisitor(Opcodes.ASM9, visitor) {
             final Set<RerouteMethodData> rerouteMethodData = new HashSet<>();
             String className;
             boolean isInterface;
@@ -179,8 +208,10 @@
                         } else if (argument.injectPluginVersion()) {
                             methodVisitor.visitLdcInsn(pluginVersion.getVersionString());
                             methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, Type.getInternalName(ApiVersion.class), "getOrCreateVersion", "(Ljava/lang/String;)L" + Type.getInternalName(ApiVersion.class) + ";", false);
+                        } else if (argument.injectCompatibility() != null) {
+                            methodVisitor.visitLdcInsn(activeCompatibilities.contains(argument.injectCompatibility()));
                         } else {
-                            methodVisitor.visitIntInsn(argument.instruction(), index);
+                            methodVisitor.visitVarInsn(argument.instruction(), index);
                             index++;
 
                             // Long and double need two space
@@ -212,6 +243,15 @@
 
             @Override
             public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
+                if (enumCompatibility && (access & Opcodes.ACC_SYNTHETIC) != 0 && (access & Opcodes.ACC_BRIDGE) != 0 && desc.contains("Ljava/lang/Object;")) {
+                    // SPIGOT-7820: Do not use object method if enum method is present
+                    // The object method does only redirect to the enum method
+                    Collection<String> result = enumLessToEnum.get(desc.replace("Ljava/lang/Enum;", "Ljava/lang/Object;") + " " + name);
+                    if (result.size() == 2) {
+                        name = name + "_BUKKIT_UNUSED";
+                    }
+                }
+
                 return new MethodVisitor(this.api, super.visitMethod(access, name, desc, signature, exceptions)) {
 
                     @Override
@@ -313,6 +353,10 @@
                             }
                         }
 
+                        if (this.checkReroute(visitor, Commodore.ENUM_METHOD_REROUTE, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
+                            return;
+                        }
+
                         // SPIGOT-4496
                         if (owner.equals("org/bukkit/map/MapView") && name.equals("getId") && desc.equals("()S")) {
                             // Should be same size on stack so just call other method
@@ -412,7 +456,7 @@
                     }
 
                     private boolean checkReroute(MethodPrinter visitor, Map<String, RerouteMethodData> rerouteMethodDataMap, int opcode, String owner, String name, String desc, Type samMethodType, Type instantiatedMethodType) {
-                        return Commodore.rerouteMethods(activeCompatibilities, rerouteMethodDataMap, opcode == Opcodes.INVOKESTATIC || opcode == Opcodes.H_INVOKESTATIC, owner, name, desc, data -> {
+                        return Commodore.rerouteMethods(activeCompatibilities, pluginVersion, rerouteMethodDataMap, opcode == Opcodes.INVOKESTATIC || opcode == Opcodes.H_INVOKESTATIC, owner, name, desc, data -> {
                             visitor.visit(Opcodes.INVOKESTATIC, className, Commodore.buildMethodName(data), Commodore.buildMethodDesc(data), isInterface, samMethodType, instantiatedMethodType);
                             rerouteMethodData.add(data);
                         });
@@ -582,7 +626,7 @@
     But since it is only applied for each class and method call once when they get first loaded, it should not be that bad.
     (Although some load time testing could be done)
      */
-    public static boolean rerouteMethods(Set<String> activeCompatibilities, Map<String, RerouteMethodData> rerouteMethodDataMap, boolean staticCall, String owner, String name, String desc, Consumer<RerouteMethodData> consumer) {
+    public static boolean rerouteMethods(Set<String> activeCompatibilities, ApiVersion pluginVersion, Map<String, RerouteMethodData> rerouteMethodDataMap, boolean staticCall, String owner, String name, String desc, Consumer<RerouteMethodData> consumer) {
         Type ownerType = Type.getObjectType(owner);
         Class<?> ownerClass;
         try {
@@ -609,6 +653,10 @@
                 return false;
             }
 
+            if (data.requiredPluginVersion() != null && !data.requiredPluginVersion().test(pluginVersion)) {
+                return false;
+            }
+
             consumer.accept(data);
             return true;
         }
@@ -616,12 +664,26 @@
         return false;
     }
 
+    private static List<String> getMethodSignatures(byte[] clazz) {
+        List<String> methods = new ArrayList<>();
+        ClassReader cr = new ClassReader(clazz);
+        cr.accept(new ClassVisitor(Opcodes.ASM9) {
+            @Override
+            public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
+                methods.add(descriptor + " " + name);
+                return null;
+            }
+        }, 0);
+
+        return methods;
+    }
+
     private static String buildMethodName(RerouteMethodData rerouteMethodData) {
         return Commodore.BUKKIT_GENERATED_METHOD_PREFIX + rerouteMethodData.targetOwner().replace('/', '_') + "_" + rerouteMethodData.targetName();
     }
 
     private static String buildMethodDesc(RerouteMethodData rerouteMethodData) {
-        return Type.getMethodDescriptor(rerouteMethodData.sourceDesc().getReturnType(), rerouteMethodData.arguments().stream().filter(a -> !a.injectPluginName()).filter(a -> !a.injectPluginVersion()).map(RerouteArgument::type).toArray(Type[]::new));
+        return Type.getMethodDescriptor(rerouteMethodData.sourceDesc().getReturnType(), rerouteMethodData.arguments().stream().filter(a -> !a.injectPluginName()).filter(a -> !a.injectPluginVersion()).filter(a -> a.injectCompatibility() == null).map(RerouteArgument::sourceType).toArray(Type[]::new));
     }
 
     @FunctionalInterface
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java	(date 1725177022733)
@@ -10,8 +10,6 @@
 import java.util.Optional;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.ClickEvent.Action;
@@ -201,7 +199,7 @@
     }
 
     public static String toJSON(Component component) {
-        return Component.Serializer.toJson(component, BukkitExtraConstants.getDefaultRegistryAccess());
+        return Component.Serializer.toJson(component, MinecraftServer.getDefaultRegistryAccess());
     }
 
     public static String toJSONOrNull(Component component) {
@@ -212,7 +210,7 @@
     public static Component fromJSON(String jsonMessage) throws JsonParseException {
         // Note: This also parses plain Strings to text components.
         // Note: An empty message (empty, or only consisting of whitespace) results in null rather than a parse exception.
-        return Component.Serializer.fromJson(jsonMessage, BukkitExtraConstants.getDefaultRegistryAccess());
+        return Component.Serializer.fromJson(jsonMessage, MinecraftServer.getDefaultRegistryAccess());
     }
 
     public static Component fromJSONOrNull(String jsonMessage) {
@@ -233,51 +231,26 @@
     }
 
     public static Component fromJSONOrString(String message, boolean nullable, boolean keepNewlines) {
+        return CraftChatMessage.fromJSONOrString(message, nullable, keepNewlines, Integer.MAX_VALUE, false);
+    }
+
+    public static Component fromJSONOrString(String message, boolean nullable, boolean keepNewlines, int maxLength, boolean checkJsonContentLength) {
         if (message == null) message = "";
         if (nullable && message.isEmpty()) return null;
         Component component = CraftChatMessage.fromJSONOrNull(message);
         if (component != null) {
-            return component;
-        } else {
-            return CraftChatMessage.fromString(message, keepNewlines)[0];
-        }
-    }
-
-    public static String fromJSONOrStringToJSON(String message) {
-        return CraftChatMessage.fromJSONOrStringToJSON(message, false);
-    }
-
-    public static String fromJSONOrStringToJSON(String message, boolean keepNewlines) {
-        return CraftChatMessage.fromJSONOrStringToJSON(message, false, keepNewlines, Integer.MAX_VALUE, false);
-    }
-
-    public static String fromJSONOrStringOrNullToJSON(String message) {
-        return CraftChatMessage.fromJSONOrStringOrNullToJSON(message, false);
-    }
-
-    public static String fromJSONOrStringOrNullToJSON(String message, boolean keepNewlines) {
-        return CraftChatMessage.fromJSONOrStringToJSON(message, true, keepNewlines, Integer.MAX_VALUE, false);
-    }
-
-    public static String fromJSONOrStringToJSON(String message, boolean nullable, boolean keepNewlines, int maxLength, boolean checkJsonContentLength) {
-        if (message == null) message = "";
-        if (nullable && message.isEmpty()) return null;
-        // If the input can be parsed as JSON, we use that:
-        Component component = CraftChatMessage.fromJSONOrNull(message);
-        if (component != null) {
             if (checkJsonContentLength) {
                 String content = CraftChatMessage.fromComponent(component);
                 String trimmedContent = CraftChatMessage.trimMessage(content, maxLength);
-                if (content != trimmedContent) { // identity comparison is fine here
+                if (content != trimmedContent) { // Identity comparison is fine here
                     // Note: The resulting text has all non-plain text features stripped.
-                    return CraftChatMessage.fromStringToJSON(trimmedContent, keepNewlines);
+                    return CraftChatMessage.fromString(trimmedContent, keepNewlines)[0];
                 }
             }
-            return message;
+            return component;
         } else {
-            // Else we interpret the input as legacy text:
             message = CraftChatMessage.trimMessage(message, maxLength);
-            return CraftChatMessage.fromStringToJSON(message, keepNewlines);
+            return CraftChatMessage.fromString(message, keepNewlines)[0];
         }
     }
 
@@ -289,37 +262,18 @@
         }
     }
 
-    public static String fromStringToJSON(String message) {
-        return CraftChatMessage.fromStringToJSON(message, false);
-    }
-
-    public static String fromStringToJSON(String message, boolean keepNewlines) {
-        Component component = CraftChatMessage.fromString(message, keepNewlines)[0];
-        return CraftChatMessage.toJSON(component);
-    }
-
-    public static String fromStringOrNullToJSON(String message) {
-        Component component = CraftChatMessage.fromStringOrNull(message);
-        return CraftChatMessage.toJSONOrNull(component);
-    }
-
-    public static String fromJSONComponent(String jsonMessage) {
-        Component component = CraftChatMessage.fromJSONOrNull(jsonMessage);
-        return CraftChatMessage.fromComponent(component);
-    }
-
     public static String fromComponent(Component component) {
         if (component == null) return "";
         StringBuilder out = new StringBuilder();
 
         boolean hadFormat = false;
-        for (Component c : list(component)) {
+        for (Component c : component) {
             Style modi = c.getStyle();
             TextColor color = modi.getColor();
             if (c.getContents() != PlainTextContents.EMPTY || color != null) {
                 if (color != null) {
-                    if (color.bridge$format() != null) {
-                        out.append(color.bridge$format());
+                    if (color.format != null) {
+                        out.append(color.format);
                     } else {
                         out.append(ChatColor.COLOR_CHAR).append("x");
                         for (char magic : color.serialize().substring(1).toCharArray()) {
@@ -360,16 +314,6 @@
         return out.toString();
     }
 
-    public static ArrayList<Component> list(Component txt) {
-        ArrayList<Component> arr = new ArrayList<>();
-        if (!arr.contains(txt))
-            arr.add(txt);
-        for (Component tx : txt.getSiblings()) {
-            arr.addAll(list(tx) );
-        }
-        return arr;
-    }
-
     public static Component fixComponent(MutableComponent component) {
         Matcher matcher = CraftChatMessage.LINK_PATTERN.matcher("");
         return CraftChatMessage.fixComponent(component, matcher);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/ApiVersion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/ApiVersion.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/ApiVersion.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/ApiVersion.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/ApiVersion.java	(date 1725177022732)
@@ -1,10 +1,11 @@
 package org.bukkit.craftbukkit.util;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 
-public final class ApiVersion implements Comparable<ApiVersion> {
+public final class ApiVersion implements Comparable<ApiVersion>, Serializable {
 
     public static final ApiVersion CURRENT;
     public static final ApiVersion FLATTENING;
@@ -15,7 +16,7 @@
 
     static {
         versions = new HashMap<>();
-        CURRENT = getOrCreateVersion("1.21");
+        CURRENT = getOrCreateVersion("1.21.1");
         FLATTENING = getOrCreateVersion("1.13");
         FIELD_NAME_PARITY = getOrCreateVersion("1.20.5");
         NONE = getOrCreateVersion("none");
@@ -122,4 +123,6 @@
     public String toString() {
         return this.getVersionString();
     }
+
+    private static final long serialVersionUID = 0L;
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java	(date 1725177022663)
@@ -14,22 +14,22 @@
 
     @Override
     public float getYield() {
-        return this.getHandle().bridge$yield();
+        return this.getHandle().yield;
     }
 
     @Override
     public boolean isIncendiary() {
-        return this.getHandle().bridge$isIncendiary();
+        return this.getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-        this.getHandle().banner$setIsIncendiary(isIncendiary);
+        this.getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        this.getHandle().banner$setYield(yield);
+        this.getHandle().yield = yield;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java	(date 1725177022733)
@@ -2,12 +2,10 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
 import com.google.common.io.Files;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
@@ -35,7 +33,6 @@
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.alchemy.Potion;
-import net.minecraft.world.item.component.ItemAttributeModifiers;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.storage.LevelResource;
@@ -50,11 +47,10 @@
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.CraftFeatureFlag;
 import org.bukkit.craftbukkit.CraftRegistry;
+import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.attribute.CraftAttribute;
-import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.damage.CraftDamageEffect;
 import org.bukkit.craftbukkit.damage.CraftDamageSourceBuilder;
@@ -106,10 +102,10 @@
     }
 
     // ========================================================================
-    public static final Map<Block, Material> BLOCK_MATERIAL = new HashMap<>();
-    public static final Map<Item, Material> ITEM_MATERIAL = new HashMap<>();
-    public static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
-    public static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
+    private static final Map<Block, Material> BLOCK_MATERIAL = new HashMap<>();
+    private static final Map<Item, Material> ITEM_MATERIAL = new HashMap<>();
+    private static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
+    private static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
 
     static {
         for (Block block : BuiltInRegistries.BLOCK) {
@@ -229,7 +225,7 @@
      * @return string
      */
     public String getMappingsVersion() {
-        return "229d7afc75b70a6c388337687ac4da1f";
+        return "7092ff1ff9352ad7e2260dc150e6a3ec";
     }
 
     @Override
@@ -242,7 +238,7 @@
         net.minecraft.world.item.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
-            nmsStack.applyComponents(new ItemParser(Commands.createValidationContext(BukkitExtraConstants.getDefaultRegistryAccess())).parse(new StringReader(arguments)).components());
+            nmsStack.applyComponents(new ItemParser(Commands.createValidationContext(MinecraftServer.getDefaultRegistryAccess())).parse(new StringReader(arguments)).components());
         } catch (CommandSyntaxException ex) {
             Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
         }
@@ -253,7 +249,7 @@
     }
 
     private static File getBukkitDataPackFolder() {
-        return new File(BukkitExtraConstants.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+        return new File(MinecraftServer.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
     }
 
     @Override
@@ -264,7 +260,7 @@
         JsonElement jsonelement = ServerAdvancementManager.GSON.fromJson(advancement, JsonElement.class);
         net.minecraft.advancements.Advancement nms = net.minecraft.advancements.Advancement.CODEC.parse(JsonOps.INSTANCE, jsonelement).getOrThrow(JsonParseException::new);
         if (nms != null) {
-            BukkitExtraConstants.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
+            MinecraftServer.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
             Advancement bukkit = Bukkit.getAdvancement(key);
 
             if (bukkit != null) {
@@ -277,7 +273,7 @@
                     Bukkit.getLogger().log(Level.SEVERE, "Error saving advancement " + key, ex);
                 }
 
-                BukkitExtraConstants.getServer().getPlayerList().reloadResources();
+                MinecraftServer.getServer().getPlayerList().reloadResources();
 
                 return bukkit;
             }
@@ -295,7 +291,7 @@
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
         ApiVersion toCheck = ApiVersion.getOrCreateVersion(pdf.getAPIVersion());
-        ApiVersion minimumVersion = BukkitExtraConstants.getServer().bridge$server().minimumAPI;
+        ApiVersion minimumVersion = MinecraftServer.getServer().server.minimumAPI;
 
         if (toCheck.isNewerThan(ApiVersion.CURRENT)) {
             // Newer than supported
@@ -317,42 +313,38 @@
     }
 
     public static boolean isLegacy(PluginDescriptionFile pdf) {
-        return false;
+        return pdf.getAPIVersion() == null;
     }
 
     @Override
     public byte[] processClass(PluginDescriptionFile pdf, String path, byte[] clazz) {
+        try {
+            clazz = Commodore.convert(clazz, pdf.getName(), ApiVersion.getOrCreateVersion(pdf.getAPIVersion()), ((CraftServer) Bukkit.getServer()).activeCompatibilities);
+        } catch (Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Fatal error trying to convert " + pdf.getFullName() + ":" + path, ex);
+        }
+
         return clazz;
     }
 
     @Override
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(Material material, EquipmentSlot slot) {
-        ImmutableMultimap.Builder<Attribute, AttributeModifier> defaultAttributes = ImmutableMultimap.builder();
-
-        ItemAttributeModifiers nmsDefaultAttributes = CraftMagicNumbers.getItem(material).getDefaultAttributeModifiers();
-        nmsDefaultAttributes.forEach(CraftEquipmentSlot.getNMS(slot), (key, value) -> {
-            Attribute attribute = CraftAttribute.minecraftToBukkit(key.value());
-            defaultAttributes.put(attribute, CraftAttributeInstance.convert(value, slot));
-        });
-
-        return defaultAttributes.build();
+        return material.getDefaultAttributeModifiers(slot);
     }
 
     @Override
     public CreativeCategory getCreativeCategory(Material material) {
-        return CreativeCategory.BUILDING_BLOCKS; // TODO: Figure out what to do with this
+        return material.getCreativeCategory();
     }
 
     @Override
     public String getBlockTranslationKey(Material material) {
-        Block block = CraftMagicNumbers.getBlock(material);
-        return (block != null) ? block.getDescriptionId() : null;
+        return material.getBlockTranslationKey();
     }
 
     @Override
     public String getItemTranslationKey(Material material) {
-        Item item = CraftMagicNumbers.getItem(material);
-        return (item != null) ? item.getDescriptionId() : null;
+        return material.getItemTranslationKey();
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java	(date 1725177022677)
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.Locale;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.monster.Zombie;
@@ -10,11 +10,12 @@
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.CreatureSpawnEvent;
@@ -93,7 +94,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(this.getWorld()), "Cannot sleep across worlds");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot sleep during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot sleep during world generation");
 
         BlockPos position = CraftLocation.toBlockPosition(location);
         BlockState iblockdata = this.getHandle().level().getBlockState(position);
@@ -108,7 +109,7 @@
     @Override
     public void wakeup() {
         Preconditions.checkState(this.isSleeping(), "Cannot wakeup if not sleeping");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot wakeup during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot wakeup during world generation");
 
         this.getHandle().stopSleeping();
     }
@@ -120,49 +121,169 @@
 
     @Override
     public ZombieVillager zombify() {
-        net.minecraft.world.entity.monster.ZombieVillager entityzombievillager = BukkitExtraConstants.zombifyVillager(this.getHandle().level().getMinecraftWorld(), this.getHandle(), this.getHandle().blockPosition(), this.isSilent(), CreatureSpawnEvent.SpawnReason.CUSTOM);
+        net.minecraft.world.entity.monster.ZombieVillager entityzombievillager = Zombie.zombifyVillager(this.getHandle().level().getMinecraftWorld(), this.getHandle(), this.getHandle().blockPosition(), this.isSilent(), CreatureSpawnEvent.SpawnReason.CUSTOM);
         return (entityzombievillager != null) ? (ZombieVillager) entityzombievillager.getBukkitEntity() : null;
     }
 
-    public static class CraftType {
+    public static class CraftType implements Type, Handleable<VillagerType> {
+        private static int count = 0;
 
         public static Type minecraftToBukkit(VillagerType minecraft) {
-            Preconditions.checkArgument(minecraft != null);
-
-            net.minecraft.core.Registry<VillagerType> registry = CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_TYPE);
-            Type bukkit = Registry.VILLAGER_TYPE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-            Preconditions.checkArgument(bukkit != null);
-
-            return bukkit;
+            return CraftRegistry.minecraftToBukkit(minecraft, Registries.VILLAGER_TYPE, Registry.VILLAGER_TYPE);
         }
 
         public static VillagerType bukkitToMinecraft(Type bukkit) {
-            Preconditions.checkArgument(bukkit != null);
+            return CraftRegistry.bukkitToMinecraft(bukkit);
+        }
+
+        private final NamespacedKey key;
+        private final VillagerType villagerType;
+        private final String name;
+        private final int ordinal;
+
+        public CraftType(NamespacedKey key, VillagerType villagerType) {
+            this.key = key;
+            this.villagerType = villagerType;
+            // For backwards compatibility, minecraft values will still return the uppercase name without the namespace,
+            // in case plugins use for example the name as key in a config file to receive type specific values.
+            // Custom types will return the key with namespace. For a plugin this should look than like a new type
+            // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+            if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+                this.name = key.getKey().toUpperCase(Locale.ROOT);
+            } else {
+                this.name = key.toString();
+            }
+            this.ordinal = CraftType.count++;
+        }
+
+        @Override
+        public VillagerType getHandle() {
+            return this.villagerType;
+        }
+
+        @Override
+        public NamespacedKey getKey() {
+            return this.key;
+        }
 
-            return CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_TYPE)
-                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        @Override
+        public int compareTo(Type type) {
+            return this.ordinal - type.ordinal();
         }
-    }
+
+        @Override
+        public String name() {
+            return this.name;
+        }
 
-    public static class CraftProfession {
+        @Override
+        public int ordinal() {
+            return this.ordinal;
+        }
+
+        @Override
+        public String toString() {
+            // For backwards compatibility
+            return this.name();
+        }
+
+        @Override
+        public boolean equals(Object other) {
+            if (this == other) {
+                return true;
+            }
+
+            if (!(other instanceof CraftType)) {
+                return false;
+            }
+
+            return this.getKey().equals(((Type) other).getKey());
+        }
+
+        @Override
+        public int hashCode() {
+            return this.getKey().hashCode();
+        }
+    }
+
+    public static class CraftProfession implements Profession, Handleable<VillagerProfession> {
+        private static int count = 0;
 
         public static Profession minecraftToBukkit(VillagerProfession minecraft) {
-            Preconditions.checkArgument(minecraft != null);
-
-            net.minecraft.core.Registry<VillagerProfession> registry = CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_PROFESSION);
-            Profession bukkit = Registry.VILLAGER_PROFESSION.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-            Preconditions.checkArgument(bukkit != null);
-
-            return bukkit;
+            return CraftRegistry.minecraftToBukkit(minecraft, Registries.VILLAGER_PROFESSION, Registry.VILLAGER_PROFESSION);
         }
 
         public static VillagerProfession bukkitToMinecraft(Profession bukkit) {
-            Preconditions.checkArgument(bukkit != null);
+            return CraftRegistry.bukkitToMinecraft(bukkit);
+        }
+
+        private final NamespacedKey key;
+        private final VillagerProfession villagerProfession;
+        private final String name;
+        private final int ordinal;
+
+        public CraftProfession(NamespacedKey key, VillagerProfession villagerProfession) {
+            this.key = key;
+            this.villagerProfession = villagerProfession;
+            // For backwards compatibility, minecraft values will still return the uppercase name without the namespace,
+            // in case plugins use for example the name as key in a config file to receive profession specific values.
+            // Custom professions will return the key with namespace. For a plugin this should look than like a new profession
+            // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+            if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+                this.name = key.getKey().toUpperCase(Locale.ROOT);
+            } else {
+                this.name = key.toString();
+            }
+            this.ordinal = CraftProfession.count++;
+        }
+
+        @Override
+        public VillagerProfession getHandle() {
+            return this.villagerProfession;
+        }
+
+        @Override
+        public NamespacedKey getKey() {
+            return this.key;
+        }
 
-            return CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_PROFESSION)
-                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        @Override
+        public int compareTo(Profession profession) {
+            return this.ordinal - profession.ordinal();
+        }
+
+        @Override
+        public String name() {
+            return this.name;
+        }
+
+        @Override
+        public int ordinal() {
+            return this.ordinal;
+        }
+
+        @Override
+        public String toString() {
+            // For backwards compatibility
+            return this.name();
+        }
+
+        @Override
+        public boolean equals(Object other) {
+            if (this == other) {
+                return true;
+            }
+
+            if (!(other instanceof CraftProfession)) {
+                return false;
+            }
+
+            return this.getKey().equals(((Profession) other).getKey());
+        }
+
+        @Override
+        public int hashCode() {
+            return this.getKey().hashCode();
         }
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java	(date 1725177022733)
@@ -91,12 +91,10 @@
         return this.handle.getLevel();
     }
 
-    // Banner TODO fixme
-    /*
     @Override
     public void addFreshEntityWithPassengers(Entity arg0, CreatureSpawnEvent.SpawnReason arg1) {
         this.handle.addFreshEntityWithPassengers(arg0, arg1);
-    }*/
+    }
 
     @Override
     public void addFreshEntityWithPassengers(Entity entity) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java	(date 1725177022733)
@@ -86,7 +86,7 @@
         if (region == null) {
             return true;
         }
-        entity.banner$setGeneration(true);
+        entity.generation = true;
         CraftEntity craftEntity = entity.getBukkitEntity();
         int x = entity.getBlockX();
         int y = entity.getBlockY();
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java	(date 1725177022712)
@@ -51,11 +51,6 @@
         };
     }
 
-    @RerouteStatic("java/lang/Enum")
-    public static <T extends Enum<T>> T valueOf(Class<T> enumClass, String name, @InjectPluginVersion ApiVersion apiVersion) {
-        return Enum.valueOf(enumClass, FieldRename.rename(apiVersion, enumClass.getName().replace('.', '/'), name));
-    }
-
     @RequireCompatibility("allow-old-keys-in-registry")
     public static <T extends Keyed> T get(Registry<T> registry, NamespacedKey namespacedKey) {
         // We don't have version-specific changes, so just use current, and don't inject a version
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java	(date 1725177022739)
@@ -16,7 +16,7 @@
             this.server.close();
         } finally {
             try {
-                this.server.bridge$reader().getTerminal().restore();
+                this.server.reader.getTerminal().restore();
             } catch (Exception e) {
             }
         }
Index: banner_server/src/main/java/org/spigotmc/AsyncCatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/AsyncCatcher.java b/banner_server/src/main/java/org/spigotmc/AsyncCatcher.java
--- a/banner_server/src/main/java/org/spigotmc/AsyncCatcher.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/AsyncCatcher.java	(date 1725177022739)
@@ -1,6 +1,5 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 
 public class AsyncCatcher
@@ -10,7 +9,7 @@
 
     public static void catchOp(String reason)
     {
-        if ( AsyncCatcher.enabled && Thread.currentThread() != BukkitExtraConstants.getServer().serverThread )
+        if ( AsyncCatcher.enabled && Thread.currentThread() != MinecraftServer.getServer().serverThread )
         {
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
Index: banner_server/src/main/java/org/spigotmc/ActivationRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/ActivationRange.java b/banner_server/src/main/java/org/spigotmc/ActivationRange.java
--- a/banner_server/src/main/java/org/spigotmc/ActivationRange.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/ActivationRange.java	(date 1725177022739)
@@ -1,6 +1,5 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
@@ -78,10 +77,10 @@
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.bridge$activationType() == ActivationType.MISC && config.miscActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.RAIDER && config.raiderActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.ANIMAL && config.animalActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.MONSTER && config.monsterActivationRange == 0 )
+        if ( ( entity.activationType == ActivationType.MISC && config.miscActivationRange == 0 )
+                || ( entity.activationType == ActivationType.RAIDER && config.raiderActivationRange == 0 )
+                || ( entity.activationType == ActivationType.ANIMAL && config.animalActivationRange == 0 )
+                || ( entity.activationType == ActivationType.MONSTER && config.monsterActivationRange == 0 )
                 || entity instanceof Player
                 || entity instanceof ThrowableProjectile
                 || entity instanceof EnderDragon
@@ -109,20 +108,20 @@
     public static void activateEntities(Level world)
     {
         SpigotTimings.entityActivationCheckTimer.startTiming();
-        final int miscActivationRange = world.bridge$spigotConfig().miscActivationRange;
-        final int raiderActivationRange = world.bridge$spigotConfig().raiderActivationRange;
-        final int animalActivationRange = world.bridge$spigotConfig().animalActivationRange;
-        final int monsterActivationRange = world.bridge$spigotConfig().monsterActivationRange;
+        final int miscActivationRange = world.spigotConfig.miscActivationRange;
+        final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
+        final int animalActivationRange = world.spigotConfig.animalActivationRange;
+        final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
         int maxRange = Math.max( monsterActivationRange, animalActivationRange );
         maxRange = Math.max( maxRange, raiderActivationRange );
         maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.bridge$spigotConfig().simulationDistance << 4 ) - 8, maxRange );
+        maxRange = Math.min( ( world.spigotConfig.simulationDistance << 4 ) - 8, maxRange );
 
         for ( Player player : world.players() )
         {
-            player.banner$setActivatedTick(BukkitExtraConstants.currentTick);
-            if ( world.bridge$spigotConfig().ignoreSpectatorActivation && player.isSpectator() )
+            player.activatedTick = MinecraftServer.currentTick;
+            if ( world.spigotConfig.ignoreSpectatorActivation && player.isSpectator() )
             {
                 continue;
             }
@@ -145,16 +144,16 @@
      */
     private static void activateEntity(Entity entity)
     {
-        if ( BukkitExtraConstants.currentTick > entity.bridge$activatedTick() )
+        if ( MinecraftServer.currentTick > entity.activatedTick )
         {
-            if ( entity.bridge$defaultActivationState() )
+            if ( entity.defaultActivationState )
             {
-                entity.banner$setActivatedTick(BukkitExtraConstants.currentTick);
+                entity.activatedTick = MinecraftServer.currentTick;
                 return;
             }
-            if ( entity.bridge$activationType().boundingBox.intersects( entity.getBoundingBox() ) )
+            if ( entity.activationType.boundingBox.intersects( entity.getBoundingBox() ) )
             {
-                entity.banner$setActivatedTick(BukkitExtraConstants.currentTick);
+                entity.activatedTick = MinecraftServer.currentTick;
             }
         }
     }
@@ -237,23 +236,23 @@
             return true;
         }
 
-        boolean isActive = entity.bridge$activatedTick() >= BukkitExtraConstants.currentTick || entity.bridge$defaultActivationState();
+        boolean isActive = entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;
 
         // Should this entity tick?
         if ( !isActive )
         {
-            if ( ( BukkitExtraConstants.currentTick - entity.bridge$activatedTick() - 1 ) % 20 == 0 )
+            if ( ( MinecraftServer.currentTick - entity.activatedTick - 1 ) % 20 == 0 )
             {
                 // Check immunities every 20 ticks.
                 if ( ActivationRange.checkEntityImmunities( entity ) )
                 {
                     // Triggered some sort of immunity, give 20 full ticks before we check again.
-                    entity.banner$setActivatedTick(BukkitExtraConstants.currentTick + 20);
+                    entity.activatedTick = MinecraftServer.currentTick + 20;
                 }
                 isActive = true;
             }
             // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( !entity.bridge$defaultActivationState() && entity.tickCount % 4 == 0 && !ActivationRange.checkEntityImmunities( entity ) )
+        } else if ( !entity.defaultActivationState && entity.tickCount % 4 == 0 && !ActivationRange.checkEntityImmunities( entity ) )
         {
             isActive = false;
         }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java	(date 1725177022712)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.legacy;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.serialization.Dynamic;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -266,7 +265,7 @@
 
     static {
         System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
-        if (BukkitExtraConstants.getServer() != null && BukkitExtraConstants.getServer().isDebugging()) {
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
         }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java	(date 1725177022739)
@@ -9,6 +9,21 @@
 
 public final class Versioning {
     public static String getBukkitVersion() {
-        return "1.21-R0.1-SNAPSHOT";
+        String result = "Unknown-Version";
+
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.spigotmc/spigot-api/pom.properties");
+        Properties properties = new Properties();
+
+        if (stream != null) {
+            try {
+                properties.load(stream);
+
+                result = properties.getProperty("version");
+            } catch (IOException ex) {
+                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Bukkit version!", ex);
+            }
+        }
+
+        return result;
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java b/banner_server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java	(date 1725177022635)
@@ -39,12 +39,12 @@
 
     @Override
     public boolean test(CommandSourceStack wrapper) {
-        return this.command.testPermissionSilent(wrapper.banner$getBukkitSender());
+        return this.command.testPermissionSilent(wrapper.getBukkitSender());
     }
 
     @Override
     public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
-        CommandSender sender = context.getSource().banner$getBukkitSender();
+        CommandSender sender = context.getSource().getBukkitSender();
 
         try {
             return this.server.dispatchCommand(sender, context.getInput()) ? 1 : 0;
@@ -57,7 +57,7 @@
 
     @Override
     public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
-        List<String> results = this.server.tabComplete(context.getSource().banner$getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
+        List<String> results = this.server.tabComplete(context.getSource().getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
 
         // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
         builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/banner_server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java	(date 1725177022635)
@@ -14,6 +14,7 @@
 import org.fusesource.jansi.Ansi.Attribute;
 
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
+    private final Terminal terminal;
     private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
     private final boolean jansiPassthrough;
@@ -23,7 +24,7 @@
 
     protected ColouredConsoleSender() {
         super();
-        //this.terminal = ((CraftServer) this.getServer()).getReader().getTerminal();
+        this.terminal = ((CraftServer) this.getServer()).getReader().getTerminal();
         this.jansiPassthrough = Boolean.getBoolean("jansi.passthrough");
 
         this.replacements.put(ChatColor.BLACK, Ansi.ansi().a(Attribute.RESET).fg(Ansi.Color.BLACK).boldOff().toString());
@@ -53,7 +54,7 @@
     @Override
     public void sendMessage(String message) {
         // support jansi passthrough VM option when jansi doesn't detect an ANSI supported terminal
-        if (this.jansiPassthrough) {
+        if (this.jansiPassthrough || this.terminal.isAnsiSupported()) {
             if (!this.conversationTracker.isConversingModaly()) {
                 String result = ColouredConsoleSender.convertRGBColors(message);
                 for (ChatColor color : this.colors) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/banner_server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java	(date 1725177022635)
@@ -29,7 +29,7 @@
                 return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
             }
         };
-        this.server.getServer().bridge$processQueue().add(waitable);
+        this.server.getServer().processQueue.add(waitable);
         try {
             List<String> offers = waitable.get();
             if (offers == null) {
Index: banner_server/src/main/java/org/spigotmc/SpigotWorldConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/SpigotWorldConfig.java b/banner_server/src/main/java/org/spigotmc/SpigotWorldConfig.java
--- a/banner_server/src/main/java/org/spigotmc/SpigotWorldConfig.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/SpigotWorldConfig.java	(date 1725177022739)
@@ -20,7 +20,7 @@
 
     public void init()
     {
-        this.verbose = this.getBoolean( "verbose", false );
+        this.verbose = this.getBoolean( "verbose", true );
 
         this.log( "-------- World Settings For [" + this.worldName + "] --------" );
         SpigotConfig.readConfig( SpigotWorldConfig.class, this );
Index: banner_server/src/main/java/org/spigotmc/SpigotConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/SpigotConfig.java b/banner_server/src/main/java/org/spigotmc/SpigotConfig.java
--- a/banner_server/src/main/java/org/spigotmc/SpigotConfig.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/SpigotConfig.java	(date 1725177022739)
@@ -13,8 +13,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -50,6 +48,7 @@
     static int version;
     static Map<String, Command> commands;
     /*========================================================================*/
+    private static Metrics metrics;
 
     public static void init(File configFile)
     {
@@ -81,7 +80,19 @@
     {
         for ( Map.Entry<String, Command> entry : SpigotConfig.commands.entrySet() )
         {
-            BukkitExtraConstants.getServer().bridge$server().getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+        }
+
+        if ( SpigotConfig.metrics == null )
+        {
+            try
+            {
+                SpigotConfig.metrics = new Metrics();
+                SpigotConfig.metrics.start();
+            } catch ( IOException ex )
+            {
+                Bukkit.getServer().getLogger().log( Level.SEVERE, "Could not start metrics service", ex );
+            }
         }
     }
 
@@ -333,11 +344,14 @@
         SpigotConfig.movedTooQuicklyMultiplier = SpigotConfig.getDouble( "settings.moved-too-quickly-multiplier", 10.0D );
     }
 
+    public static double maxAbsorption = 2048;
     public static double maxHealth = 2048;
     public static double movementSpeed = 2048;
     public static double attackDamage = 2048;
     private static void attributeMaxes()
     {
+        SpigotConfig.maxAbsorption = SpigotConfig.getDouble( "settings.attribute.maxAbsorption.max", SpigotConfig.maxAbsorption );
+        ( (RangedAttribute) Attributes.MAX_ABSORPTION.value() ).maxValue = SpigotConfig.maxAbsorption;
         SpigotConfig.maxHealth = SpigotConfig.getDouble( "settings.attribute.maxHealth.max", SpigotConfig.maxHealth );
         ( (RangedAttribute) Attributes.MAX_HEALTH.value() ).maxValue = SpigotConfig.maxHealth;
         SpigotConfig.movementSpeed = SpigotConfig.getDouble( "settings.attribute.movementSpeed.max", SpigotConfig.movementSpeed );
Index: banner_server/src/main/java/org/spigotmc/SpigotCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/SpigotCommand.java b/banner_server/src/main/java/org/spigotmc/SpigotCommand.java
--- a/banner_server/src/main/java/org/spigotmc/SpigotCommand.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/SpigotCommand.java	(date 1725177022739)
@@ -1,8 +1,6 @@
 package org.spigotmc;
 
 import java.io.File;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.ChatColor;
@@ -31,12 +29,12 @@
             Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
             Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
 
-            MinecraftServer console = BukkitExtraConstants.getServer();
-            org.spigotmc.SpigotConfig.init((File) console.bridge$options().valueOf("spigot-settings"));
+            MinecraftServer console = MinecraftServer.getServer();
+            org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings"));
             for (ServerLevel world : console.getAllLevels()) {
-                world.bridge$spigotConfig().init();
+                world.spigotConfig.init();
             }
-            console.bridge$server().reloadCount++;
+            console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
         }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java b/banner_server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java	(date 1725177022739)
@@ -47,15 +47,13 @@
         super.addFreshEntityWithPassengers(entity);
     }
 
-    // Banner TODO fixme
-    /*
     @Override
     public void addFreshEntityWithPassengers(Entity arg0, SpawnReason arg1) {
         if (this.structureTransformer != null && !this.structureTransformer.transformEntity(arg0)) {
             return;
         }
         super.addFreshEntityWithPassengers(arg0, arg1);
-    }*/
+    }
 
     public boolean setCraftBlock(BlockPos position, CraftBlockState craftBlockState, int i, int j) {
         if (this.structureTransformer != null) {
Index: banner_server/src/main/java/org/spigotmc/RestartCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/RestartCommand.java b/banner_server/src/main/java/org/spigotmc/RestartCommand.java
--- a/banner_server/src/main/java/org/spigotmc/RestartCommand.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/RestartCommand.java	(date 1725177022739)
@@ -2,8 +2,6 @@
 
 import java.io.File;
 import java.util.List;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.command.Command;
@@ -26,7 +24,7 @@
     {
         if ( this.testPermission( sender ) )
         {
-            BukkitExtraConstants.getServer().bridge$processQueue().add(new Runnable()
+            MinecraftServer.getServer().processQueue.add( new Runnable()
             {
                 @Override
                 public void run()
@@ -57,9 +55,9 @@
                 WatchdogThread.doStop();
 
                 // Kick all players
-                for ( ServerPlayer p : (List<ServerPlayer>) BukkitExtraConstants.getServer().getPlayerList().players )
+                for ( ServerPlayer p : (List<ServerPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.connection.disconnect( CraftChatMessage.fromStringOrEmpty( SpigotConfig.restartMessage ) );
+                    p.connection.disconnect( CraftChatMessage.fromStringOrEmpty( SpigotConfig.restartMessage, true ) );
                 }
                 // Give the socket a chance to send the packets
                 try
@@ -69,7 +67,7 @@
                 {
                 }
                 // Close the socket so we can rebind with the new process
-                BukkitExtraConstants.getServer().getConnection().stop();
+                MinecraftServer.getServer().getConnection().stop();
 
                 // Give time for it to kick in
                 try
@@ -82,7 +80,7 @@
                 // Actually shutdown
                 try
                 {
-                    BukkitExtraConstants.getServer().close();
+                    MinecraftServer.getServer().close();
                 } catch ( Throwable t )
                 {
                 }
@@ -119,7 +117,7 @@
                 // Actually shutdown
                 try
                 {
-                    BukkitExtraConstants.getServer().close();
+                    MinecraftServer.getServer().close();
                 } catch ( Throwable t )
                 {
                 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java	(date 1725177022558)
@@ -2,8 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.world.LockCode;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
@@ -35,7 +33,7 @@
         if (tileEntity instanceof BeaconBlockEntity) {
             BeaconBlockEntity beacon = (BeaconBlockEntity) tileEntity;
 
-            Collection<Player> nms = BukkitExtraConstants.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
+            Collection<Player> nms = BeaconBlockEntity.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
             Collection<LivingEntity> bukkit = new ArrayList<LivingEntity>(nms.size());
 
             for (Player human : nms) {
Index: banner_server/src/main/java/org/spigotmc/TrackingRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/TrackingRange.java b/banner_server/src/main/java/org/spigotmc/TrackingRange.java
--- a/banner_server/src/main/java/org/spigotmc/TrackingRange.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/TrackingRange.java	(date 1725177022739)
@@ -26,11 +26,11 @@
         {
             return defaultRange;
         }
-        SpigotWorldConfig config = entity.level().bridge$spigotConfig();
+        SpigotWorldConfig config = entity.level().spigotConfig;
         if ( entity instanceof ServerPlayer )
         {
             return config.playerTrackingRange;
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.MONSTER || entity.bridge$activationType() == ActivationRange.ActivationType.RAIDER )
+        } else if ( entity.activationType == ActivationRange.ActivationType.MONSTER || entity.activationType == ActivationRange.ActivationType.RAIDER )
         {
             return config.monsterTrackingRange;
         } else if ( entity instanceof Ghast )
@@ -42,7 +42,7 @@
             {
                 return config.monsterActivationRange;
             }
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.ANIMAL )
+        } else if ( entity.activationType == ActivationRange.ActivationType.ANIMAL )
         {
             return config.animalTrackingRange;
         } else if ( entity instanceof ItemFrame || entity instanceof Painting || entity instanceof ItemEntity || entity instanceof ExperienceOrb )
Index: banner_server/src/main/java/org/spigotmc/TicksPerSecondCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/banner_server/src/main/java/org/spigotmc/TicksPerSecondCommand.java
--- a/banner_server/src/main/java/org/spigotmc/TicksPerSecondCommand.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/TicksPerSecondCommand.java	(date 1725177022739)
@@ -1,6 +1,5 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
@@ -26,7 +25,7 @@
         }
 
         StringBuilder sb = new StringBuilder( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " );
-        for ( double tps : BukkitExtraConstants.getServer().getTPS() )
+        for ( double tps : MinecraftServer.getServer().recentTps )
         {
             sb.append( this.format( tps ) );
             sb.append( ", " );
Index: banner_server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java b/banner_server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java	(date 1725177022725)
@@ -19,7 +19,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.server.dedicated.DedicatedServer;
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.craftbukkit.CraftServer;
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java	(date 1725177022558)
@@ -53,14 +53,14 @@
 
     @Override
     public int getMaxEntities() {
-        return this.getSnapshot().bridge$maxBees();
+        return this.getSnapshot().maxBees;
     }
 
     @Override
     public void setMaxEntities(int max) {
         Preconditions.checkArgument(max > 0, "Max bees must be more than 0");
 
-        this.getSnapshot().banner$setMaxBees(max);
+        this.getSnapshot().maxBees = max;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/banner_server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java	(date 1725177022635)
@@ -19,7 +19,7 @@
 
     @Override
     public SocketAddress getAddress() {
-       return this.listener.bridge$socketAddress();
+       return this.listener.socketAddress;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java	(date 1725177022558)
@@ -24,6 +24,8 @@
 
     protected CraftBanner(CraftBanner state, Location location) {
         super(state, location);
+        this.base = state.getBaseColor();
+        this.patterns = state.getPatterns();
     }
 
     @Override
Index: banner_server/src/main/java/org/spigotmc/WatchdogThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/spigotmc/WatchdogThread.java b/banner_server/src/main/java/org/spigotmc/WatchdogThread.java
--- a/banner_server/src/main/java/org/spigotmc/WatchdogThread.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/spigotmc/WatchdogThread.java	(date 1725177022739)
@@ -5,8 +5,6 @@
 import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 
@@ -76,19 +74,16 @@
                 log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
                 log.log( Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion() );
                 //
-                // Banner start - disable
-                /*
                 if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
                 {
                     log.log( Level.SEVERE, "------------------------------" );
                     log.log( Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed" );
                     log.log( Level.SEVERE, "near " + net.minecraft.world.level.Level.lastPhysicsProblem );
-                }*/
-                // Banner end
+                }
                 //
                 log.log( Level.SEVERE, "------------------------------" );
                 log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):" );
-                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( BukkitExtraConstants.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
                 log.log( Level.SEVERE, "------------------------------" );
                 //
                 log.log( Level.SEVERE, "Entire Thread Dump:" );
@@ -99,7 +94,7 @@
                 }
                 log.log( Level.SEVERE, "------------------------------" );
 
-                if ( this.restart && !BukkitExtraConstants.getServer().hasStopped() )
+                if ( this.restart && !MinecraftServer.getServer().hasStopped() )
                 {
                     RestartCommand.restart();
                 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java	(date 1725177022558)
@@ -37,7 +37,7 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened()) {
+        if (!this.getTileEntity().openersCounter.opened) {
             BlockState blockData = this.getTileEntity().getBlockState();
             boolean open = blockData.getValue(BarrelBlock.OPEN);
 
@@ -48,20 +48,20 @@
                 }
             }
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened()) {
+        if (this.getTileEntity().openersCounter.opened) {
             BlockState blockData = this.getTileEntity().getBlockState();
             this.getTileEntity().updateBlockState(blockData, false);
             if (this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
                 this.getTileEntity().playSound(blockData, SoundEvents.BARREL_CLOSE);
             }
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java	(date 1725177022558)
@@ -8,8 +8,6 @@
 import java.util.Map;
 import java.util.function.BiFunction;
 import javax.annotation.Nullable;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
@@ -348,7 +346,7 @@
         CraftBlockStates.FACTORIES.put(blockType, factory);
     }
 
-    public static <T extends BlockEntity, B extends CraftBlockEntityState<T>> void register(
+    private static <T extends BlockEntity, B extends CraftBlockEntityState<T>> void register(
             Material blockType,
             Class<B> blockStateType,
             BiFunction<World, T, B> blockStateConstructor,
@@ -402,7 +400,7 @@
 
     @Deprecated
     public static BlockState getBlockState(BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
-        return CraftBlockStates.getBlockState(BukkitExtraConstants.getDefaultRegistryAccess(), blockPosition, material, blockEntityTag);
+        return CraftBlockStates.getBlockState(MinecraftServer.getDefaultRegistryAccess(), blockPosition, material, blockEntityTag);
     }
 
     public static BlockState getBlockState(LevelReader world, BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
@@ -417,7 +415,7 @@
 
     @Deprecated
     public static BlockState getBlockState(net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
-        return CraftBlockStates.getBlockState(BukkitExtraConstants.getDefaultRegistryAccess(), BlockPos.ZERO, blockData, blockEntityTag);
+        return CraftBlockStates.getBlockState(MinecraftServer.getDefaultRegistryAccess(), BlockPos.ZERO, blockData, blockEntityTag);
     }
 
     public static BlockState getBlockState(LevelReader world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockType.java	(date 1725177022558)
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.block;
 
 import com.google.common.base.Preconditions;
+import java.lang.reflect.Method;
+import java.util.Arrays;
 import java.util.function.Consumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.Registries;
@@ -11,7 +13,7 @@
 import net.minecraft.world.level.EmptyBlockGetter;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.FallingBlock;
+import net.minecraft.world.level.block.Fallable;
 import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
@@ -54,28 +56,35 @@
         return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
-    private static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... params) {
-        boolean hasMethod;
-        try {
-            hasMethod = clazz.getDeclaredMethod(methodName, params) != null;
-        } catch (NoSuchMethodException ex) {
-            hasMethod = false;
+    private static boolean hasMethod(Class<?> clazz, Class<?>... params) {
+        boolean hasMethod = false;
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Arrays.equals(method.getParameterTypes(), params)) {
+                Preconditions.checkArgument(!hasMethod, "More than one matching method for %s, args %s", clazz, Arrays.toString(params));
+
+                hasMethod = true;
+            }
         }
 
         return hasMethod;
     }
 
+    private static final Class<?>[] USE_WITHOUT_ITEM_ARGS = new Class[]{
+        BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, BlockHitResult.class
+    };
+    private static final Class<?>[] USE_ITEM_ON_ARGS = new Class[]{
+        net.minecraft.world.item.ItemStack.class, BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class
+    };
+
     private static boolean isInteractable(Block block) {
         Class<?> clazz = block.getClass();
 
-        boolean hasMethod = CraftBlockType.hasMethod(clazz, "useWithoutItem", BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, BlockHitResult.class)
-                || CraftBlockType.hasMethod(clazz, "useItemOn", net.minecraft.world.item.ItemStack.class, BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class);
+        boolean hasMethod = CraftBlockType.hasMethod(clazz, CraftBlockType.USE_WITHOUT_ITEM_ARGS) || CraftBlockType.hasMethod(clazz, CraftBlockType.USE_ITEM_ON_ARGS);
 
         if (!hasMethod && clazz.getSuperclass() != BlockBehaviour.class) {
             clazz = clazz.getSuperclass();
 
-            hasMethod = CraftBlockType.hasMethod(clazz, "useWithoutItem", BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, BlockHitResult.class)
-                    || CraftBlockType.hasMethod(clazz, "useItemOn", net.minecraft.world.item.ItemStack.class, BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class);
+            hasMethod = CraftBlockType.hasMethod(clazz, CraftBlockType.USE_WITHOUT_ITEM_ARGS) || CraftBlockType.hasMethod(clazz, CraftBlockType.USE_ITEM_ON_ARGS);
         }
 
         return hasMethod;
@@ -187,7 +196,7 @@
 
     @Override
     public boolean hasGravity() {
-        return this.block instanceof FallingBlock;
+        return this.block instanceof Fallable;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java	(date 1725177022558)
@@ -6,8 +6,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -471,15 +469,15 @@
         UseOnContext context = new UseOnContext(world, null, InteractionHand.MAIN_HAND, Items.BONE_MEAL.getDefaultInstance(), new BlockHitResult(Vec3.ZERO, direction, this.getPosition(), false));
 
         // SPIGOT-6895: Call StructureGrowEvent and BlockFertilizeEvent
-        world.banner$setCaptureTreeGeneration(true);
-        InteractionResult result = BukkitExtraConstants.applyBonemeal(context);
-        world.banner$setCaptureTreeGeneration(false);
+        world.captureTreeGeneration = true;
+        InteractionResult result = BoneMealItem.applyBonemeal(context);
+        world.captureTreeGeneration = false;
 
-        if (world.bridge$capturedBlockStates().size() > 0) {
-            TreeType treeType = BukkitExtraConstants.treeType;
-            BukkitExtraConstants.treeType = null;
-            List<BlockState> blocks = new ArrayList<>(world.bridge$capturedBlockStates().values());
-            world.bridge$capturedBlockStates().clear();
+        if (world.capturedBlockStates.size() > 0) {
+            TreeType treeType = SaplingBlock.treeType;
+            SaplingBlock.treeType = null;
+            List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
             StructureGrowEvent structureEvent = null;
 
             if (treeType != null) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java	(date 1725177022558)
@@ -1,8 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import java.util.Set;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.component.DataComponentMap;
 import net.minecraft.core.component.DataComponentPatch;
@@ -50,7 +48,7 @@
 
     private RegistryAccess getRegistryAccess() {
         LevelAccessor worldHandle = this.getWorldHandle();
-        return (worldHandle != null) ? worldHandle.registryAccess() : BukkitExtraConstants.getDefaultRegistryAccess();
+        return (worldHandle != null) ? worldHandle.registryAccess() : MinecraftServer.getDefaultRegistryAccess();
     }
 
     private T createSnapshot(T tileEntity) {
@@ -87,7 +85,7 @@
     }
 
     // gets the wrapped TileEntity
-    public T getTileEntity() {
+    protected T getTileEntity() {
         return this.tileEntity;
     }
 
@@ -153,7 +151,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getSnapshot().bridge$persistentDataContainer();
+        return this.getSnapshot().persistentDataContainer;
     }
 
     @Nullable
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java	(date 1725177022558)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.block;
 
-import com.mohistmc.banner.bukkit.DoubleChestInventory;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.ChestBlock;
@@ -52,8 +51,8 @@
         ChestBlock blockChest = (ChestBlock) (this.getType() == Material.CHEST ? Blocks.CHEST : Blocks.TRAPPED_CHEST);
         MenuProvider nms = blockChest.getMenuProvider(this.data, world.getHandle(), this.getPosition(), true);
 
-        if (nms instanceof DoubleChestInventory) {
-            inventory = new CraftInventoryDoubleChest((DoubleChestInventory) nms);
+        if (nms instanceof ChestBlock.DoubleInventory) {
+            inventory = new CraftInventoryDoubleChest((ChestBlock.DoubleInventory) nms);
         }
         return inventory;
     }
@@ -61,27 +60,27 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIOpen((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, openCount + 1);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIClose((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, 0);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java b/banner_server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java	(date 1725177022678)
@@ -85,7 +85,7 @@
                 for (CompoundTag compound : chunk.getEntities()) {
                     EntityType.loadEntityRecursive(compound, access.getMinecraftWorld(), (entity) -> {
                         if (this.region.contains(entity.getX(), entity.getY(), entity.getZ())) {
-                            entity.banner$setGeneration(true);
+                            entity.generation = true;
                             this.entities.add(entity);
                         } else {
                             this.outsideEntities.add(entity);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java	(date 1725177022685)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -28,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java	(date 1725177022685)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -28,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java	(date 1725177022685)
@@ -1,37 +1,25 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.CustomRecipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ComplexRecipe;
+import org.bukkit.inventory.CraftingRecipe;
 import org.bukkit.inventory.ItemStack;
 
-public class CraftComplexRecipe implements CraftRecipe, ComplexRecipe {
+public class CraftComplexRecipe extends CraftingRecipe implements CraftRecipe, ComplexRecipe {
 
-    private final NamespacedKey key;
     private final CustomRecipe recipe;
 
-    public CraftComplexRecipe(NamespacedKey key, CustomRecipe recipe) {
-        this.key = key;
+    public CraftComplexRecipe(NamespacedKey key, ItemStack result, CustomRecipe recipe) {
+        super(key, result);
         this.recipe = recipe;
     }
 
-    @Override
-    public ItemStack getResult() {
-        return CraftItemStack.asCraftMirror(this.recipe.getResultItem(RegistryAccess.EMPTY));
-    }
-
-    @Override
-    public NamespacedKey getKey() {
-        return this.key;
-    }
-
     @Override
     public void addToCraftingManager() {
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.key), this.recipe));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), this.recipe));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java	(date 1725177022573)
@@ -2,8 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.entity.ConduitBlockEntity;
 import net.minecraft.world.phys.AABB;
@@ -75,7 +73,7 @@
     public int getRange() {
         this.ensureNoWorldGeneration();
         ConduitBlockEntity conduit = (ConduitBlockEntity) this.getTileEntityFromWorld();
-        return (conduit != null) ? BukkitExtraConstants.getRange(conduit.effectBlocks) : 0;
+        return (conduit != null) ? ConduitBlockEntity.getRange(conduit.effectBlocks) : 0;
     }
 
     @Override
@@ -103,8 +101,7 @@
             conduit.destroyTargetUUID = target.getUniqueId();
         }
 
-        // Banner TODO fixme
-        ConduitBlockEntity.updateDestroyTarget(conduit.getLevel(), this.getPosition(), this.data, conduit.effectBlocks, conduit/*, *false*/);
+        ConduitBlockEntity.updateDestroyTarget(conduit.getLevel(), this.getPosition(), this.data, conduit.effectBlocks, conduit, false);
         return true;
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java	(date 1725177022573)
@@ -14,6 +14,7 @@
 import net.minecraft.util.random.SimpleWeightedRandomList;
 import net.minecraft.util.random.WeightedEntry.Wrapper;
 import net.minecraft.world.entity.EquipmentTable;
+import net.minecraft.world.level.BaseSpawner;
 import net.minecraft.world.level.SpawnData;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import org.bukkit.Location;
@@ -74,60 +75,94 @@
 
     @Override
     public void setSpawnedEntity(EntitySnapshot snapshot) {
+        CraftCreatureSpawner.setSpawnedEntity(this.getSnapshot().getSpawner(), snapshot, null, null);
+    }
+
+    @Override
+    public void setSpawnedEntity(SpawnerEntry spawnerEntry) {
+        Preconditions.checkArgument(spawnerEntry != null, "Entry cannot be null");
+
+        CraftCreatureSpawner.setSpawnedEntity(this.getSnapshot().getSpawner(), spawnerEntry.getSnapshot(), spawnerEntry.getSpawnRule(), spawnerEntry.getEquipment());
+    }
+
+    public static void setSpawnedEntity(BaseSpawner spawner, EntitySnapshot snapshot, SpawnRule spawnRule, SpawnerEntry.Equipment equipment) {
+        spawner.spawnPotentials = SimpleWeightedRandomList.empty(); // need clear the spawnPotentials to avoid nextSpawnData being replaced later
+
+        if (snapshot == null) {
+            spawner.nextSpawnData = new SpawnData();
+            return;
+        }
         CompoundTag compoundTag = ((CraftEntitySnapshot) snapshot).getData();
 
-        this.getSnapshot().getSpawner().spawnPotentials = SimpleWeightedRandomList.empty();
-        this.getSnapshot().getSpawner().nextSpawnData = new SpawnData(compoundTag, Optional.empty(), Optional.empty());
+        spawner.nextSpawnData = new SpawnData(compoundTag, Optional.ofNullable(CraftCreatureSpawner.toMinecraftRule(spawnRule)), CraftCreatureSpawner.getEquipment(equipment));
     }
 
     @Override
     public void addPotentialSpawn(EntitySnapshot snapshot, int weight, SpawnRule spawnRule) {
+        CraftCreatureSpawner.addPotentialSpawn(this.getSnapshot().getSpawner(), snapshot, weight, spawnRule, null);
+    }
+
+    public static void addPotentialSpawn(BaseSpawner spawner, EntitySnapshot snapshot, int weight, SpawnRule spawnRule, SpawnerEntry.Equipment equipment) {
+        Preconditions.checkArgument(snapshot != null, "Snapshot cannot be null");
+
         CompoundTag compoundTag = ((CraftEntitySnapshot) snapshot).getData();
 
         SimpleWeightedRandomList.Builder<SpawnData> builder = SimpleWeightedRandomList.builder(); // PAIL rename Builder
-        this.getSnapshot().getSpawner().spawnPotentials.unwrap().forEach(entry -> builder.add(entry.data(), entry.getWeight().asInt()));
-        builder.add(new SpawnData(compoundTag, Optional.ofNullable(this.toMinecraftRule(spawnRule)), Optional.empty()), weight);
-        this.getSnapshot().getSpawner().spawnPotentials = builder.build();
+        spawner.spawnPotentials.unwrap().forEach(entry -> builder.add(entry.data(), entry.getWeight().asInt()));
+        builder.add(new SpawnData(compoundTag, Optional.ofNullable(CraftCreatureSpawner.toMinecraftRule(spawnRule)), CraftCreatureSpawner.getEquipment(equipment)), weight);
+        spawner.spawnPotentials = builder.build();
     }
 
     @Override
     public void addPotentialSpawn(SpawnerEntry spawnerEntry) {
+        Preconditions.checkArgument(spawnerEntry != null, "Entry cannot be null");
+
         this.addPotentialSpawn(spawnerEntry.getSnapshot(), spawnerEntry.getSpawnWeight(), spawnerEntry.getSpawnRule());
     }
 
     @Override
     public void setPotentialSpawns(Collection<SpawnerEntry> entries) {
+        CraftCreatureSpawner.setPotentialSpawns(this.getSnapshot().getSpawner(), entries);
+    }
+
+    public static void setPotentialSpawns(BaseSpawner spawner, Collection<SpawnerEntry> entries) {
+        Preconditions.checkArgument(entries != null, "Entries cannot be null");
+
         SimpleWeightedRandomList.Builder<SpawnData> builder = SimpleWeightedRandomList.builder();
         for (SpawnerEntry spawnerEntry : entries) {
             CompoundTag compoundTag = ((CraftEntitySnapshot) spawnerEntry.getSnapshot()).getData();
-            builder.add(new SpawnData(compoundTag, Optional.ofNullable(this.toMinecraftRule(spawnerEntry.getSpawnRule())), CraftCreatureSpawner.getEquipment(spawnerEntry.getEquipment())), spawnerEntry.getSpawnWeight());
+            builder.add(new SpawnData(compoundTag, Optional.ofNullable(CraftCreatureSpawner.toMinecraftRule(spawnerEntry.getSpawnRule())), CraftCreatureSpawner.getEquipment(spawnerEntry.getEquipment())), spawnerEntry.getSpawnWeight());
         }
-        this.getSnapshot().getSpawner().spawnPotentials = builder.build();
+        spawner.spawnPotentials = builder.build();
     }
 
     @Override
     public List<SpawnerEntry> getPotentialSpawns() {
+        return CraftCreatureSpawner.getPotentialSpawns(this.getSnapshot().getSpawner());
+    }
+
+    public static List<SpawnerEntry> getPotentialSpawns(BaseSpawner spawner) {
         List<SpawnerEntry> entries = new ArrayList<>();
 
-        for (Wrapper<SpawnData> entry : this.getSnapshot().getSpawner().spawnPotentials.unwrap()) { // PAIL rename Wrapper
+        for (Wrapper<SpawnData> entry : spawner.spawnPotentials.unwrap()) { // PAIL rename Wrapper
             CraftEntitySnapshot snapshot = CraftEntitySnapshot.create(entry.data().getEntityToSpawn());
 
             if (snapshot != null) {
-                SpawnRule rule = entry.data().customSpawnRules().map(this::fromMinecraftRule).orElse(null);
+                SpawnRule rule = entry.data().customSpawnRules().map(CraftCreatureSpawner::fromMinecraftRule).orElse(null);
                 entries.add(new SpawnerEntry(snapshot, entry.getWeight().asInt(), rule, CraftCreatureSpawner.getEquipment(entry.data().equipment())));
             }
         }
         return entries;
     }
 
-    private SpawnData.CustomSpawnRules toMinecraftRule(SpawnRule rule) { // PAIL rename CustomSpawnRules
+    public static SpawnData.CustomSpawnRules toMinecraftRule(SpawnRule rule) { // PAIL rename CustomSpawnRules
         if (rule == null) {
             return null;
         }
         return new SpawnData.CustomSpawnRules(new InclusiveRange<>(rule.getMinBlockLight(), rule.getMaxBlockLight()), new InclusiveRange<>(rule.getMinSkyLight(), rule.getMaxSkyLight()));
     }
 
-    private SpawnRule fromMinecraftRule(SpawnData.CustomSpawnRules rule) {
+    public static SpawnRule fromMinecraftRule(SpawnData.CustomSpawnRules rule) {
         InclusiveRange<Integer> blockLight = rule.blockLightLimit();
         InclusiveRange<Integer> skyLight = rule.skyLightLimit();
 
@@ -239,7 +274,7 @@
         return new CraftCreatureSpawner(this, location);
     }
 
-    private static Optional<EquipmentTable> getEquipment(SpawnerEntry.Equipment bukkit) {
+    public static Optional<EquipmentTable> getEquipment(SpawnerEntry.Equipment bukkit) {
         if (bukkit == null) {
             return Optional.empty();
         }
@@ -250,7 +285,7 @@
         );
     }
 
-    private static SpawnerEntry.Equipment getEquipment(Optional<EquipmentTable> optional) {
+    public static SpawnerEntry.Equipment getEquipment(Optional<EquipmentTable> optional) {
         return optional.map((nms) -> new SpawnerEntry.Equipment(
                 CraftLootTable.minecraftToBukkit(nms.lootTable()),
                 new HashMap<>(nms.slotDropChances().entrySet().stream().collect(Collectors.toMap((entry) -> CraftEquipmentSlot.getSlot(entry.getKey()), Map.Entry::getValue)))
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java	(date 1725177022685)
@@ -1,20 +1,32 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.function.Consumer;
 import net.minecraft.world.Container;
-import net.minecraft.world.inventory.AnvilMenu;
 import org.bukkit.Location;
+import org.bukkit.craftbukkit.inventory.view.CraftAnvilView;
+import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.AnvilInventory;
 
 public class CraftInventoryAnvil extends CraftResultInventory implements AnvilInventory {
 
+    private static final int DEFAULT_REPAIR_COST = 0;
+    private static final int DEFAULT_REPAIR_COST_AMOUNT = 0;
+    private static final int DEFAULT_MAXIMUM_REPAIR_COST = 40;
+
     private final Location location;
-    private final AnvilMenu container;
+    private String renameText;
+    private int repairCost;
+    private int repairCostAmount;
+    private int maximumRepairCost;
 
-    public CraftInventoryAnvil(Location location, Container inventory, Container resultInventory, AnvilMenu container) {
+    public CraftInventoryAnvil(Location location, Container inventory, Container resultInventory) {
         super(inventory, resultInventory);
         this.location = location;
-        this.container = container;
+        this.renameText = null;
+        this.repairCost = CraftInventoryAnvil.DEFAULT_REPAIR_COST;
+        this.repairCostAmount = CraftInventoryAnvil.DEFAULT_REPAIR_COST_AMOUNT;
+        this.maximumRepairCost = CraftInventoryAnvil.DEFAULT_MAXIMUM_REPAIR_COST;
     }
 
     @Override
@@ -24,37 +36,81 @@
 
     @Override
     public String getRenameText() {
-        return this.container.itemName;
+        this.syncWithArbitraryViewValue((cav) -> this.renameText = cav.getRenameText());
+        return this.renameText;
     }
 
     @Override
     public int getRepairCostAmount() {
-        return this.container.repairItemCountCost;
+        this.syncWithArbitraryViewValue((cav) -> this.repairCostAmount = cav.getRepairItemCountCost());
+        return this.repairCostAmount;
     }
 
     @Override
     public void setRepairCostAmount(int amount) {
-        this.container.repairItemCountCost = amount;
+        this.repairCostAmount = amount;
+        this.syncViews((cav) -> cav.setRepairItemCountCost(amount));
     }
 
     @Override
     public int getRepairCost() {
-        return this.container.cost.get();
+        this.syncWithArbitraryViewValue((cav) -> this.repairCost = cav.getRepairCost());
+        return this.repairCost;
     }
 
     @Override
     public void setRepairCost(int i) {
-        this.container.cost.set(i);
+        this.repairCost = i;
+        this.syncViews((cav) -> cav.setRepairCost(i));
     }
 
     @Override
     public int getMaximumRepairCost() {
-        return this.container.bridge$maximumRepairCost();
+        this.syncWithArbitraryViewValue((cav) -> this.maximumRepairCost = cav.getMaximumRepairCost());
+        return this.maximumRepairCost;
     }
 
     @Override
     public void setMaximumRepairCost(int levels) {
         Preconditions.checkArgument(levels >= 0, "Maximum repair cost must be positive (or 0)");
-        this.container.banner$setMaximumRepairCost(levels);
+        this.maximumRepairCost = levels;
+        this.syncViews((cav) -> cav.setMaximumRepairCost(levels));
+    }
+
+    public boolean isRepairCostSet() {
+        return this.repairCost != CraftInventoryAnvil.DEFAULT_REPAIR_COST;
+    }
+
+    public boolean isRepairCostAmountSet() {
+        return this.repairCostAmount != CraftInventoryAnvil.DEFAULT_REPAIR_COST_AMOUNT;
+    }
+
+    public boolean isMaximumRepairCostSet() {
+        return this.maximumRepairCost != CraftInventoryAnvil.DEFAULT_MAXIMUM_REPAIR_COST;
+    }
+
+    // used to lazily update and apply values from the view to the inventory
+    private void syncViews(Consumer<CraftAnvilView> consumer) {
+        for (HumanEntity viewer : this.getViewers()) {
+            if (viewer.getOpenInventory() instanceof CraftAnvilView cav) {
+                consumer.accept(cav);
+            }
+        }
+    }
+
+    /*
+     * This method provides the best effort guess on whatever the value could be
+     * It is possible these values are wrong given there are more than 1 views of this inventory,
+     * however it is a limitation seeing as these anvil values are supposed to be in the Container
+     * not the inventory.
+     */
+    private void syncWithArbitraryViewValue(Consumer<CraftAnvilView> consumer) {
+        if (this.getViewers().isEmpty()) {
+            return;
+        }
+        final HumanEntity entity = this.getViewers().get(0);
+        if (entity != null && entity.getOpenInventory() instanceof CraftAnvilView cav) {
+            consumer.accept(cav);
+        }
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java	(date 1725177022685)
@@ -24,7 +24,6 @@
 import net.minecraft.world.inventory.SimpleContainerData;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.inventory.SmokerMenu;
-import net.minecraft.world.inventory.StonecutterMenu;
 import net.minecraft.world.item.ItemStack;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
@@ -213,7 +212,7 @@
                 this.delegate = new BlastFurnaceMenu(windowId, bottom, top, new SimpleContainerData(4));
                 break;
             case LECTERN:
-                this.delegate = new LecternMenu(windowId);
+                this.delegate = new LecternMenu(windowId, top, new SimpleContainerData(1), bottom);
                 break;
             case SMOKER:
                 this.delegate = new SmokerMenu(windowId, bottom, top, new SimpleContainerData(4));
@@ -228,7 +227,7 @@
                 this.delegate = new GrindstoneMenu(windowId, bottom);
                 break;
             case STONECUTTER:
-                this.delegate = new StonecutterMenu(windowId, bottom);
+                this.setupStoneCutter(top, bottom); // SPIGOT-7757 - manual setup required for individual slots
                 break;
             case MERCHANT:
                 this.delegate = new MerchantMenu(windowId, bottom);
@@ -312,6 +311,26 @@
         this.addSlot(new Slot(top, 2, 44, 48));
         this.addSlot(new Slot(top, 3, 98, 48));
 
+        int row;
+        int col;
+
+        for (row = 0; row < 3; ++row) {
+            for (col = 0; col < 9; ++col) {
+                this.addSlot(new Slot(bottom, col + row * 9 + 9, 8 + col * 18, 84 + row * 18));
+            }
+        }
+
+        for (row = 0; row < 9; ++row) {
+            this.addSlot(new Slot(bottom, row, 8 + row * 18, 142));
+        }
+        // End copy from ContainerSmithing
+    }
+
+    private void setupStoneCutter(Container top, Container bottom) {
+        // This code copied from ContainerStonecutter
+        this.addSlot(new Slot(top, 0, 20, 33));
+        this.addSlot(new Slot(top, 1, 143, 33));
+
         int row;
         int col;
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java	(date 1725177022573)
@@ -19,27 +19,27 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIOpen((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, openCount + 1);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIClose((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, 0);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java	(date 1725177022685)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -28,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java	(date 1725177022685)
@@ -4,8 +4,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
-
-import com.mohistmc.banner.bukkit.BannerLecternInventory;
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantContainer;
@@ -495,7 +493,7 @@
             return InventoryType.SHULKER_BOX;
         } else if (this.inventory instanceof BarrelBlockEntity) {
             return InventoryType.BARREL;
-        } else if (this.inventory instanceof BannerLecternInventory) {
+        } else if (this.inventory instanceof LecternBlockEntity.LecternInventory) {
             return InventoryType.LECTERN;
         } else if (this.inventory instanceof ChiseledBookShelfBlockEntity) {
             return InventoryType.CHISELED_BOOKSHELF;
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java	(date 1725177022691)
@@ -15,7 +15,7 @@
     private final CraftInventory left;
     private final CraftInventory right;
 
-    public CraftInventoryDoubleChest(com.mohistmc.banner.bukkit.DoubleChestInventory block) {
+    public CraftInventoryDoubleChest(ChestBlock.DoubleInventory block) {
         super(block.inventorylargechest);
         this.tile = block;
         this.left = new CraftInventory(block.inventorylargechest.container1);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java	(date 1725177022573)
@@ -83,8 +83,7 @@
         ItemStack nms = CraftItemStack.asNMSCopy(record);
 
         JukeboxBlockEntity snapshot = this.getSnapshot();
-        // Banner TODO fixme
-        snapshot.setSongItemWithoutPlaying(nms/*, snapshot.getSongPlayer().getTicksSinceSongStarted()*/);
+        snapshot.setSongItemWithoutPlaying(nms, snapshot.getSongPlayer().getTicksSinceSongStarted());
 
         this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, !nms.isEmpty());
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java	(date 1725177022685)
@@ -4,6 +4,7 @@
 import java.util.Arrays;
 import java.util.List;
 import net.minecraft.world.Container;
+import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
@@ -12,7 +13,7 @@
 public class CraftInventoryCrafting extends CraftInventory implements CraftingInventory {
     private final Container resultInventory;
 
-    public CraftInventoryCrafting(Container inventory, Container resultInventory) {
+    public CraftInventoryCrafting(CraftingContainer inventory, Container resultInventory) {
         super(inventory);
         this.resultInventory = resultInventory;
     }
@@ -21,8 +22,8 @@
         return this.resultInventory;
     }
 
-    public Container getMatrixInventory() {
-        return this.inventory;
+    public CraftingContainer getMatrixInventory() {
+        return (CraftingContainer) this.inventory;
     }
 
     @Override
@@ -115,7 +116,7 @@
 
     @Override
     public Recipe getRecipe() {
-        RecipeHolder<?> recipe = this.getInventory().getCurrentRecipe();
+        RecipeHolder<?> recipe = this.getMatrixInventory().getCurrentRecipe();
         return recipe == null ? null : recipe.toBukkitRecipe();
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java	(date 1725177022693)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BannerLecternInventory;
 import net.minecraft.world.Container;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.level.block.entity.LecternBlockEntity;
@@ -13,11 +12,9 @@
 
     public CraftInventoryLectern(Container inventory) {
         super(inventory);
-        // Banner TODO fixme
-        /*
-        if (inventory instanceof BannerLecternInventory) {
-            this.tile = ((BannerLecternInventory) inventory).getLectern();
-        }*/
+        if (inventory instanceof LecternBlockEntity.LecternInventory) {
+            this.tile = ((LecternBlockEntity.LecternInventory) inventory).getLectern();
+        }
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java	(date 1725177022579)
@@ -1,18 +1,162 @@
 package org.bukkit.craftbukkit.block;
 
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableSet;
+import java.util.Collection;
+import java.util.UUID;
+import net.minecraft.world.level.block.TrialSpawnerBlock;
 import net.minecraft.world.level.block.entity.TrialSpawnerBlockEntity;
+import net.minecraft.world.level.block.entity.trialspawner.TrialSpawnerData;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.TrialSpawner;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.spawner.TrialSpawnerConfiguration;
 
 public class CraftTrialSpawner extends CraftBlockEntityState<TrialSpawnerBlockEntity> implements TrialSpawner {
 
+    private final CraftTrialSpawnerConfiguration normalConfig;
+    private final CraftTrialSpawnerConfiguration ominousConfig;
+
     public CraftTrialSpawner(World world, TrialSpawnerBlockEntity tileEntity) {
         super(world, tileEntity);
+        this.normalConfig = new CraftTrialSpawnerConfiguration(tileEntity.getTrialSpawner().getNormalConfig(), this.getSnapshot());
+        this.ominousConfig = new CraftTrialSpawnerConfiguration(tileEntity.getTrialSpawner().getOminousConfig(), this.getSnapshot());
     }
 
     protected CraftTrialSpawner(CraftTrialSpawner state, Location location) {
         super(state, location);
+        this.normalConfig = state.normalConfig;
+        this.ominousConfig = state.ominousConfig;
+    }
+
+    @Override
+    public int getCooldownLength() {
+        return this.getSnapshot().trialSpawner.getTargetCooldownLength();
+    }
+
+    @Override
+    public void setCooldownLength(int ticks) {
+        this.getSnapshot().trialSpawner.targetCooldownLength = ticks;
+    }
+
+    @Override
+    public int getRequiredPlayerRange() {
+      return this.getSnapshot().trialSpawner.getRequiredPlayerRange();
+    }
+
+    @Override
+    public void setRequiredPlayerRange(int requiredPlayerRange) {
+        this.getSnapshot().trialSpawner.requiredPlayerRange = requiredPlayerRange;
+    }
+
+    @Override
+    public Collection<Player> getTrackedPlayers() {
+        ImmutableSet.Builder<Player> players = ImmutableSet.builder();
+
+        for (UUID uuid : this.getTrialData().detectedPlayers) {
+            Player player = Bukkit.getPlayer(uuid);
+            if (player != null) {
+                players.add(player);
+            }
+        }
+        return players.build();
+    }
+
+    @Override
+    public boolean isTrackingPlayer(Player player) {
+        Preconditions.checkArgument(player != null, "Player cannot be null");
+
+        return this.getTrialData().detectedPlayers.contains(player.getUniqueId());
+    }
+
+    @Override
+    public void startTrackingPlayer(Player player) {
+        Preconditions.checkArgument(player != null, "Player cannot be null");
+
+        this.getTrialData().detectedPlayers.add(player.getUniqueId());
+    }
+
+    @Override
+    public void stopTrackingPlayer(Player player) {
+        Preconditions.checkArgument(player != null, "Player cannot be null");
+
+        this.getTrialData().detectedPlayers.remove(player.getUniqueId());
+    }
+
+    @Override
+    public Collection<Entity> getTrackedEntities() {
+        ImmutableSet.Builder<Entity> entities = ImmutableSet.builder();
+
+        for (UUID uuid : this.getTrialData().currentMobs) {
+            Entity entity = Bukkit.getEntity(uuid);
+            if (entity != null) {
+                entities.add(entity);
+            }
+        }
+        return entities.build();
+    }
+
+    @Override
+    public boolean isTrackingEntity(Entity entity) {
+        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+
+        return this.getTrialData().currentMobs.contains(entity.getUniqueId());
+    }
+
+    @Override
+    public void startTrackingEntity(Entity entity) {
+        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+
+        this.getTrialData().currentMobs.add(entity.getUniqueId());
+    }
+
+    @Override
+    public void stopTrackingEntity(Entity entity) {
+        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+
+        this.getTrialData().currentMobs.remove(entity.getUniqueId());
+    }
+
+    @Override
+    public boolean isOminous() {
+        return this.getHandle().getValue(TrialSpawnerBlock.OMINOUS);
+    }
+
+    @Override
+    public void setOminous(boolean ominous) {
+        this.getSnapshot().trialSpawner.isOminous = ominous;
+        if (ominous) {
+            this.setData(this.getHandle().setValue(TrialSpawnerBlock.OMINOUS, true));
+            // TODO: Consider calling TrialSpawnerData#resetAfterBecomingOminous in update(...), but note that method also removes entities
+            return;
+        }
+
+        this.setData(this.getHandle().setValue(TrialSpawnerBlock.OMINOUS, false));
+    }
+
+    @Override
+    public TrialSpawnerConfiguration getNormalConfiguration() {
+       return this.normalConfig;
+    }
+
+    @Override
+    public TrialSpawnerConfiguration getOminousConfiguration() {
+       return this.ominousConfig;
+    }
+
+    @Override
+    protected void applyTo(TrialSpawnerBlockEntity tileEntity) {
+        super.applyTo(tileEntity);
+
+        tileEntity.trialSpawner.normalConfig = this.normalConfig.toMinecraft();
+        tileEntity.trialSpawner.ominousConfig = this.ominousConfig.toMinecraft();
+    }
+
+    private TrialSpawnerData getTrialData() {
+        return this.getSnapshot().getTrialSpawner().getData();
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java	(date 1725177022573)
@@ -45,23 +45,23 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             net.minecraft.world.level.Level world = this.getTileEntity().getLevel();
             world.blockEvent(this.getPosition(), this.getTileEntity().getBlockState().getBlock(), 1, 1);
             world.playSound(null, this.getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        this.getTileEntity().banner$setOpened(true);
+        this.getTileEntity().opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             net.minecraft.world.level.Level world = this.getTileEntity().getLevel();
             world.blockEvent(this.getPosition(), this.getTileEntity().getBlockState().getBlock(), 1, 0);
             world.playSound(null, this.getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        this.getTileEntity().banner$setOpened(false);
+        this.getTileEntity().opened = false;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java	(date 1725177022579)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.authlib.GameProfile;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
@@ -64,7 +63,7 @@
             return false;
         }
 
-        GameProfile profile = BukkitExtraConstants.getServer().getProfileCache().get(name).orElse(null);
+        GameProfile profile = MinecraftServer.getServer().getProfileCache().get(name).orElse(null);
         if (profile == null) {
             return false;
         }
@@ -188,7 +187,7 @@
         super.applyTo(skull);
 
         if (this.getSkullType() == SkullType.PLAYER) {
-            skull.setOwner(new ResolvableProfile(this.profile));
+            skull.setOwner((this.profile != null) ? new ResolvableProfile(this.profile) : null);
         }
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java b/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java	(date 1725177022678)
@@ -19,8 +19,8 @@
         this.to = portalEvent.getTo();
         this.searchRadius = portalEvent.getSearchRadius();
         this.cancelled = portalEvent.isCancelled();
-        this.creationRadius = 0;
-        this.canCreatePortal = false;
+        this.creationRadius = portalEvent.getCreationRadius();
+        this.canCreatePortal = portalEvent.getCanCreatePortal();
     }
 
     public CraftPortalEvent(PlayerPortalEvent portalEvent) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java	(date 1725177022693)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.Optional;
@@ -148,7 +147,7 @@
     @Override
     public ItemStack createItemStack(String input) throws IllegalArgumentException {
         try {
-            ItemParser.ItemResult arg = new ItemParser(BukkitExtraConstants.getDefaultRegistryAccess()).parse(new StringReader(input));
+            ItemParser.ItemResult arg = new ItemParser(MinecraftServer.getDefaultRegistryAccess()).parse(new StringReader(input));
 
             Item item = arg.item().value();
             net.minecraft.world.item.ItemStack nmsItemStack = new net.minecraft.world.item.ItemStack(item);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java b/banner_server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java	(date 1725177022721)
@@ -52,7 +52,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
+        return craftWorld.getHandle().serverLevelData.getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
@@ -66,7 +66,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
+        return craftWorld.getHandle().serverLevelData.getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java	(date 1725177022693)
@@ -2,8 +2,14 @@
 
 import java.util.function.BiFunction;
 import java.util.function.Function;
+import net.minecraft.world.item.BannerItem;
+import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import org.bukkit.Tag;
+import net.minecraft.world.item.SignItem;
+import net.minecraft.world.item.SpawnEggItem;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.ShulkerBoxBlock;
 import org.bukkit.inventory.ItemType;
 import org.bukkit.inventory.meta.ArmorMeta;
 import org.bukkit.inventory.meta.AxolotlBucketMeta;
@@ -24,6 +30,7 @@
 import org.bukkit.inventory.meta.MusicInstrumentMeta;
 import org.bukkit.inventory.meta.OminousBottleMeta;
 import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.inventory.meta.ShieldMeta;
 import org.bukkit.inventory.meta.SkullMeta;
 import org.bukkit.inventory.meta.SpawnEggMeta;
 import org.bukkit.inventory.meta.SuspiciousStewMeta;
@@ -107,6 +114,10 @@
             item -> new CraftMetaBlockState(item.getComponentsPatch(), CraftItemType.minecraftToBukkit(item.getItem())),
             (type, meta) -> new CraftMetaBlockState(meta, type.asMaterial()));
 
+    private static final ItemMetaData<ShieldMeta> SHIELD_META_DATA = new ItemMetaData<>(ShieldMeta.class,
+            item -> new CraftMetaShield(item.getComponentsPatch()),
+            (type, meta) -> new CraftMetaShield(meta));
+
     private static final ItemMetaData<TropicalFishBucketMeta> TROPICAL_FISH_BUCKET_META_DATA = new ItemMetaData<>(TropicalFishBucketMeta.class,
             item -> new CraftMetaTropicalFishBucket(item.getComponentsPatch()),
             (type, meta) -> meta instanceof CraftMetaTropicalFishBucket tropicalFishBucket ? tropicalFishBucket : new CraftMetaTropicalFishBucket(meta));
@@ -145,7 +156,10 @@
 
     // We use if instead of a set, since the result gets cached in CraftItemType,
     // which would result in dead memory once all ItemTypes have cached the data.
-    public static <I extends ItemMeta> ItemMetaData<I> getItemMetaData(ItemType itemType) {
+    public static <I extends ItemMeta> ItemMetaData<I> getItemMetaData(CraftItemType<?> itemType) {
+        Item itemHandle = itemType.getHandle();
+        Block blockHandle = (itemHandle instanceof BlockItem itemBlock) ? itemBlock.getBlock() : null;
+
         if (itemType == ItemType.AIR) {
             return CraftItemMetas.asType(CraftItemMetas.EMPTY_META_DATA);
         }
@@ -198,50 +212,10 @@
         if (itemType == ItemType.ENCHANTED_BOOK) {
             return CraftItemMetas.asType(CraftItemMetas.ENCHANTED_BOOK_META_DATA);
         }
-        if (itemType.hasBlockType() && Tag.BANNERS.isTagged(itemType.getBlockType().asMaterial())) {
+        if (itemHandle instanceof BannerItem) {
             return CraftItemMetas.asType(CraftItemMetas.BANNER_META_DATA);
         }
-        if (itemType == ItemType.ARMADILLO_SPAWN_EGG || itemType == ItemType.ALLAY_SPAWN_EGG
-                || itemType == ItemType.ARMADILLO_SPAWN_EGG || itemType == ItemType.ALLAY_SPAWN_EGG
-                || itemType == ItemType.AXOLOTL_SPAWN_EGG || itemType == ItemType.BAT_SPAWN_EGG
-                || itemType == ItemType.BEE_SPAWN_EGG || itemType == ItemType.BLAZE_SPAWN_EGG
-                || itemType == ItemType.BOGGED_SPAWN_EGG || itemType == ItemType.BREEZE_SPAWN_EGG
-                || itemType == ItemType.CAT_SPAWN_EGG || itemType == ItemType.CAMEL_SPAWN_EGG
-                || itemType == ItemType.CAVE_SPIDER_SPAWN_EGG || itemType == ItemType.CHICKEN_SPAWN_EGG
-                || itemType == ItemType.COD_SPAWN_EGG || itemType == ItemType.COW_SPAWN_EGG
-                || itemType == ItemType.CREEPER_SPAWN_EGG || itemType == ItemType.DOLPHIN_SPAWN_EGG
-                || itemType == ItemType.DONKEY_SPAWN_EGG || itemType == ItemType.DROWNED_SPAWN_EGG
-                || itemType == ItemType.ELDER_GUARDIAN_SPAWN_EGG || itemType == ItemType.ENDER_DRAGON_SPAWN_EGG
-                || itemType == ItemType.ENDERMAN_SPAWN_EGG || itemType == ItemType.ENDERMITE_SPAWN_EGG
-                || itemType == ItemType.EVOKER_SPAWN_EGG || itemType == ItemType.FOX_SPAWN_EGG
-                || itemType == ItemType.FROG_SPAWN_EGG || itemType == ItemType.GHAST_SPAWN_EGG
-                || itemType == ItemType.GLOW_SQUID_SPAWN_EGG || itemType == ItemType.GOAT_SPAWN_EGG
-                || itemType == ItemType.GUARDIAN_SPAWN_EGG || itemType == ItemType.HOGLIN_SPAWN_EGG
-                || itemType == ItemType.HORSE_SPAWN_EGG || itemType == ItemType.HUSK_SPAWN_EGG
-                || itemType == ItemType.IRON_GOLEM_SPAWN_EGG || itemType == ItemType.LLAMA_SPAWN_EGG
-                || itemType == ItemType.MAGMA_CUBE_SPAWN_EGG || itemType == ItemType.MOOSHROOM_SPAWN_EGG
-                || itemType == ItemType.MULE_SPAWN_EGG || itemType == ItemType.OCELOT_SPAWN_EGG
-                || itemType == ItemType.PANDA_SPAWN_EGG || itemType == ItemType.PARROT_SPAWN_EGG
-                || itemType == ItemType.PHANTOM_SPAWN_EGG || itemType == ItemType.PIGLIN_BRUTE_SPAWN_EGG
-                || itemType == ItemType.PIGLIN_SPAWN_EGG || itemType == ItemType.PIG_SPAWN_EGG
-                || itemType == ItemType.PILLAGER_SPAWN_EGG || itemType == ItemType.POLAR_BEAR_SPAWN_EGG
-                || itemType == ItemType.PUFFERFISH_SPAWN_EGG || itemType == ItemType.RABBIT_SPAWN_EGG
-                || itemType == ItemType.RAVAGER_SPAWN_EGG || itemType == ItemType.SALMON_SPAWN_EGG
-                || itemType == ItemType.SHEEP_SPAWN_EGG || itemType == ItemType.SHULKER_SPAWN_EGG
-                || itemType == ItemType.SILVERFISH_SPAWN_EGG || itemType == ItemType.SKELETON_HORSE_SPAWN_EGG
-                || itemType == ItemType.SKELETON_SPAWN_EGG || itemType == ItemType.SLIME_SPAWN_EGG
-                || itemType == ItemType.SNIFFER_SPAWN_EGG || itemType == ItemType.SNOW_GOLEM_SPAWN_EGG
-                || itemType == ItemType.SPIDER_SPAWN_EGG || itemType == ItemType.SQUID_SPAWN_EGG
-                || itemType == ItemType.STRAY_SPAWN_EGG || itemType == ItemType.STRIDER_SPAWN_EGG
-                || itemType == ItemType.TADPOLE_SPAWN_EGG || itemType == ItemType.TRADER_LLAMA_SPAWN_EGG
-                || itemType == ItemType.TROPICAL_FISH_SPAWN_EGG || itemType == ItemType.TURTLE_SPAWN_EGG
-                || itemType == ItemType.VEX_SPAWN_EGG || itemType == ItemType.VILLAGER_SPAWN_EGG
-                || itemType == ItemType.VINDICATOR_SPAWN_EGG || itemType == ItemType.WANDERING_TRADER_SPAWN_EGG
-                || itemType == ItemType.WARDEN_SPAWN_EGG || itemType == ItemType.WITCH_SPAWN_EGG
-                || itemType == ItemType.WITHER_SKELETON_SPAWN_EGG || itemType == ItemType.WITHER_SPAWN_EGG
-                || itemType == ItemType.WOLF_SPAWN_EGG || itemType == ItemType.ZOGLIN_SPAWN_EGG
-                || itemType == ItemType.ZOMBIE_HORSE_SPAWN_EGG || itemType == ItemType.ZOMBIE_SPAWN_EGG
-                || itemType == ItemType.ZOMBIE_VILLAGER_SPAWN_EGG || itemType == ItemType.ZOMBIFIED_PIGLIN_SPAWN_EGG) {
+        if (itemHandle instanceof SpawnEggItem) {
             return CraftItemMetas.asType(CraftItemMetas.SPAWN_EGG_META_DATA);
         }
         if (itemType == ItemType.ARMOR_STAND) {
@@ -253,13 +227,13 @@
         if (itemType == ItemType.FURNACE || itemType == ItemType.CHEST
                 || itemType == ItemType.TRAPPED_CHEST || itemType == ItemType.JUKEBOX
                 || itemType == ItemType.DISPENSER || itemType == ItemType.DROPPER
-                || (itemType.hasBlockType() && Tag.SIGNS.isTagged(itemType.getBlockType().asMaterial())) || itemType == ItemType.SPAWNER
+                || itemHandle instanceof SignItem || itemType == ItemType.SPAWNER
                 || itemType == ItemType.BREWING_STAND || itemType == ItemType.ENCHANTING_TABLE
                 || itemType == ItemType.COMMAND_BLOCK || itemType == ItemType.REPEATING_COMMAND_BLOCK
                 || itemType == ItemType.CHAIN_COMMAND_BLOCK || itemType == ItemType.BEACON
                 || itemType == ItemType.DAYLIGHT_DETECTOR || itemType == ItemType.HOPPER
-                || itemType == ItemType.COMPARATOR || itemType == ItemType.SHIELD
-                || itemType == ItemType.STRUCTURE_BLOCK || (itemType.hasBlockType() && Tag.SHULKER_BOXES.isTagged(itemType.getBlockType().asMaterial()))
+                || itemType == ItemType.COMPARATOR || itemType == ItemType.STRUCTURE_BLOCK
+                || blockHandle instanceof ShulkerBoxBlock
                 || itemType == ItemType.ENDER_CHEST || itemType == ItemType.BARREL
                 || itemType == ItemType.BELL || itemType == ItemType.BLAST_FURNACE
                 || itemType == ItemType.CAMPFIRE || itemType == ItemType.SOUL_CAMPFIRE
@@ -273,6 +247,9 @@
                 || itemType == ItemType.TRIAL_SPAWNER || itemType == ItemType.VAULT) {
             return CraftItemMetas.asType(CraftItemMetas.BLOCK_STATE_META_DATA);
         }
+        if (itemType == ItemType.SHIELD) {
+            return CraftItemMetas.asType(CraftItemMetas.SHIELD_META_DATA);
+        }
         if (itemType == ItemType.TROPICAL_FISH_BUCKET) {
             return CraftItemMetas.asType(CraftItemMetas.TROPICAL_FISH_BUCKET_META_DATA);
         }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java	(date 1725177022693)
@@ -15,14 +15,14 @@
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 
-public class CraftInventoryView extends CraftAbstractInventoryView {
-    private final AbstractContainerMenu container;
+public class CraftInventoryView<T extends AbstractContainerMenu> extends CraftAbstractInventoryView {
+    protected final T container;
     private final CraftHumanEntity player;
     private final CraftInventory viewing;
     private final String originalTitle;
     private String title;
 
-    public CraftInventoryView(HumanEntity player, Inventory viewing, AbstractContainerMenu container) {
+    public CraftInventoryView(HumanEntity player, Inventory viewing, T container) {
         // TODO: Should we make sure it really IS a CraftHumanEntity first? And a CraftInventory?
         this.player = (CraftHumanEntity) player;
         this.viewing = (CraftInventory) viewing;
Index: banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java	(date 1725177022678)
@@ -43,11 +43,13 @@
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.inventory.RecipeBookType;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.UseOnContext;
+import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.Level;
@@ -72,6 +74,7 @@
 import org.bukkit.block.sign.Side;
 import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.CraftExplosionResult;
 import org.bukkit.craftbukkit.CraftLootTable;
 import org.bukkit.craftbukkit.CraftRaid;
 import org.bukkit.craftbukkit.CraftServer;
@@ -128,7 +131,9 @@
 import org.bukkit.event.block.BellRingEvent;
 import org.bukkit.event.block.BlockDamageAbortEvent;
 import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.event.block.BlockDispenseLootEvent;
 import org.bukkit.event.block.BlockDropItemEvent;
+import org.bukkit.event.block.BlockExplodeEvent;
 import org.bukkit.event.block.BlockFadeEvent;
 import org.bukkit.event.block.BlockFormEvent;
 import org.bukkit.event.block.BlockGrowEvent;
@@ -140,11 +145,13 @@
 import org.bukkit.event.block.BlockRedstoneEvent;
 import org.bukkit.event.block.BlockShearEntityEvent;
 import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.block.CrafterCraftEvent;
 import org.bukkit.event.block.EntityBlockFormEvent;
 import org.bukkit.event.block.FluidLevelChangeEvent;
 import org.bukkit.event.block.MoistureChangeEvent;
 import org.bukkit.event.block.NotePlayEvent;
 import org.bukkit.event.block.TNTPrimeEvent;
+import org.bukkit.event.block.VaultDisplayItemEvent;
 import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
 import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
 import org.bukkit.event.entity.BatToggleSleepEvent;
@@ -162,6 +169,7 @@
 import org.bukkit.event.entity.EntityDeathEvent;
 import org.bukkit.event.entity.EntityEnterLoveModeEvent;
 import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
 import org.bukkit.event.entity.EntityInteractEvent;
 import org.bukkit.event.entity.EntityKnockbackByEntityEvent;
 import org.bukkit.event.entity.EntityKnockbackEvent;
@@ -197,6 +205,7 @@
 import org.bukkit.event.entity.ProjectileLaunchEvent;
 import org.bukkit.event.entity.SpawnerSpawnEvent;
 import org.bukkit.event.entity.StriderTemperatureChangeEvent;
+import org.bukkit.event.entity.TrialSpawnerSpawnEvent;
 import org.bukkit.event.entity.VillagerCareerChangeEvent;
 import org.bukkit.event.inventory.InventoryCloseEvent;
 import org.bukkit.event.inventory.InventoryOpenEvent;
@@ -238,10 +247,12 @@
 import org.bukkit.event.world.EntitiesLoadEvent;
 import org.bukkit.event.world.EntitiesUnloadEvent;
 import org.bukkit.event.world.LootGenerateEvent;
+import org.bukkit.inventory.CraftingRecipe;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
+import org.bukkit.inventory.view.AnvilView;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.Vector;
 
@@ -647,8 +658,7 @@
 
             if (spawnReason != SpawnReason.CUSTOM) {
                 if (isAnimal && !world.getWorld().getAllowAnimals() || isMonster && !world.getWorld().getAllowMonsters() || isNpc && !world.getCraftServer().getServer().areNpcsEnabled()) {
-                    entity.discard(); // Add Bukkit remove cause
-                    entity.pushRemoveCause(null);
+                    entity.discard(null); // Add Bukkit remove cause
                     return false;
                 }
             }
@@ -686,29 +696,25 @@
         if (event != null && (event.isCancelled() || entity.isRemoved())) {
             Entity vehicle = entity.getVehicle();
             if (vehicle != null) {
-                vehicle.discard(); // Add Bukkit remove cause
-                vehicle.pushRemoveCause(null);
+                vehicle.discard(null); // Add Bukkit remove cause
             }
             for (Entity passenger : entity.getIndirectPassengers()) {
-                passenger.discard(); // Add Bukkit remove cause
-                vehicle.pushRemoveCause(null);
+                passenger.discard(null); // Add Bukkit remove cause
             }
-            entity.discard(); // Add Bukkit remove cause
-            vehicle.pushRemoveCause(null);
+            entity.discard(null); // Add Bukkit remove cause
             return false;
         }
 
         // Spigot start - SPIGOT-7523: Merge after spawn event and only merge if the event was not cancelled (gets checked above)
         if (entity instanceof net.minecraft.world.entity.ExperienceOrb xp) {
-            double radius = world.bridge$spigotConfig().expMerge;
+            double radius = world.spigotConfig.expMerge;
             if (radius > 0) {
                 List<Entity> entities = world.getEntities(entity, entity.getBoundingBox().inflate(radius, radius, radius));
                 for (Entity e : entities) {
                     if (e instanceof net.minecraft.world.entity.ExperienceOrb loopItem) {
                         if (!loopItem.isRemoved()) {
                             xp.value += loopItem.value;
-                            loopItem.discard(); // Add Bukkit remove cause
-                            loopItem.pushRemoveCause(null);
+                            loopItem.discard(null); // Add Bukkit remove cause
                         }
                     }
                 }
@@ -900,7 +906,7 @@
         CraftWorld world = (CraftWorld) entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        victim.banner$setExpToDrop(event.getDroppedExp());
+        victim.expToDrop = event.getDroppedExp();
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
@@ -916,20 +922,25 @@
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(damageSource);
         PlayerDeathEvent event = new PlayerDeathEvent(entity, bukkitDamageSource, drops, victim.getExpReward(damageSource.getEntity()), 0, deathMessage);
         event.setKeepInventory(keepInventory);
-        event.setKeepLevel(victim.bridge$keepLevel()); // SPIGOT-2222: pre-set keepLevel
-        org.bukkit.World world = entity.getWorld();
+        event.setKeepLevel(victim.keepLevel); // SPIGOT-2222: pre-set keepLevel
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        victim.banner$setKeepLevel(event.getKeepLevel());
-        victim.banner$setNewLevel(event.getNewLevel());
-        victim.banner$setNewTotalExp(event.getNewTotalExp());
-        victim.banner$setExpToDrop(event.getDroppedExp());
-        victim.banner$setNewExp(event.getNewExp());
+        victim.keepLevel = event.getKeepLevel();
+        victim.newLevel = event.getNewLevel();
+        victim.newTotalExp = event.getNewTotalExp();
+        victim.expToDrop = event.getDroppedExp();
+        victim.newExp = event.getNewExp();
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR) continue;
 
-            world.dropItem(entity.getLocation(), stack);
+            if (stack instanceof CraftItemStack craftItemStack && craftItemStack.isForInventoryDrop()) {
+                victim.drop(CraftItemStack.asNMSCopy(stack), true, false, false); // SPIGOT-7800, SPIGOT-7801: Vanilla Behaviour for Player Inventory dropped items
+            } else {
+                victim.forceDrops = true;
+                victim.spawnAtLocation(CraftItemStack.asNMSCopy(stack)); // SPIGOT-7806: Vanilla Behaviour for items not related to Player Inventory dropped items
+                victim.forceDrops = false;
+            }
         }
 
         return event;
@@ -950,7 +961,7 @@
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(source);
-        Entity damager = (bukkitDamageSource.isIndirect() && source.getDirectEntity() != null) ? source.getDirectEntity() : source.getCausingEntity();
+        Entity damager = (source.getDamager() != null) ? source.getDamager() : source.getEntity();
         if (source.is(DamageTypeTags.IS_EXPLOSION)) {
             if (damager == null) {
                 return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, DamageCause.BLOCK_EXPLOSION, bukkitDamageSource, modifiers, modifierFunctions, cancelled);
@@ -997,8 +1008,10 @@
                 cause = DamageCause.MAGIC;
             } else if (source.is(DamageTypes.IN_FIRE)) {
                 cause = DamageCause.FIRE;
+            } else if (source.is(DamageTypes.CAMPFIRE)) {
+                cause = DamageCause.CAMPFIRE;
             } else {
-                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, source.getDirectBlock(), source.getMsgId()));
+                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s [%s]", entity, source.getDirectBlock(), source.getMsgId(), source.typeHolder().getRegisteredName()));
             }
             return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, cause, bukkitDamageSource, modifiers, modifierFunctions, cancelled);
         }
@@ -1055,7 +1068,7 @@
 
     private static EntityDamageEvent callEntityDamageEvent(Block damager, BlockState damagerState, Entity damagee, DamageCause cause, org.bukkit.damage.DamageSource bukkitDamageSource, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(damager, damagerState, damagee.getBukkitEntity(), cause, bukkitDamageSource, modifiers, modifierFunctions);
-        return callEntityDamageEvent(event, damagee, cancelled);
+        return CraftEventFactory.callEntityDamageEvent(event, damagee, cancelled);
     }
 
     private static EntityDamageEvent callEntityDamageEvent(EntityDamageEvent event, Entity damagee, boolean cancelled) {
@@ -1065,7 +1078,7 @@
         if (!event.isCancelled()) {
             event.getEntity().setLastDamageCause(event);
         } else {
-            damagee.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+            damagee.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
         }
 
         return event;
@@ -1073,11 +1086,15 @@
 
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
 
-    public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
+    public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double freezingModifier, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> freezing, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
         Map<DamageModifier, Double> modifiers = new EnumMap<>(DamageModifier.class);
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<>(DamageModifier.class);
         modifiers.put(DamageModifier.BASE, rawDamage);
         modifierFunctions.put(DamageModifier.BASE, CraftEventFactory.ZERO);
+        if (source.is(DamageTypes.FREEZE)) {
+            modifiers.put(DamageModifier.FREEZING, freezingModifier);
+            modifierFunctions.put(DamageModifier.FREEZING, freezing);
+        }
         if (source.is(DamageTypes.FALLING_BLOCK) || source.is(DamageTypes.FALLING_ANVIL)) {
             modifiers.put(DamageModifier.HARD_HAT, hardHatModifier);
             modifierFunctions.put(DamageModifier.HARD_HAT, hardHat);
@@ -1266,7 +1283,7 @@
         return container;
     }
 
-    public static ItemStack callPreCraftEvent(Container matrix, Container resultInventory, ItemStack result, InventoryView lastCraftView, boolean isRepair) {
+    public static ItemStack callPreCraftEvent(CraftingContainer matrix, Container resultInventory, ItemStack result, InventoryView lastCraftView, boolean isRepair) {
         CraftInventoryCrafting inventory = new CraftInventoryCrafting(matrix, resultInventory);
         inventory.setResult(CraftItemStack.asCraftMirror(result));
 
@@ -1278,6 +1295,16 @@
         return CraftItemStack.asNMSCopy(bitem);
     }
 
+    public static CrafterCraftEvent callCrafterCraftEvent(BlockPos pos, Level world, CraftingContainer inventoryCrafting, ItemStack result, RecipeHolder<net.minecraft.world.item.crafting.CraftingRecipe> holder) {
+        CraftBlock block = CraftBlock.at(world, pos);
+        CraftItemStack itemStack = CraftItemStack.asCraftMirror(result);
+        CraftingRecipe craftingRecipe = (CraftingRecipe) holder.toBukkitRecipe();
+
+        CrafterCraftEvent crafterCraftEvent = new CrafterCraftEvent(block, craftingRecipe, itemStack);
+        Bukkit.getPluginManager().callEvent(crafterCraftEvent);
+        return crafterCraftEvent;
+    }
+
     public static ProjectileLaunchEvent callProjectileLaunchEvent(Entity entity) {
         Projectile bukkitEntity = (Projectile) entity.getBukkitEntity();
         ProjectileLaunchEvent event = new ProjectileLaunchEvent(bukkitEntity);
@@ -1447,13 +1474,13 @@
         Bukkit.getPluginManager().callEvent(new PlayerRecipeBookSettingsChangeEvent(player.getBukkitEntity(), bukkitType, open, filter));
     }
 
-    public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(Mob entity, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
+    public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(Entity entity, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
         entity.level().getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static PlayerLeashEntityEvent callPlayerLeashEntityEvent(Mob entity, Entity leashHolder, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
+    public static PlayerLeashEntityEvent callPlayerLeashEntityEvent(Entity entity, Entity leashHolder, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
         PlayerLeashEntityEvent event = new PlayerLeashEntityEvent(entity.getBukkitEntity(), leashHolder.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
         entity.level().getCraftServer().getPluginManager().callEvent(event);
         return event;
@@ -1534,7 +1561,7 @@
         return event;
     }
 
-    public static PrepareAnvilEvent callPrepareAnvilEvent(InventoryView view, ItemStack item) {
+    public static PrepareAnvilEvent callPrepareAnvilEvent(AnvilView view, ItemStack item) {
         PrepareAnvilEvent event = new PrepareAnvilEvent(view, CraftItemStack.asCraftMirror(item).clone());
         event.getView().getPlayer().getServer().getPluginManager().callEvent(event);
         event.getInventory().setItem(2, event.getResult());
@@ -1570,6 +1597,35 @@
         return event;
     }
 
+    /**
+     * Trial Mob spawner event.
+     */
+    public static TrialSpawnerSpawnEvent callTrialSpawnerSpawnEvent(Entity spawnee, BlockPos pos) {
+        org.bukkit.craftbukkit.entity.CraftEntity entity = spawnee.getBukkitEntity();
+        BlockState state = CraftBlock.at(spawnee.level(), pos).getState();
+        if (!(state instanceof org.bukkit.block.TrialSpawner)) {
+            state = null;
+        }
+
+        TrialSpawnerSpawnEvent event = new TrialSpawnerSpawnEvent(entity, (org.bukkit.block.TrialSpawner) state);
+        entity.getServer().getPluginManager().callEvent(event);
+        return event;
+    }
+
+    public static BlockDispenseLootEvent callBlockDispenseLootEvent(ServerLevel worldServer, BlockPos blockPosition, net.minecraft.world.entity.player.Player player, List<ItemStack> rewardLoot) {
+        List<org.bukkit.inventory.ItemStack> craftItemStacks = rewardLoot.stream().map(CraftItemStack::asBukkitCopy).collect(Collectors.toList());
+
+        BlockDispenseLootEvent event = new BlockDispenseLootEvent((player == null) ? null : (Player) player.getBukkitEntity(), CraftBlock.at(worldServer, blockPosition), craftItemStacks);
+        Bukkit.getPluginManager().callEvent(event);
+        return event;
+    }
+
+    public static VaultDisplayItemEvent callVaultDisplayItemEvent(ServerLevel worldServer, BlockPos blockPosition, ItemStack displayitemStack) {
+        VaultDisplayItemEvent event = new VaultDisplayItemEvent(CraftBlock.at(worldServer, blockPosition), CraftItemStack.asBukkitCopy(displayitemStack));
+        Bukkit.getPluginManager().callEvent(event);
+        return event;
+    }
+
     public static EntityToggleGlideEvent callToggleGlideEvent(net.minecraft.world.entity.LivingEntity entity, boolean gliding) {
         EntityToggleGlideEvent event = new EntityToggleGlideEvent((LivingEntity) entity.getBukkitEntity(), gliding);
         entity.level().getCraftServer().getPluginManager().callEvent(event);
@@ -1609,7 +1665,7 @@
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
         // Suppress during worldgen
         if (world instanceof Level) {
-            ((Level) world).getServer().bridge$server().getPluginManager().callEvent(event);
+            ((Level) world).getServer().server.getPluginManager().callEvent(event);
         }
         return event;
     }
@@ -1730,7 +1786,7 @@
         Entity entity = lootInfo.getParamOrNull(LootContextParams.THIS_ENTITY);
         List<org.bukkit.inventory.ItemStack> bukkitLoot = loot.stream().map(CraftItemStack::asCraftMirror).collect(Collectors.toCollection(ArrayList::new));
 
-        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), inventory.getOwner(), lootTable.bridge$craftLootTable(), CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
+        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), inventory.getOwner(), lootTable.craftLootTable, CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
@@ -1803,6 +1859,11 @@
     public static EntityTeleportEvent callEntityTeleportEvent(Entity nmsEntity, double x, double y, double z) {
         CraftEntity entity = nmsEntity.getBukkitEntity();
         Location to = new Location(entity.getWorld(), x, y, z, nmsEntity.getYRot(), nmsEntity.getXRot());
+        return CraftEventFactory.callEntityTeleportEvent(nmsEntity, to);
+    }
+
+    public static EntityTeleportEvent callEntityTeleportEvent(Entity nmsEntity, Location to) {
+        CraftEntity entity = nmsEntity.getBukkitEntity();
         EntityTeleportEvent event = new org.bukkit.event.entity.EntityTeleportEvent(entity, entity.getLocation(), to);
 
         Bukkit.getPluginManager().callEvent(event);
@@ -1817,6 +1878,18 @@
         return !event.isCancelled();
     }
 
+    public static EntityExplodeEvent callEntityExplodeEvent(Entity entity, List<Block> blocks, float yield, Explosion.BlockInteraction effect) {
+        EntityExplodeEvent event = new EntityExplodeEvent(entity.getBukkitEntity(), entity.getBukkitEntity().getLocation(), blocks, yield, CraftExplosionResult.toBukkit(effect));
+        Bukkit.getPluginManager().callEvent(event);
+        return event;
+    }
+
+    public static BlockExplodeEvent callBlockExplodeEvent(Block block, BlockState state, List<Block> blocks, float yield, Explosion.BlockInteraction effect) {
+        BlockExplodeEvent event = new BlockExplodeEvent(block, state, blocks, yield, CraftExplosionResult.toBukkit(effect));
+        Bukkit.getPluginManager().callEvent(event);
+        return event;
+    }
+
     public static ExplosionPrimeEvent callExplosionPrimeEvent(Explosive explosive) {
         ExplosionPrimeEvent event = new ExplosionPrimeEvent(explosive);
         Bukkit.getPluginManager().callEvent(event);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java	(date 1725177022693)
@@ -35,7 +35,8 @@
                 maxUses,
                 experience,
                 priceMultiplier,
-                demand
+                demand,
+                this
         );
         this.setSpecialPrice(specialPrice);
         this.setExperienceReward(experienceReward);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java	(date 1725177022642)
@@ -60,7 +60,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -70,7 +70,7 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java	(date 1725177022642)
@@ -45,7 +45,7 @@
     @Override
     public void setMaxDomestication(int value) {
         Preconditions.checkArgument(value > 0, "Max domestication (%s) cannot be zero or less", value);
-        this.getHandle().banner$setMaxDomestication(value);
+        this.getHandle().maxDomestication = value;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java	(date 1725177022693)
@@ -18,6 +18,7 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.ApiStatus;
 
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
@@ -85,6 +86,7 @@
     }
 
     net.minecraft.world.item.ItemStack handle;
+    private boolean isForInventoryDrop;
 
     /**
      * Mirror
@@ -104,6 +106,27 @@
         this.setItemMeta(itemMeta);
     }
 
+    /**
+     * Gets if the item is marked as an inventory drop in death events.
+     *
+     * @return true if the item is marked as an inventory drop
+     */
+    @ApiStatus.Internal
+    public boolean isForInventoryDrop() {
+        return this.isForInventoryDrop;
+    }
+
+    /**
+     * Marks this item as an inventory drop in death events.
+     *
+     * @return the ItemStack marked as an inventory drop
+     */
+    @ApiStatus.Internal
+    public ItemStack markForInventoryDrop() {
+        this.isForInventoryDrop = true;
+        return this;
+    }
+
     @Override
     public MaterialData getData() {
         return this.handle != null ? CraftMagicNumbers.getMaterialData(this.handle.getItem()) : super.getData();
@@ -333,20 +356,6 @@
         return true;
     }
 
-    // Paper start - MC Utils
-    public static net.minecraft.world.item.ItemStack unwrap(ItemStack bukkit) {
-        if (bukkit instanceof CraftItemStack craftItemStack) {
-            return craftItemStack.handle != null ? craftItemStack.handle : net.minecraft.world.item.ItemStack.EMPTY;
-        } else {
-            return asNMSCopy(bukkit);
-        }
-    }
-
-    public static net.minecraft.world.item.ItemStack getOrCloneOnMutation(ItemStack old, ItemStack newInstance) {
-        return old == newInstance ? unwrap(old) : asNMSCopy(newInstance);
-    }
-    // Paper end - MC Utils
-
     @Override
     public boolean isSimilar(ItemStack stack) {
         if (stack == null) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java	(date 1725177022693)
@@ -4,8 +4,6 @@
 import com.google.common.collect.ImmutableMap.Builder;
 import java.util.Map;
 import java.util.Optional;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.component.DataComponentPatch;
@@ -123,7 +121,7 @@
         if (this.lodestoneWorld == null) {
             return null;
         }
-        ServerLevel worldServer = BukkitExtraConstants.getServer().getLevel(this.lodestoneWorld);
+        ServerLevel worldServer = MinecraftServer.getServer().getLevel(this.lodestoneWorld);
         World world = worldServer != null ? worldServer.getWorld() : null;
         return new Location(world, this.lodestoneX, this.lodestoneY, this.lodestoneZ); // world may be null here, if the referenced world is not loaded
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java	(date 1725177022693)
@@ -17,6 +17,7 @@
 import net.minecraft.nbt.Tag;
 import net.minecraft.world.item.component.CustomData;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import org.bukkit.DyeColor;
 import org.bukkit.Material;
 import org.bukkit.block.BlockState;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
@@ -90,7 +91,7 @@
             Set<DataComponentType<?>> applied = blockEntityTag.applyComponents(map, tag);
             // Mark applied components as handled
             for (DataComponentType<?> seen : applied) {
-                this.unhandledTags.build().clear(seen);
+                this.unhandledTags.clear(seen);
             }
             // Only set blockEntityTag if something was applied
             if (!applied.isEmpty()) {
@@ -108,8 +109,10 @@
         } else {
             this.material = Material.AIR;
         }
-        this.blockEntityTag = CraftMetaBlockState.getBlockState(this.material, this.internalTag);
-        this.internalTag = null;
+        if (this.internalTag != null) {
+            this.blockEntityTag = CraftMetaBlockState.getBlockState(this.material, this.internalTag);
+            this.internalTag = null;
+        }
     }
 
     @Override
@@ -202,7 +205,7 @@
 
     private static CraftBlockEntityState<?> getBlockState(Material material, CompoundTag blockEntityTag) {
         BlockPos pos = BlockPos.ZERO;
-        Material stateMaterial = (material != Material.SHIELD) ? material : CraftMetaBlockState.shieldToBannerHack(); // Only actually used for jigsaws
+        Material stateMaterial = (material != Material.SHIELD) ? material : CraftMetaBlockState.shieldToBannerHack(blockEntityTag); // Only actually used for jigsaws
         if (blockEntityTag != null) {
             if (material == Material.SHIELD) {
                 blockEntityTag.putString("id", "minecraft:banner");
@@ -223,14 +226,25 @@
     public void setBlockState(BlockState blockState) {
         Preconditions.checkArgument(blockState != null, "blockState must not be null");
 
-        Material stateMaterial = (this.material != Material.SHIELD) ? this.material : CraftMetaBlockState.shieldToBannerHack();
+        Material stateMaterial = (this.material != Material.SHIELD) ? this.material : CraftMetaBlockState.shieldToBannerHack(null);
         Class<?> blockStateType = CraftBlockStates.getBlockStateType(stateMaterial);
-        Preconditions.checkArgument(blockStateType == blockState.getClass() && blockState instanceof CraftBlockEntityState, "Invalid blockState for " + this.material);
+        Preconditions.checkArgument(blockStateType == blockState.getClass() && blockState instanceof CraftBlockEntityState, "Invalid blockState for %s", this.material);
 
         this.blockEntityTag = (CraftBlockEntityState<?>) blockState;
     }
 
-    private static Material shieldToBannerHack() {
+    private static Material shieldToBannerHack(CompoundTag tag) {
+        if (tag != null) {
+            if (tag.contains("components", CraftMagicNumbers.NBT.TAG_COMPOUND)) {
+                CompoundTag components = tag.getCompound("components");
+                if (components.contains("minecraft:base_color", CraftMagicNumbers.NBT.TAG_STRING)) {
+                    DyeColor color = DyeColor.getByWoolData((byte) net.minecraft.world.item.DyeColor.byName(components.getString("minecraft:base_color"), net.minecraft.world.item.DyeColor.WHITE).getId());
+
+                    return CraftMetaShield.shieldToBannerHack(color);
+                }
+            }
+        }
+
         return Material.WHITE_BANNER;
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java	(date 1725177022693)
@@ -308,7 +308,8 @@
 
         private String componentsToPage(BaseComponent[] components) {
             // Convert component to plain String:
-            return CraftChatMessage.fromJSONComponent(ComponentSerializer.toString(components));
+            Component component = CraftChatMessage.fromJSONOrNull(ComponentSerializer.toString(components));
+            return CraftChatMessage.fromComponent(component);
         }
 
         @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java	(date 1725177022642)
@@ -21,12 +21,12 @@
 
     @Override
     public void setAgeLock(boolean lock) {
-        this.getHandle().banner$setAgeLocked(lock);
+        this.getHandle().ageLocked = lock;
     }
 
     @Override
     public boolean getAgeLock() {
-        return this.getHandle().bridge$ageLocked();
+        return this.getHandle().ageLocked;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java	(date 1725177022693)
@@ -3,6 +3,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
+import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -41,8 +42,7 @@
 
     protected String title;
     protected String author;
-    // We store the pages in their raw original text representation. See SPIGOT-5063, SPIGOT-5350, SPIGOT-3206
-    // For written books (CraftMetaBookSigned) the pages are stored in Minecraft's JSON format.
+    // Stored as components and serialized as JSON. See SPIGOT-5063, SPIGOT-5350, SPIGOT-3206
     protected List<Component> pages; // null and empty are two different states internally
     protected boolean resolved;
     protected int generation;
@@ -111,13 +111,13 @@
             this.pages = new ArrayList<Component>();
             for (Object page : pages) {
                 if (page instanceof String) {
-                    this.internalAddPage(CraftChatMessage.fromJSON(CraftChatMessage.fromJSONOrStringToJSON((String) page, false, true, CraftMetaBookSigned.MAX_PAGE_LENGTH, false)));
+                    this.internalAddPage(CraftChatMessage.fromJSONOrString((String) page, false, true, CraftMetaBookSigned.MAX_PAGE_LENGTH, false));
                 }
             }
         }
 
-        this.resolved = SerializableMeta.getObject(Boolean.class, map, CraftMetaBookSigned.RESOLVED.BUKKIT, true);
-        this.generation = SerializableMeta.getObject(Integer.class, map, CraftMetaBookSigned.GENERATION.BUKKIT, true);
+        this.resolved = SerializableMeta.getBoolean(map, CraftMetaBookSigned.RESOLVED.BUKKIT);
+        this.generation = SerializableMeta.getInteger(map, CraftMetaBookSigned.GENERATION.BUKKIT);
     }
 
     @Override
@@ -358,7 +358,7 @@
         }
 
         if (this.pages != null) {
-            builder.put(CraftMetaBookSigned.BOOK_PAGES.BUKKIT, ImmutableList.copyOf(this.pages));
+            builder.put(CraftMetaBookSigned.BOOK_PAGES.BUKKIT, ImmutableList.copyOf(Lists.transform(this.pages, CraftChatMessage::toJSON)));
         }
 
         if (this.resolved) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java	(date 1725177022642)
@@ -70,20 +70,20 @@
 
     @Override
     public void startDancing() {
-        this.getHandle().banner$setForceDancing(true);
+        this.getHandle().forceDancing = true;
         this.getHandle().setDancing(true);
     }
 
     @Override
     public void stopDancing() {
-        this.getHandle().banner$setForceDancing(false);
+        this.getHandle().forceDancing = false;
         this.getHandle().jukeboxPos = null;
         this.getHandle().setJukeboxPlaying(null, false);
     }
 
     @Override
     public org.bukkit.entity.Allay duplicateAllay() {
-        Allay nmsAllay = this.getHandle().duplicateAllay0();
+        Allay nmsAllay = this.getHandle().duplicateAllay();
         return (nmsAllay != null) ? (org.bukkit.entity.Allay) nmsAllay.getBukkitEntity() : null;
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java	(date 1725177022553)
@@ -5,7 +5,6 @@
 import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
@@ -52,7 +51,6 @@
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 public class CraftChunk implements Chunk {
     private final ServerLevel worldServer;
@@ -63,7 +61,7 @@
     private static final byte[] EMPTY_LIGHT = new byte[2048];
 
     public CraftChunk(net.minecraft.world.level.chunk.LevelChunk chunk) {
-        this.worldServer = (chunk.banner$r() == null ? null :chunk.banner$r());
+        this.worldServer = chunk.level;
         this.x = chunk.getPos().x;
         this.z = chunk.getPos().z;
     }
@@ -220,7 +218,7 @@
     @Override
     public boolean isSlimeChunk() {
         // 987234911L is deterimined in EntitySlime when seeing if a slime can spawn in a chunk
-        return WorldgenRandom.seedSlimeChunk(this.getX(), this.getZ(), this.getWorld().getSeed(), this.worldServer.bridge$spigotConfig().slimeSeed).nextInt(10) == 0;
+        return WorldgenRandom.seedSlimeChunk(this.getX(), this.getZ(), this.getWorld().getSeed(), this.worldServer.spigotConfig.slimeSeed).nextInt(10) == 0;
     }
 
     @Override
@@ -318,6 +316,7 @@
 
             data.put("block_states", ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, cs[i].getStates()).getOrThrow());
             sectionBlockIDs[i] = ChunkSerializer.BLOCK_STATE_CODEC.parse(NbtOps.INSTANCE, data.getCompound("block_states")).getOrThrow(ChunkSerializer.ChunkReadException::new);
+            sectionEmpty[i] = cs[i].hasOnlyAir();
 
             LevelLightEngine lightengine = this.worldServer.getLightEngine();
             DataLayer skyLightArray = lightengine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(this.x, chunk.getSectionYFromSectionIndex(i), this.z)); // SPIGOT-7498: Convert section index
@@ -354,7 +353,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).bridge$persistentDataContainer();
+        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).persistentDataContainer;
     }
 
     @Override
@@ -377,8 +376,8 @@
     }
 
     @Override
-    public @NotNull Collection<Player> getPlayersSeeingChunk() {
-        return getWorld().getPlayersSeeingChunk(this);
+    public Collection<Player> getPlayersSeeingChunk() {
+        return this.getWorld().getPlayersSeeingChunk(this);
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java	(date 1725177022693)
@@ -10,7 +10,6 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.serialization.DynamicOps;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -191,7 +190,7 @@
         }
 
         <T> Applicator putIfAbsent(TypedDataComponent<?> component) {
-            if (!this.builder.build().isSet(component.type())) {
+            if (!this.builder.isSet(component.type())) {
                 this.builder.set(component);
             }
             return this;
@@ -319,7 +318,7 @@
         }
         this.damage = meta.damage;
         this.maxDamage = meta.maxDamage;
-        this.unhandledTags.build().copy(meta.unhandledTags.build());
+        this.unhandledTags.copy(meta.unhandledTags.build());
         this.removedTags.addAll(meta.removedTags);
         this.persistentDataContainer.putAll(meta.persistentDataContainer.getRaw());
 
@@ -518,9 +517,16 @@
         if (blockData != null) {
             Map<String, String> mapBlockData = new HashMap<>();
 
-            CompoundTag nbtBlockData = (CompoundTag) CraftNBTTagConfigSerializer.deserialize(blockData);
-            for (String key : nbtBlockData.getAllKeys()) {
-                mapBlockData.put(key, nbtBlockData.getString(key));
+            if (blockData instanceof Map) {
+                for (Entry<?, ?> entry : ((Map<?, ?>) blockData).entrySet()) {
+                    mapBlockData.put(entry.getKey().toString(), entry.getValue().toString());
+                }
+            } else {
+                // Legacy pre 1.20.5:
+                CompoundTag nbtBlockData = (CompoundTag) CraftNBTTagConfigSerializer.deserialize(blockData);
+                for (String key : nbtBlockData.getAllKeys()) {
+                    mapBlockData.put(key, nbtBlockData.getString(key));
+                }
             }
 
             this.blockData = mapBlockData;
@@ -618,15 +624,15 @@
             ByteArrayInputStream buf = new ByteArrayInputStream(Base64.getDecoder().decode(unhandled));
             try {
                 CompoundTag unhandledTag = NbtIo.readCompressed(buf, NbtAccounter.unlimitedHeap());
-                DataComponentPatch unhandledPatch = DataComponentPatch.CODEC.parse(BukkitExtraConstants.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), unhandledTag).result().get();
-                this.unhandledTags.build().copy(unhandledPatch);
+                DataComponentPatch unhandledPatch = DataComponentPatch.CODEC.parse(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), unhandledTag).result().get();
+                this.unhandledTags.copy(unhandledPatch);
 
                 for (Entry<DataComponentType<?>, Optional<?>> entry : unhandledPatch.entrySet()) {
                     // Move removed unhandled tags to dedicated removedTags
                     if (!entry.getValue().isPresent()) {
                         DataComponentType<?> key = entry.getKey();
 
-                        this.unhandledTags.build().clear(key);
+                        this.unhandledTags.clear(key);
                         this.removedTags.add(key);
                     }
                 }
@@ -869,7 +875,7 @@
         }
 
         for (DataComponentType<?> removed : this.removedTags) {
-            if (!itemTag.builder.build().isSet(removed)) {
+            if (!itemTag.builder.isSet(removed)) {
                 itemTag.builder.remove(removed);
             }
         }
@@ -1414,7 +1420,7 @@
         CraftMetaItem.Applicator tag = new CraftMetaItem.Applicator();
         this.applyToItem(tag);
         DataComponentPatch patch = tag.build();
-        Tag nbt = DataComponentPatch.CODEC.encodeStart(BukkitExtraConstants.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), patch).getOrThrow();
+        Tag nbt = DataComponentPatch.CODEC.encodeStart(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), patch).getOrThrow();
         return nbt.toString();
     }
 
@@ -1755,8 +1761,8 @@
             }
         }
 
-        if (!this.unhandledTags.build().isEmpty()) {
-            Tag unhandled = DataComponentPatch.CODEC.encodeStart(BukkitExtraConstants.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), this.unhandledTags.build()).getOrThrow(IllegalStateException::new);
+        if (!this.unhandledTags.isEmpty()) {
+            Tag unhandled = DataComponentPatch.CODEC.encodeStart(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), this.unhandledTags.build()).getOrThrow(IllegalStateException::new);
             try {
                 ByteArrayOutputStream buf = new ByteArrayOutputStream();
                 NbtIo.writeCompressed((CompoundTag) unhandled, buf);
@@ -1922,6 +1928,7 @@
                         CraftMetaMap.MAP_COLOR.TYPE,
                         CraftMetaMap.MAP_ID.TYPE,
                         CraftMetaPotion.POTION_CONTENTS.TYPE,
+                        CraftMetaShield.BASE_COLOR.TYPE,
                         CraftMetaSkull.SKULL_PROFILE.TYPE,
                         CraftMetaSkull.NOTE_BLOCK_SOUND.TYPE,
                         CraftMetaSpawnEgg.ENTITY_TAG.TYPE,
@@ -1931,7 +1938,6 @@
                         CraftMetaFirework.FIREWORKS.TYPE,
                         CraftMetaEnchantedBook.STORED_ENCHANTMENTS.TYPE,
                         CraftMetaCharge.EXPLOSION.TYPE,
-                        CraftMetaBlockState.BLOCK_ENTITY_TAG.TYPE,
                         CraftMetaKnowledgeBook.BOOK_RECIPES.TYPE,
                         CraftMetaTropicalFishBucket.ENTITY_TAG.TYPE,
                         CraftMetaTropicalFishBucket.BUCKET_ENTITY_TAG.TYPE,
Index: banner_server/src/main/java/org/bukkit/craftbukkit/block/banner/CraftPatternType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/block/banner/CraftPatternType.java b/banner_server/src/main/java/org/bukkit/craftbukkit/block/banner/CraftPatternType.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/block/banner/CraftPatternType.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/block/banner/CraftPatternType.java	(date 1725177022579)
@@ -1,25 +1,22 @@
 package org.bukkit.craftbukkit.block.banner;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.level.block.entity.BannerPattern;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.block.banner.PatternType;
 import org.bukkit.craftbukkit.CraftRegistry;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.Handleable;
 
-public class CraftPatternType {
+public class CraftPatternType implements PatternType, Handleable<BannerPattern> {
+
+    private static int count = 0;
 
     public static PatternType minecraftToBukkit(BannerPattern minecraft) {
-        Preconditions.checkArgument(minecraft != null);
-
-        net.minecraft.core.Registry<BannerPattern> registry = CraftRegistry.getMinecraftRegistry(Registries.BANNER_PATTERN);
-        PatternType bukkit = Registry.BANNER_PATTERN.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-        Preconditions.checkArgument(bukkit != null);
-
-        return bukkit;
+        return CraftRegistry.minecraftToBukkit(minecraft, Registries.BANNER_PATTERN, Registry.BANNER_PATTERN);
     }
 
     public static PatternType minecraftHolderToBukkit(Holder<BannerPattern> minecraft) {
@@ -27,10 +24,7 @@
     }
 
     public static BannerPattern bukkitToMinecraft(PatternType bukkit) {
-        Preconditions.checkArgument(bukkit != null);
-
-        return CraftRegistry.getMinecraftRegistry(Registries.BANNER_PATTERN)
-                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
     public static Holder<BannerPattern> bukkitToMinecraftHolder(PatternType bukkit) {
@@ -45,4 +39,123 @@
         throw new IllegalArgumentException("No Reference holder found for " + bukkit
                 + ", this can happen if a plugin creates its own banner pattern without properly registering it.");
     }
+
+    private final NamespacedKey key;
+    private final BannerPattern bannerPatternType;
+    private final String name;
+    private final int ordinal;
+
+    public CraftPatternType(NamespacedKey key, BannerPattern bannerPatternType) {
+        this.key = key;
+        this.bannerPatternType = bannerPatternType;
+        // For backwards compatibility, minecraft values will stile return the uppercase name without the namespace,
+        // in case plugins use for example the name as key in a config file to receive pattern type specific values.
+        // Custom pattern types will return the key with namespace. For a plugin this should look than like a new pattern type
+        // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+        if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+            this.name = key.getKey().toUpperCase(Locale.ROOT);
+        } else {
+            this.name = key.toString();
+        }
+        this.ordinal = CraftPatternType.count++;
+    }
+
+    @Override
+    public BannerPattern getHandle() {
+        return this.bannerPatternType;
+    }
+
+    @Override
+    public NamespacedKey getKey() {
+        return this.key;
+    }
+
+    @Override
+    public int compareTo(PatternType patternType) {
+        return this.ordinal - patternType.ordinal();
+    }
+
+    @Override
+    public String name() {
+        return this.name;
+    }
+
+    @Override
+    public int ordinal() {
+        return this.ordinal;
+    }
+
+    @Override
+    public String toString() {
+        // For backwards compatibility
+        return this.name();
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (this == other) {
+            return true;
+        }
+
+        if (!(other instanceof CraftPatternType)) {
+            return false;
+        }
+
+        return this.getKey().equals(((PatternType) other).getKey());
+    }
+
+    @Override
+    public int hashCode() {
+        return this.getKey().hashCode();
+    }
+
+    @Override
+    public String getIdentifier() {
+        return switch (this.name()) {
+            case "BASE" -> "b";
+            case "SQUARE_BOTTOM_LEFT" -> "bl";
+            case "SQUARE_BOTTOM_RIGHT" -> "br";
+            case "SQUARE_TOP_LEFT" -> "tl";
+            case "SQUARE_TOP_RIGHT" -> "tr";
+            case "STRIPE_BOTTOM" -> "bs";
+            case "STRIPE_TOP" -> "ts";
+            case "STRIPE_LEFT" -> "ls";
+            case "STRIPE_RIGHT" -> "rs";
+            case "STRIPE_CENTER" -> "cs";
+            case "STRIPE_MIDDLE" -> "ms";
+            case "STRIPE_DOWNRIGHT" -> "drs";
+            case "STRIPE_DOWNLEFT" -> "dls";
+            case "SMALL_STRIPES" -> "ss";
+            case "CROSS" -> "cr";
+            case "STRAIGHT_CROSS" -> "sc";
+            case "TRIANGLE_BOTTOM" -> "bt";
+            case "TRIANGLE_TOP" -> "tt";
+            case "TRIANGLES_BOTTOM" -> "bts";
+            case "TRIANGLES_TOP" -> "tts";
+            case "DIAGONAL_LEFT" -> "ld";
+            case "DIAGONAL_UP_RIGHT" -> "rd";
+            case "DIAGONAL_UP_LEFT" -> "lud";
+            case "DIAGONAL_RIGHT" -> "rud";
+            case "CIRCLE" -> "mc";
+            case "RHOMBUS" -> "mr";
+            case "HALF_VERTICAL" -> "vh";
+            case "HALF_HORIZONTAL" -> "hh";
+            case "HALF_VERTICAL_RIGHT" -> "vhr";
+            case "HALF_HORIZONTAL_BOTTOM" -> "hhb";
+            case "BORDER" -> "bo";
+            case "CURLY_BORDER" -> "cbo";
+            case "CREEPER" -> "cre";
+            case "GRADIENT" -> "gra";
+            case "GRADIENT_UP" -> "gru";
+            case "BRICKS" -> "bri";
+            case "SKULL" -> "sku";
+            case "FLOWER" -> "flo";
+            case "MOJANG" -> "moj";
+            case "GLOBE" -> "glb";
+            case "PIGLIN" -> "pig";
+            case "FLOW" -> "flw";
+            case "GUSTER" -> "gus";
+            default -> this.getKey().toString();
+        };
+    }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java	(date 1725177022553)
@@ -6,8 +6,6 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.function.Supplier;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
@@ -22,7 +20,7 @@
     public String get() {
         StringWriter value = new StringWriter();
         try {
-            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(BukkitExtraConstants.getServer().usesAuthentication()));
+            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(MinecraftServer.getServer().usesAuthentication()));
             value.append("\n   Plugins: {");
             for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 PluginDescriptionFile description = plugin.getDescription();
@@ -30,7 +28,7 @@
                 value.append(' ').append(description.getFullName()).append(legacy ? "*" : "").append(' ').append(description.getMain()).append(' ').append(Arrays.toString(description.getAuthors().toArray())).append(',');
             }
             value.append("}\n   Warnings: ").append(Bukkit.getWarningState().name());
-            value.append("\n   Reload Count: ").append(String.valueOf(BukkitExtraConstants.getServer().bridge$server().reloadCount));
+            value.append("\n   Reload Count: ").append(String.valueOf(MinecraftServer.getServer().server.reloadCount));
             value.append("\n   Threads: {");
             for (Map.Entry<Thread, ? extends Object[]> entry : Thread.getAllStackTraces().entrySet()) {
                 value.append(' ').append(entry.getKey().getState().name()).append(' ').append(entry.getKey().getName()).append(": ").append(Arrays.toString(entry.getValue())).append(',');
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java	(date 1725177022693)
@@ -8,6 +8,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import net.minecraft.core.component.DataComponentPatch;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.world.item.component.FireworkExplosion;
@@ -43,7 +44,7 @@
     static final ItemMetaKey EXPLOSIONS = new ItemMetaKey("firework-effects");
 
     private List<FireworkEffect> effects;
-    private int power;
+    private Integer power;
 
     CraftMetaFirework(CraftMetaItem meta) {
         super(meta);
@@ -78,6 +79,18 @@
         });
     }
 
+    CraftMetaFirework(Map<String, Object> map) {
+        super(map);
+
+        Integer power = SerializableMeta.getObject(Integer.class, map, CraftMetaFirework.FLIGHT.BUKKIT, true);
+        if (power != null) {
+            this.power = power;
+        }
+
+        Iterable<?> effects = SerializableMeta.getObject(Iterable.class, map, CraftMetaFirework.EXPLOSIONS.BUKKIT, true);
+        this.safelyAddEffects(effects);
+    }
+
     static FireworkEffect getEffect(FireworkExplosion explosion) {
         FireworkEffect.Builder effect = FireworkEffect.builder()
                 .flicker(explosion.hasTwinkle())
@@ -144,18 +157,6 @@
         }
     }
 
-    CraftMetaFirework(Map<String, Object> map) {
-        super(map);
-
-        Integer power = SerializableMeta.getObject(Integer.class, map, CraftMetaFirework.FLIGHT.BUKKIT, true);
-        if (power != null) {
-            this.power = power;
-        }
-
-        Iterable<?> effects = SerializableMeta.getObject(Iterable.class, map, CraftMetaFirework.EXPLOSIONS.BUKKIT, true);
-        this.safelyAddEffects(effects);
-    }
-
     @Override
     public boolean hasEffects() {
         return !(this.effects == null || this.effects.isEmpty());
@@ -185,11 +186,13 @@
         }
 
         List<FireworkExplosion> effects = new ArrayList<>();
-        for (FireworkEffect effect : this.effects) {
-            effects.add(CraftMetaFirework.getExplosion(effect));
+        if (this.hasEffects()) {
+            for (FireworkEffect effect : this.effects) {
+                effects.add(CraftMetaFirework.getExplosion(effect));
+            }
         }
 
-        itemTag.put(CraftMetaFirework.FIREWORKS, new Fireworks(this.power, effects));
+        itemTag.put(CraftMetaFirework.FIREWORKS, new Fireworks(this.getPower(), effects));
     }
 
     static IntList addColors(List<Color> colors) {
@@ -216,7 +219,7 @@
     }
 
     boolean hasPower() {
-        return this.power != 0;
+        return this.power != null;
     }
 
     @Override
@@ -227,7 +230,7 @@
 
         if (meta instanceof CraftMetaFirework that) {
 
-            return (this.hasPower() ? that.hasPower() && this.power == that.power : !that.hasPower())
+            return (Objects.equals(this.power, that.power))
                     && (this.hasEffects() ? that.hasEffects() && this.effects.equals(that.effects) : !that.hasEffects());
         }
 
@@ -337,13 +340,13 @@
 
     @Override
     public int getPower() {
-        return this.hasPower() ? this.power : 0;
+        return this.hasPower() ? this.power : 1;
     }
 
     @Override
     public void setPower(int power) {
         Preconditions.checkArgument(power >= 0, "power cannot be less than zero: %s", power);
-        Preconditions.checkArgument(power < 0x80, "power cannot be more than 127: %s", power);
+        Preconditions.checkArgument(power <= 255, "power cannot be more than 255: %s", power);
         this.power = power;
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequireCompatibility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequireCompatibility.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequireCompatibility.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequireCompatibility.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequireCompatibility.java	(date 1725177022712)
@@ -6,7 +6,7 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 public @interface RequireCompatibility {
 
     String value();
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteArgument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteArgument.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteArgument.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteArgument.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteArgument.java	(date 1725177022712)
@@ -1,9 +1,10 @@
 package org.bukkit.craftbukkit.legacy.reroute;
 
+import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 
-public record RerouteArgument(Type type, boolean injectPluginName, boolean injectPluginVersion) {
+public record RerouteArgument(Type type, Type sourceType, boolean injectPluginName, boolean injectPluginVersion, @Nullable String injectCompatibility) {
 
     /**
      * Converts the type string to the correct load opcode.
@@ -30,8 +31,8 @@
      * @return the opcode of the type
      */
     public int instruction() {
-        if (this.injectPluginName() || this.injectPluginVersion()) {
-            throw new IllegalStateException(String.format("Cannot get instruction for plugin name / version argument: %s", this));
+        if (this.injectPluginName() || this.injectPluginVersion() || this.injectCompatibility() != null) {
+            throw new IllegalStateException(String.format("Cannot get instruction for plugin name / version argument / compatibility: %s", this));
         }
 
         return this.type.getOpcode(Opcodes.ILOAD);
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java	(date 1725177022642)
@@ -1,14 +1,16 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.animal.CatVariant;
 import org.bukkit.DyeColor;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.entity.Cat;
 
 public class CraftCat extends CraftTameableAnimal implements Cat {
@@ -49,14 +51,11 @@
         this.getHandle().setCollarColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
 
-    public static class CraftType {
+    public static class CraftType implements Type, Handleable<CatVariant> {
+        private static int count = 0;
 
         public static Type minecraftToBukkit(CatVariant minecraft) {
-            Preconditions.checkArgument(minecraft != null);
-
-            net.minecraft.core.Registry<CatVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.CAT_VARIANT);
-
-            return Registry.CAT_VARIANT.get(CraftNamespacedKey.fromMinecraft(registry.getKey(minecraft)));
+            return CraftRegistry.minecraftToBukkit(minecraft, Registries.CAT_VARIANT, Registry.CAT_VARIANT);
         }
 
         public static Type minecraftHolderToBukkit(Holder<CatVariant> minecraft) {
@@ -64,24 +63,80 @@
         }
 
         public static CatVariant bukkitToMinecraft(Type bukkit) {
-            Preconditions.checkArgument(bukkit != null);
-
-            net.minecraft.core.Registry<CatVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.CAT_VARIANT);
-
-            return registry.get(CraftNamespacedKey.toMinecraft(bukkit.getKey()));
+            return CraftRegistry.bukkitToMinecraft(bukkit);
         }
 
         public static Holder<CatVariant> bukkitToMinecraftHolder(Type bukkit) {
-            Preconditions.checkArgument(bukkit != null);
+            return CraftRegistry.bukkitToMinecraftHolder(bukkit, Registries.CAT_VARIANT);
+        }
+
+        private final NamespacedKey key;
+        private final CatVariant catVariant;
+        private final String name;
+        private final int ordinal;
+
+        public CraftType(NamespacedKey key, CatVariant catVariant) {
+            this.key = key;
+            this.catVariant = catVariant;
+            // For backwards compatibility, minecraft values will still return the uppercase name without the namespace,
+            // in case plugins use for example the name as key in a config file to receive type specific values.
+            // Custom types will return the key with namespace. For a plugin this should look than like a new type
+            // (which can always be added in new minecraft versions and the plugin should therefore handle it accordingly).
+            if (NamespacedKey.MINECRAFT.equals(key.getNamespace())) {
+                this.name = key.getKey().toUpperCase(Locale.ROOT);
+            } else {
+                this.name = key.toString();
+            }
+            this.ordinal = CraftType.count++;
+        }
+
+        @Override
+        public CatVariant getHandle() {
+            return this.catVariant;
+        }
+
+        @Override
+        public NamespacedKey getKey() {
+            return this.key;
+        }
+
+        @Override
+        public int compareTo(Type variant) {
+            return this.ordinal - variant.ordinal();
+        }
+
+        @Override
+        public String name() {
+            return this.name;
+        }
+
+        @Override
+        public int ordinal() {
+            return this.ordinal;
+        }
 
-            net.minecraft.core.Registry<CatVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.CAT_VARIANT);
+        @Override
+        public String toString() {
+            // For backwards compatibility
+            return this.name();
+        }
 
-            if (registry.wrapAsHolder(CraftType.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<CatVariant> holder) {
-                return holder;
+        @Override
+        public boolean equals(Object other) {
+            if (this == other) {
+                return true;
             }
 
-            throw new IllegalArgumentException("No Reference holder found for " + bukkit
-                    + ", this can happen if a plugin creates its own cat variant with out properly registering it.");
+            if (!(other instanceof CraftType)) {
+                return false;
+            }
+
+            return this.getKey().equals(((CraftType) other).getKey());
+        }
+
+        @Override
+        public int hashCode() {
+            return this.getKey().hashCode();
         }
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java	(date 1725177022719)
@@ -54,13 +54,16 @@
 
         for (Parameter parameter : method.getParameters()) {
             Type type = Type.getType(parameter.getType());
+            int count = 0;
             boolean injectPluginName = false;
             boolean injectPluginVersion = false;
+            String injectCompatibility = null;
             if (parameter.isAnnotationPresent(InjectPluginName.class)) {
                 if (parameter.getType() != String.class) {
                     throw new RuntimeException("Plugin name argument must be of type name, but got " + parameter.getType());
                 }
                 injectPluginName = true;
+                count++;
             }
 
             if (parameter.isAnnotationPresent(InjectPluginVersion.class)) {
@@ -68,17 +71,39 @@
                     throw new RuntimeException("Plugin version argument must be of type ApiVersion, but got " + parameter.getType());
                 }
                 injectPluginVersion = true;
+                count++;
             }
 
-            if (injectPluginName && injectPluginVersion) {
+            if (parameter.isAnnotationPresent(InjectCompatibility.class)) {
+                if (parameter.getType() != boolean.class) {
+                    throw new RuntimeException("Compatibility argument must be of type boolean, but got " + parameter.getType());
+                }
+                injectCompatibility = parameter.getAnnotation(InjectCompatibility.class).value();
+                count++;
+            }
+
+            if (count > 1) {
                 // This should not happen, since we check types,
                 // and those two have different types -> it would already have failed
                 throw new RuntimeException("Wtf?");
             }
 
-            RerouteArgument argument = new RerouteArgument(type, injectPluginName, injectPluginVersion);
+            RerouteArgumentType rerouteArgumentType = parameter.getAnnotation(RerouteArgumentType.class);
+            if (count == 1 && rerouteArgumentType != null) {
+                // Why would you do this?
+                throw new RuntimeException("Wtf?");
+            }
+
+            Type sourceType;
+            if (rerouteArgumentType != null) {
+                sourceType = Type.getObjectType(rerouteArgumentType.value());
+            } else {
+                sourceType = type;
+            }
+
+            RerouteArgument argument = new RerouteArgument(type, sourceType, injectPluginName, injectPluginVersion, injectCompatibility);
             arguments.add(argument);
-            if (!injectPluginName && !injectPluginVersion) {
+            if (count == 0) {
                 sourceArguments.add(argument);
             }
         }
@@ -89,10 +114,18 @@
             sourceOwner = Type.getObjectType(rerouteStatic.value());
         } else {
             RerouteArgument argument = sourceArguments.get(0);
-            sourceOwner = argument.type();
+            sourceOwner = argument.sourceType();
             sourceArguments.remove(argument);
         }
-        Type sourceDesc = Type.getMethodType(rerouteReturn.type(), sourceArguments.stream().map(RerouteArgument::type).toArray(Type[]::new));
+
+        RerouteReturnType rerouteReturnType = method.getAnnotation(RerouteReturnType.class);
+        Type returnType;
+        if (rerouteReturnType != null) {
+            returnType = Type.getObjectType(rerouteReturnType.value());
+        } else {
+            returnType = rerouteReturn.type();
+        }
+        Type sourceDesc = Type.getMethodType(returnType, sourceArguments.stream().map(RerouteArgument::sourceType).toArray(Type[]::new));
 
         RerouteMethodName rerouteMethodName = method.getAnnotation(RerouteMethodName.class);
         String methodName;
@@ -110,13 +143,22 @@
 
         Type targetType = Type.getType(method);
 
-        boolean inBukkit = !method.isAnnotationPresent(NotInBukkit.class);
+        boolean inBukkit = !method.isAnnotationPresent(NotInBukkit.class) && !method.getDeclaringClass().isAnnotationPresent(NotInBukkit.class);
 
         String requiredCompatibility = null;
         if (method.isAnnotationPresent(RequireCompatibility.class)) {
             requiredCompatibility = method.getAnnotation(RequireCompatibility.class).value();
+        } else if (method.getDeclaringClass().isAnnotationPresent(RequireCompatibility.class)) {
+            requiredCompatibility = method.getDeclaringClass().getAnnotation(RequireCompatibility.class).value();
+        }
+
+        RequirePluginVersionData requiredPluginVersion = null;
+        if (method.isAnnotationPresent(RequirePluginVersion.class)) {
+            requiredPluginVersion = RequirePluginVersionData.create(method.getAnnotation(RequirePluginVersion.class));
+        } else if (method.getDeclaringClass().isAnnotationPresent(RequirePluginVersion.class)) {
+            requiredPluginVersion = RequirePluginVersionData.create(method.getDeclaringClass().getAnnotation(RequirePluginVersion.class));
         }
 
-        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn, inBukkit, requiredCompatibility);
+        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn, inBukkit, requiredCompatibility, requiredPluginVersion);
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java	(date 1725177022719)
@@ -7,5 +7,5 @@
 public record RerouteMethodData(String source, Type sourceDesc, Type sourceOwner, String sourceName,
                                 boolean staticReroute, Type targetType, String targetOwner, String targetName,
                                 List<RerouteArgument> arguments, RerouteReturn rerouteReturn, boolean isInBukkit,
-                                @Nullable String requiredCompatibility) {
+                                @Nullable String requiredCompatibility, @Nullable RequirePluginVersionData requiredPluginVersion) {
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java	(date 1725177022693)
@@ -23,7 +23,7 @@
             stack = new Ingredient(((RecipeChoice.MaterialChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(new ItemStack(mat)))));
         } else if (bukkit instanceof RecipeChoice.ExactChoice) {
             stack = new Ingredient(((RecipeChoice.ExactChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(mat))));
-            stack.banner$setExact(true);
+            stack.exact = true;
         } else {
             throw new IllegalArgumentException("Unknown recipe stack instance " + bukkit);
         }
@@ -43,7 +43,7 @@
             return null;
         }
 
-        if (list.bridge$exact()) {
+        if (list.exact) {
             List<org.bukkit.inventory.ItemStack> choices = new ArrayList<>(list.itemStacks.length);
             for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
                 choices.add(CraftItemStack.asBukkitCopy(i));
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java	(date 1725177022642)
@@ -37,46 +37,46 @@
 
     @Override
     public double getMaxSpeed() {
-        return this.getHandle().bridge$maxSpeed();
+        return this.getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setMaxSpeed(speed);
+            this.getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public double getOccupiedDeceleration() {
-        return this.getHandle().bridge$occupiedDeceleration();
+        return this.getHandle().occupiedDeceleration;
     }
 
     @Override
     public void setOccupiedDeceleration(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setOccupiedDeceleration(speed);
+            this.getHandle().occupiedDeceleration = speed;
         }
     }
 
     @Override
     public double getUnoccupiedDeceleration() {
-        return this.getHandle().bridge$unoccupiedDeceleration();
+        return this.getHandle().unoccupiedDeceleration;
     }
 
     @Override
     public void setUnoccupiedDeceleration(double speed) {
-        this.getHandle().banner$setUnoccupiedDeceleration(speed);
+        this.getHandle().unoccupiedDeceleration = speed;
     }
 
     @Override
     public boolean getWorkOnLand() {
-        return this.getHandle().bridge$landBoats();
+        return this.getHandle().landBoats;
     }
 
     @Override
     public void setWorkOnLand(boolean workOnLand) {
-        this.getHandle().banner$setLandBoats(workOnLand);
+        this.getHandle().landBoats = workOnLand;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java	(date 1725177022558)
@@ -187,11 +187,4 @@
         org.bukkit.loot.LootTable table = (org.bukkit.loot.LootTable) obj;
         return table.getKey().equals(this.getKey());
     }
-
-    // Paper start - satisfy equals/hashCode contract
-    @Override
-    public int hashCode() {
-        return java.util.Objects.hash(key);
-    }
-    // Paper end
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBogged.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBogged.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBogged.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBogged.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftBogged.java	(date 1725177022642)
@@ -24,4 +24,14 @@
     public Skeleton.SkeletonType getSkeletonType() {
         return Skeleton.SkeletonType.BOGGED;
     }
+
+    @Override
+    public boolean isSheared() {
+        return this.getHandle().isSheared();
+    }
+
+    @Override
+    public void setSheared(boolean flag) {
+        this.getHandle().setSheared(flag);
+    }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/NotInBukkit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/NotInBukkit.java b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/NotInBukkit.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/NotInBukkit.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/NotInBukkit.java	(date 1725177022712)
@@ -6,6 +6,6 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 public @interface NotInBukkit {
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java	(date 1725177022558)
@@ -379,7 +379,7 @@
         net.minecraft.world.entity.Entity entity = this.createEntity(location, clazz, true);
 
         if (!this.isNormalWorld()) {
-            entity.banner$setGeneration(true);
+            entity.generation = true;
         }
 
         return (T) entity.getBukkitEntity();
@@ -437,7 +437,7 @@
         }
 
         if (!this.isNormalWorld()) {
-            entity.banner$setGeneration(true);
+            entity.generation = true;
         }
 
         if (function != null) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java	(date 1725177022705)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -24,6 +23,6 @@
 
     @Override
     public void addToCraftingManager() {
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true))));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java b/banner_server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java	(date 1725177022684)
@@ -46,9 +46,6 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        /*
-        return this.handle.persistentDataContainer;*/
-        return null;
-        // Banner TODO
+        return this.handle.persistentDataContainer;
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java	(date 1725177022705)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -28,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java	(date 1725177022705)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -27,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java	(date 1725177022649)
@@ -5,8 +5,6 @@
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.entity.CreeperPowerEvent;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class CraftCreeper extends CraftMonster implements Creeper {
 
@@ -24,7 +22,7 @@
         CreeperPowerEvent.PowerCause cause = powered ? CreeperPowerEvent.PowerCause.SET_ON : CreeperPowerEvent.PowerCause.SET_OFF;
 
         // only call event when we are not in world generation
-        if (this.getHandle().bridge$generation() || !this.callPowerEvent(cause)) {
+        if (this.getHandle().generation || !this.callPowerEvent(cause)) {
             this.getHandle().setPowered(powered);
         }
     }
@@ -79,10 +77,9 @@
 
     @Override
     public void ignite(Entity entity) {
-        // Banner TODO fixme
         Preconditions.checkNotNull(entity, "entity cannot be null");
-       // getHandle().entityIgniter = ((CraftEntity) entity).getHandle();
-        getHandle().ignite();
+        this.getHandle().entityIgniter = ((CraftEntity) entity).getHandle();
+        this.getHandle().ignite();
     }
 
     @Override
@@ -91,10 +88,8 @@
     }
 
     @Override
-    public @Nullable Entity getIgniter() {
-        // Banner TODO fixme
-       // return (getHandle().entityIgniter != null) ? getHandle().entityIgniter.getBukkitEntity() : null;
-        return null;
+    public Entity getIgniter() {
+        return (this.getHandle().entityIgniter != null) ? this.getHandle().entityIgniter.getBukkitEntity() : null;
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java	(date 1725177022704)
@@ -3,8 +3,6 @@
 import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Objects;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeHolder;
@@ -55,7 +53,7 @@
         Map<Character, Ingredient> data = Maps.transformValues(ingred, (bukkit) -> this.toNMS(bukkit, false));
 
         ShapedRecipePattern pattern = ShapedRecipePattern.of(data, shape);
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), pattern, CraftItemStack.asNMSCopy(this.getResult()))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), pattern, CraftItemStack.asNMSCopy(this.getResult()))));
     }
 
     private static String[] replaceUndefinedIngredientsWithEmpty(String[] shape, Map<Character, org.bukkit.inventory.RecipeChoice> ingredients) {
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftServer.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftServer.java	(date 1725177022558)
@@ -2,14 +2,12 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
-import com.mohistmc.banner.BannerMCStart;
-import com.mohistmc.banner.BannerServer;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -64,11 +62,14 @@
 import net.minecraft.server.ReloadableServerRegistries;
 import net.minecraft.server.WorldLoader;
 import net.minecraft.server.bossevents.CustomBossEvent;
+import net.minecraft.server.commands.ReloadCommand;
 import net.minecraft.server.dedicated.DedicatedPlayerList;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.server.dedicated.DedicatedServerSettings;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.server.players.IpBanListEntry;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.ServerOpListEntry;
@@ -113,9 +114,26 @@
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec3;
-import org.bukkit.*;
+import org.bukkit.BanList;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.GameMode;
+import org.bukkit.Keyed;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Registry;
+import org.bukkit.Server;
+import org.bukkit.ServerLinks;
+import org.bukkit.ServerTickManager;
+import org.bukkit.StructureType;
+import org.bukkit.UnsafeValues;
 import org.bukkit.Warning.WarningState;
+import org.bukkit.World;
 import org.bukkit.World.Environment;
+import org.bukkit.WorldBorder;
+import org.bukkit.WorldCreator;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
@@ -179,7 +197,15 @@
 import org.bukkit.craftbukkit.tag.CraftEntityTag;
 import org.bukkit.craftbukkit.tag.CraftFluidTag;
 import org.bukkit.craftbukkit.tag.CraftItemTag;
-import org.bukkit.craftbukkit.util.*;
+import org.bukkit.craftbukkit.util.ApiVersion;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftIconCache;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.CraftSpawnCategory;
+import org.bukkit.craftbukkit.util.DatFileFilter;
+import org.bukkit.craftbukkit.util.Versioning;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -187,6 +213,7 @@
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.event.server.BroadcastMessageEvent;
+import org.bukkit.event.server.ServerLoadEvent;
 import org.bukkit.event.server.TabCompleteEvent;
 import org.bukkit.event.world.WorldLoadEvent;
 import org.bukkit.event.world.WorldUnloadEvent;
@@ -228,19 +255,20 @@
 import org.bukkit.plugin.messaging.Messenger;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.profile.PlayerProfile;
+import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
-import com.mohistmc.org.yaml.snakeyaml .LoaderOptions;
-import com.mohistmc.org.yaml.snakeyaml .Yaml;
-import com.mohistmc.org.yaml.snakeyaml .constructor.SafeConstructor;
-import com.mohistmc.org.yaml.snakeyaml .error.MarkedYAMLException;
+import org.yaml.snakeyaml.LoaderOptions;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
+import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 
 public final class CraftServer implements Server {
-    private final String serverName = "Banner";
+    private final String serverName = "CraftBukkit";
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -275,8 +303,9 @@
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
     public boolean ignoreVanillaPermissions = false;
-    private List<CraftPlayer> playerView;
+    private final List<CraftPlayer> playerView;
     public int reloadCount;
+    public Set<String> activeCompatibilities = Collections.emptySet();
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -294,7 +323,7 @@
                 return player.getBukkitEntity();
             }
         }));
-        this.serverVersion = BannerMCStart.getVersion();
+        this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
         this.structureManager = new CraftStructureManager(console.getStructureManager(), console.registryAccess());
         this.dataPackManager = new CraftDataPackManager(this.getServer().getPackRepository());
         this.serverTickManager = new CraftServerTickManager(console.tickRateManager());
@@ -348,11 +377,12 @@
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
         this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
         this.overrideSpawnLimits();
-        BukkitExtraConstants.bridge$autosavePeriod = this.configuration.getInt("ticks-per.autosave");
+        console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
-        BukkitExtraConstants.PLUGIN.timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
+        TicketType.PLUGIN.timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
         this.minimumAPI = ApiVersion.getOrCreateVersion(this.configuration.getString("settings.minimum-api"));
         this.loadIcon();
+        this.loadCompatibilities();
 
         // Set map color cache
         if (this.configuration.getBoolean("settings.use-map-color-cache")) {
@@ -365,11 +395,11 @@
     }
 
     private File getConfigFile() {
-        return (File) this.console.bridge$options().valueOf("bukkit-settings");
+        return (File) this.console.options.valueOf("bukkit-settings");
     }
 
     private File getCommandsConfigFile() {
-        return (File) this.console.bridge$options().valueOf("commands-settings");
+        return (File) this.console.options.valueOf("commands-settings");
     }
 
     private void overrideSpawnLimits() {
@@ -396,10 +426,37 @@
         }
     }
 
+    private void loadCompatibilities() {
+        ConfigurationSection compatibilities = this.configuration.getConfigurationSection("settings.compatibility");
+        if (compatibilities == null) {
+            this.activeCompatibilities = Collections.emptySet();
+            return;
+        }
+
+        this.activeCompatibilities = compatibilities
+                .getKeys(false)
+                .stream()
+                .filter(compatibilities::getBoolean)
+                .collect(Collectors.toSet());
+
+        if (!this.activeCompatibilities.isEmpty()) {
+            this.logger.info("Using following compatibilities: `" + Joiner.on("`, `").join(this.activeCompatibilities) + "`, this will affect performance and other plugins behavior.");
+            this.logger.info("Only use when necessary and prefer updating plugins if possible.");
+        }
+
+        if (this.activeCompatibilities.contains("enum-compatibility-mode")) {
+            this.getLogger().warning("Loading plugins in enum compatibility mode. This will affect plugin performance. Use only as a transition period or when absolutely necessary.");
+        } else if (System.getProperty("RemoveEnumBanner") == null) {
+            // TODO 2024-06-16: Remove in newer version
+            this.getLogger().info("*** This version of Spigot contains changes to some enums. If you notice that plugins no longer work after updating, please report this to the developers of those plugins first. ***");
+            this.getLogger().info("*** If you cannot update those plugins, you can try setting `settings.compatibility.enum-compatibility-mode` to `true` in `bukkit.yml`. ***");
+        }
+    }
+
     public void loadPlugins() {
         this.pluginManager.registerInterface(JavaPluginLoader.class);
 
-        File pluginFolder = (File) this.console.bridge$options().valueOf("plugins");
+        File pluginFolder = (File) this.console.options.valueOf("plugins");
 
         if (pluginFolder.exists()) {
             Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder);
@@ -451,7 +508,7 @@
     }
 
     private void setVanillaCommands(boolean first) { // Spigot
-        Commands dispatcher = this.console.bridge$getVanillaCommands();
+        Commands dispatcher = this.console.vanillaCommandDispatcher;
 
         // Build a list of all Vanilla commands and create wrappers
         for (CommandNode<CommandSourceStack> cmd : dispatcher.getDispatcher().getRoot().getChildren()) {
@@ -469,11 +526,11 @@
     }
 
     public void syncCommands() {
-        // Clear existing commands // Banner - do not clear
-        Commands dispatcher = console.resources.managers().commands;
+        // Clear existing commands
+        Commands dispatcher = this.console.resources.managers().commands = new Commands();
 
         // Register all commands, vanilla ones will be using the old dispatcher references
-        for (Map.Entry<String, Command> entry : commandMap.getKnownCommands().entrySet()) {
+        for (Map.Entry<String, Command> entry : this.commandMap.getKnownCommands().entrySet()) {
             String label = entry.getKey();
             Command command = entry.getValue();
 
@@ -495,7 +552,7 @@
         }
 
         // Refresh commands
-        for (ServerPlayer player : getHandle().players) {
+        for (ServerPlayer player : this.getHandle().players) {
             dispatcher.sendCommands(player);
         }
     }
@@ -536,14 +593,6 @@
 
     @Override
     public List<CraftPlayer> getOnlinePlayers() {
-        // Banner start - refresh online players
-        this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<ServerPlayer, CraftPlayer>() {
-            @Override
-            public CraftPlayer apply(ServerPlayer player) {
-                return player.getBukkitEntity();
-            }
-        }));
-        // Banner end
         return this.playerView;
     }
 
@@ -558,10 +607,10 @@
             return found;
         }
 
-        String lowerName = name.toLowerCase(java.util.Locale.ENGLISH);
+        String lowerName = name.toLowerCase(Locale.ROOT);
         int delta = Integer.MAX_VALUE;
         for (Player player : this.getOnlinePlayers()) {
-            if (player.getName().toLowerCase(java.util.Locale.ENGLISH).startsWith(lowerName)) {
+            if (player.getName().toLowerCase(Locale.ROOT).startsWith(lowerName)) {
                 int curDelta = Math.abs(player.getName().length() - lowerName.length());
                 if (curDelta < delta) {
                     found = player;
@@ -615,7 +664,7 @@
                 matchedPlayers.add(iterPlayer);
                 break;
             }
-            if (iterPlayerName.toLowerCase(java.util.Locale.ENGLISH).contains(partialName.toLowerCase(java.util.Locale.ENGLISH))) {
+            if (iterPlayerName.toLowerCase(Locale.ROOT).contains(partialName.toLowerCase(Locale.ROOT))) {
                 // Partial match
                 matchedPlayers.add(iterPlayer);
             }
@@ -759,7 +808,7 @@
 
     @Override
     public File getUpdateFolderFile() {
-        return new File((File) this.console.bridge$options().valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
+        return new File((File) this.console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
     }
 
     @Override
@@ -882,12 +931,90 @@
 
     @Override
     public void reload() {
-        BannerServer.LOGGER.warn("For your server security, Bukkit reloading is not supported by Banner.");
+        this.reloadCount++;
+        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
+        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
+
+        this.console.settings = new DedicatedServerSettings(this.console.options);
+        DedicatedServerProperties config = this.console.settings.getProperties();
+
+        this.console.setPvpAllowed(config.pvp);
+        this.console.setFlightAllowed(config.allowFlight);
+        this.console.setMotd(config.motd);
+        this.overrideSpawnLimits();
+        this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
+        TicketType.PLUGIN.timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
+        this.minimumAPI = ApiVersion.getOrCreateVersion(this.configuration.getString("settings.minimum-api"));
+        this.printSaveWarning = false;
+        this.console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
+        this.loadIcon();
+        this.loadCompatibilities();
+
+        try {
+            this.playerList.getIpBans().load();
+        } catch (IOException ex) {
+            this.logger.log(Level.WARNING, "Failed to load banned-ips.json, " + ex.getMessage());
+        }
+        try {
+            this.playerList.getBans().load();
+        } catch (IOException ex) {
+            this.logger.log(Level.WARNING, "Failed to load banned-players.json, " + ex.getMessage());
+        }
+
+        org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
+        for (ServerLevel world : this.console.getAllLevels()) {
+            world.serverLevelData.setDifficulty(config.difficulty);
+            world.setSpawnSettings(config.spawnMonsters, config.spawnAnimals);
+
+            for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+                if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+                    long ticksPerCategorySpawn = this.getTicksPerSpawns(spawnCategory);
+                    if (ticksPerCategorySpawn < 0) {
+                        world.ticksPerSpawnCategory.put(spawnCategory, CraftSpawnCategory.getDefaultTicksPerSpawn(spawnCategory));
+                    } else {
+                        world.ticksPerSpawnCategory.put(spawnCategory, ticksPerCategorySpawn);
+                    }
+                }
+            }
+            world.spigotConfig.init(); // Spigot
+        }
+
+        this.pluginManager.clearPlugins();
+        this.commandMap.clearCommands();
+        this.reloadData();
+        org.spigotmc.SpigotConfig.registerCommands(); // Spigot
+        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+
+        int pollCount = 0;
+
+        // Wait for at most 2.5 seconds for plugins to close their threads
+        while (pollCount < 50 && this.getScheduler().getActiveWorkers().size() > 0) {
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {}
+            pollCount++;
+        }
+
+        List<BukkitWorker> overdueWorkers = this.getScheduler().getActiveWorkers();
+        for (BukkitWorker worker : overdueWorkers) {
+            Plugin plugin = worker.getOwner();
+            this.getLogger().log(Level.SEVERE, String.format(
+                "Nag author(s): '%s' of '%s' about the following: %s",
+                plugin.getDescription().getAuthors(),
+                plugin.getDescription().getFullName(),
+                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
+            ));
+        }
+        this.loadPlugins();
+        this.enablePlugins(PluginLoadOrder.STARTUP);
+        this.enablePlugins(PluginLoadOrder.POSTWORLD);
+        this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
     }
 
     @Override
     public void reloadData() {
-        BukkitExtraConstants.reload(this.console);
+        ReloadCommand.reload(this.console);
     }
 
     private void loadIcon() {
@@ -1060,7 +1187,7 @@
         boolean hardcore = creator.hardcore();
 
         PrimaryLevelData worlddata;
-        WorldLoader.DataLoadContext worldloader_a = this.console.bridge$worldLoader();
+        WorldLoader.DataLoadContext worldloader_a = this.console.worldLoader;
         RegistryAccess.Frozen iregistrycustom_dimension = worldloader_a.datapackDimensions();
         net.minecraft.core.Registry<LevelStem> iregistry = iregistrycustom_dimension.registryOrThrow(Registries.LEVEL_STEM);
         if (dynamic != null) {
@@ -1085,12 +1212,12 @@
             iregistrycustom_dimension = worlddimensions_b.dimensionsRegistryAccess();
         }
         iregistry = iregistrycustom_dimension.registryOrThrow(Registries.LEVEL_STEM);
-        worlddata.banner$setCustomDimensions(iregistry);
+        worlddata.customDimensions = iregistry;
         worlddata.checkName(name);
         worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
 
-        if (this.console.bridge$options().has("forceUpgrade")) {
-            net.minecraft.server.Main.forceUpgrade(worldSession, DataFixers.getDataFixer(), this.console.bridge$options().has("eraseCache"), () -> true, iregistrycustom_dimension, this.console.bridge$options().has("recreateRegionFiles"));
+        if (this.console.options.has("forceUpgrade")) {
+            net.minecraft.server.Main.forceUpgrade(worldSession, DataFixers.getDataFixer(), this.console.options.has("eraseCache"), () -> true, iregistrycustom_dimension, this.console.options.has("recreateRegionFiles"));
         }
 
         long j = BiomeManager.obfuscateSeed(creator.seed());
@@ -1109,17 +1236,17 @@
         } else if (name.equals(levelName + "_the_end")) {
             worldKey = net.minecraft.world.level.Level.END;
         } else {
-            worldKey = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace(name.toLowerCase(java.util.Locale.ENGLISH)));
+            worldKey = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace(name.toLowerCase(Locale.ROOT)));
         }
 
         // If set to not keep spawn in memory (changed from default) then adjust rule accordingly
         if (!creator.keepSpawnInMemory()) {
             worlddata.getGameRules().getRule(GameRules.RULE_SPAWN_CHUNK_RADIUS).set(0, null);
         }
-        ServerLevel internal = new ServerLevel(console, console.executor, worldSession, worlddata, worldKey, worlddimension, getServer().progressListenerFactory.create(11),
-                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, console.overworld().getRandomSequences());
+        ServerLevel internal = (ServerLevel) new ServerLevel(this.console, this.console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(worlddata.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS)),
+                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, this.console.overworld().getRandomSequences(), creator.environment(), generator, biomeProvider);
 
-        if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
+        if (!(this.worlds.containsKey(name.toLowerCase(Locale.ROOT)))) {
             return null;
         }
 
@@ -1174,12 +1301,12 @@
 
             handle.getChunkSource().close(save);
             handle.entityManager.close(save); // SPIGOT-6722: close entityManager
-            handle.bridge$convertable().close();
+            handle.convertable.close();
         } catch (Exception ex) {
             this.getLogger().log(Level.SEVERE, null, ex);
         }
 
-        this.worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
+        this.worlds.remove(world.getName().toLowerCase(Locale.ROOT));
         this.console.removeLevel(handle);
         return true;
     }
@@ -1192,7 +1319,7 @@
     public World getWorld(String name) {
         Preconditions.checkArgument(name != null, "name cannot be null");
 
-        return this.worlds.get(name.toLowerCase(java.util.Locale.ENGLISH));
+        return this.worlds.get(name.toLowerCase(Locale.ROOT));
     }
 
     @Override
@@ -1211,7 +1338,7 @@
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
             return;
         }
-        this.worlds.put(world.getName().toLowerCase(java.util.Locale.ENGLISH), world);
+        this.worlds.put(world.getName().toLowerCase(Locale.ROOT), world);
     }
 
     @Override
@@ -1225,7 +1352,7 @@
     }
 
     public ConsoleReader getReader() {
-        return this.console.bridge$reader();
+        return this.console.reader;
     }
 
     @Override
@@ -1623,7 +1750,7 @@
         if (worldmap == null) {
             return null;
         }
-        return worldmap.bridge$mapView();
+        return worldmap.mapView;
     }
 
     @Override
@@ -1634,7 +1761,7 @@
         // creates a new map at world spawn with the scale of 3, with out tracking position and unlimited tracking
         BlockPos spawn = minecraftWorld.getLevelData().getSpawnPos();
         MapId newId = MapItem.createNewSavedData(minecraftWorld, spawn.getX(), spawn.getZ(), 3, false, false, minecraftWorld.dimension());
-        return minecraftWorld.getMapData(newId).bridge$mapView();
+        return minecraftWorld.getMapData(newId).mapView;
     }
 
     @Override
@@ -1873,7 +2000,7 @@
 
     @Override
     public ConsoleCommandSender getConsoleSender() {
-        return this.console.bridge$console();
+        return this.console.console;
     }
 
     public EntityMetadataStore getEntityMetadata() {
@@ -2139,7 +2266,7 @@
     }
 
     public void checkSaveState() {
-        if (this.playerCommandState || this.printSaveWarning || BukkitExtraConstants.bridge$autosavePeriod <= 0) {
+        if (this.playerCommandState || this.printSaveWarning || this.console.autosavePeriod <= 0) {
             return;
         }
         this.printSaveWarning = true;
@@ -2271,7 +2398,7 @@
         Preconditions.checkArgument(key != null, "NamespacedKey key cannot be null");
 
         AdvancementHolder advancement = this.console.getAdvancements().get(CraftNamespacedKey.toMinecraft(key));
-        return (advancement == null) ? null : advancement.bridge$bukkit();
+        return (advancement == null) ? null : advancement.toBukkit();
     }
 
     @Override
@@ -2279,7 +2406,7 @@
         return Iterators.unmodifiableIterator(Iterators.transform(this.console.getAdvancements().getAllAdvancements().iterator(), new Function<AdvancementHolder, org.bukkit.advancement.Advancement>() {
             @Override
             public org.bukkit.advancement.Advancement apply(AdvancementHolder advancement) {
-                return advancement.bridge$bukkit();
+                return advancement.toBukkit();
             }
         }));
     }
@@ -2306,7 +2433,7 @@
     public BlockData createBlockData(String data) throws IllegalArgumentException {
         Preconditions.checkArgument(data != null, "data cannot be null");
 
-        return this.createBlockData(null, data);
+        return this.createBlockData((Material) null, data);
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java	(date 1725177022705)
@@ -1,8 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
 import java.util.List;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.NonNullList;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -47,6 +45,6 @@
             data.set(i, this.toNMS(ingred.get(i), true));
         }
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java	(date 1725177022558)
@@ -8,7 +8,6 @@
 import java.util.stream.Stream;
 import net.minecraft.core.Holder;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import org.bukkit.GameEvent;
@@ -21,9 +20,14 @@
 import org.bukkit.attribute.Attribute;
 import org.bukkit.block.Biome;
 import org.bukkit.block.BlockType;
+import org.bukkit.block.banner.PatternType;
 import org.bukkit.craftbukkit.block.CraftBlockType;
+import org.bukkit.craftbukkit.block.banner.CraftPatternType;
 import org.bukkit.craftbukkit.damage.CraftDamageType;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.entity.CraftCat;
+import org.bukkit.craftbukkit.entity.CraftFrog;
+import org.bukkit.craftbukkit.entity.CraftVillager;
 import org.bukkit.craftbukkit.entity.CraftWolf;
 import org.bukkit.craftbukkit.generator.structure.CraftStructure;
 import org.bukkit.craftbukkit.generator.structure.CraftStructureType;
@@ -31,19 +35,24 @@
 import org.bukkit.craftbukkit.inventory.trim.CraftTrimMaterial;
 import org.bukkit.craftbukkit.inventory.trim.CraftTrimPattern;
 import org.bukkit.craftbukkit.legacy.FieldRename;
+import org.bukkit.craftbukkit.map.CraftMapCursor;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.craftbukkit.util.ApiVersion;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.damage.DamageType;
 import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Cat;
 import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Frog;
+import org.bukkit.entity.Villager;
 import org.bukkit.entity.Wolf;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.generator.structure.StructureType;
 import org.bukkit.inventory.ItemType;
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.bukkit.inventory.meta.trim.TrimPattern;
+import org.bukkit.map.MapCursor;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
@@ -135,7 +144,13 @@
             return new CraftRegistry<>(Structure.class, registryHolder.registryOrThrow(Registries.STRUCTURE), CraftStructure::new, FieldRename.NONE);
         }
         if (bukkitClass == StructureType.class) {
-            return new CraftRegistry<>(StructureType.class, BuiltInRegistries.STRUCTURE_TYPE, CraftStructureType::new, FieldRename.NONE);
+            return new CraftRegistry<>(StructureType.class, registryHolder.registryOrThrow(Registries.STRUCTURE_TYPE), CraftStructureType::new, FieldRename.NONE);
+        }
+        if (bukkitClass == Villager.Type.class) {
+            return new CraftRegistry<>(Villager.Type.class, registryHolder.registryOrThrow(Registries.VILLAGER_TYPE), CraftVillager.CraftType::new, FieldRename.NONE);
+        }
+        if (bukkitClass == Villager.Profession.class) {
+            return new CraftRegistry<>(Villager.Profession.class, registryHolder.registryOrThrow(Registries.VILLAGER_PROFESSION), CraftVillager.CraftProfession::new, FieldRename.NONE);
         }
         if (bukkitClass == TrimMaterial.class) {
             return new CraftRegistry<>(TrimMaterial.class, registryHolder.registryOrThrow(Registries.TRIM_MATERIAL), CraftTrimMaterial::new, FieldRename.NONE);
@@ -158,6 +173,18 @@
         if (bukkitClass == ItemType.class) {
             return new CraftRegistry<>(ItemType.class, registryHolder.registryOrThrow(Registries.ITEM), CraftItemType::new, FieldRename.NONE);
         }
+        if (bukkitClass == Frog.Variant.class) {
+            return new CraftRegistry<>(Frog.Variant.class, registryHolder.registryOrThrow(Registries.FROG_VARIANT), CraftFrog.CraftVariant::new, FieldRename.NONE);
+        }
+        if (bukkitClass == Cat.Type.class) {
+            return new CraftRegistry<>(Cat.Type.class, registryHolder.registryOrThrow(Registries.CAT_VARIANT), CraftCat.CraftType::new, FieldRename.NONE);
+        }
+        if (bukkitClass == MapCursor.Type.class) {
+            return new CraftRegistry<>(MapCursor.Type.class, registryHolder.registryOrThrow(Registries.MAP_DECORATION_TYPE), CraftMapCursor.CraftType::new, FieldRename.NONE);
+        }
+        if (bukkitClass == PatternType.class) {
+            return new CraftRegistry<>(PatternType.class, registryHolder.registryOrThrow(Registries.BANNER_PATTERN), CraftPatternType::new, FieldRename.NONE);
+        }
 
         return null;
     }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java	(date 1725177022705)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -26,6 +25,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: banner_server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java	(date 1725177022558)
@@ -4,7 +4,6 @@
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -43,6 +42,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.Ticket;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.SortedArraySet;
@@ -280,7 +280,7 @@
     public boolean unloadChunkRequest(int x, int z) {
         org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
         if (this.isChunkLoaded(x, z)) {
-            this.world.getChunkSource().removeRegionTicket(BukkitExtraConstants.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
+            this.world.getChunkSource().removeRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
         }
 
         return true;
@@ -352,16 +352,16 @@
     public Collection<Player> getPlayersSeeingChunk(Chunk chunk) {
         Preconditions.checkArgument(chunk != null, "chunk cannot be null");
 
-        return getPlayersSeeingChunk(chunk.getX(), chunk.getZ());
+        return this.getPlayersSeeingChunk(chunk.getX(), chunk.getZ());
     }
 
     @Override
     public Collection<Player> getPlayersSeeingChunk(int x, int z) {
-        if (!isChunkLoaded(x, z)) {
+        if (!this.isChunkLoaded(x, z)) {
             return Collections.emptySet();
         }
 
-        List<ServerPlayer> players = world.getChunkSource().chunkMap.getPlayers(new ChunkPos(x, z), false);
+        List<ServerPlayer> players = this.world.getChunkSource().chunkMap.getPlayers(new ChunkPos(x, z), false);
 
         if (players.isEmpty()) {
             return Collections.emptySet();
@@ -390,7 +390,7 @@
         }
 
         if (chunk instanceof net.minecraft.world.level.chunk.LevelChunk) {
-            this.world.getChunkSource().addRegionTicket(BukkitExtraConstants.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
+            this.world.getChunkSource().addRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
             return true;
         }
 
@@ -418,7 +418,7 @@
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
 
-        if (chunkDistanceManager.addRegionTicketAtDistance(BukkitExtraConstants.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
+        if (chunkDistanceManager.addRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
             this.getChunkAt(x, z); // ensure loaded
             return true;
         }
@@ -431,7 +431,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        return chunkDistanceManager.removeRegionTicketAtDistance(BukkitExtraConstants.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
+        return chunkDistanceManager.removeRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -439,7 +439,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        chunkDistanceManager.removeAllTicketsFor(BukkitExtraConstants.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
+        chunkDistanceManager.removeAllTicketsFor(TicketType.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -453,7 +453,7 @@
 
         ImmutableList.Builder<Plugin> ret = ImmutableList.builder();
         for (Ticket<?> ticket : tickets) {
-            if (ticket.getType() == BukkitExtraConstants.PLUGIN_TICKET) {
+            if (ticket.getType() == TicketType.PLUGIN_TICKET) {
                 ret.add((Plugin) ticket.key);
             }
         }
@@ -472,7 +472,7 @@
 
             Chunk chunk = null;
             for (Ticket<?> ticket : tickets) {
-                if (ticket.getType() != BukkitExtraConstants.PLUGIN_TICKET) {
+                if (ticket.getType() != TicketType.PLUGIN_TICKET) {
                     continue;
                 }
 
@@ -624,13 +624,13 @@
 
     @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
-        this.world.banner$setCaptureTreeGeneration(true);
-        this.world.banner$setCaptureBlockStates(true);
+        this.world.captureTreeGeneration = true;
+        this.world.captureBlockStates = true;
         boolean grownTree = this.generateTree(loc, type);
-        this.world.banner$setCaptureBlockStates(false);
-        this.world.banner$setCaptureTreeGeneration(false);
+        this.world.captureBlockStates = false;
+        this.world.captureTreeGeneration = false;
         if (grownTree) { // Copy block data to delegate
-            for (BlockState blockstate : this.world.bridge$capturedBlockStates().values()) {
+            for (BlockState blockstate : this.world.capturedBlockStates.values()) {
                 BlockPos position = ((CraftBlockState) blockstate).getPosition();
                 net.minecraft.world.level.block.state.BlockState oldBlock = this.world.getBlockState(position);
                 int flag = ((CraftBlockState) blockstate).getFlag();
@@ -638,10 +638,10 @@
                 net.minecraft.world.level.block.state.BlockState newBlock = this.world.getBlockState(position);
                 this.world.notifyAndUpdatePhysics(position, null, oldBlock, newBlock, newBlock, flag, 512);
             }
-            this.world.bridge$capturedBlockStates().clear();
+            this.world.capturedBlockStates.clear();
             return true;
         } else {
-            this.world.bridge$capturedBlockStates().clear();
+            this.world.capturedBlockStates.clear();
             return false;
         }
     }
@@ -653,7 +653,7 @@
 
     @Override
     public UUID getUID() {
-        return this.world.bridge$uuid();
+        return this.world.uuid;
     }
 
     @Override
@@ -730,14 +730,13 @@
         net.minecraft.world.level.Level.ExplosionInteraction explosionType;
         if (!breakBlocks) {
             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.NONE; // Don't break blocks
-        /*} else if (source == null) {
-             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.STANDARD; // Break blocks, don't decay drops // Banner - TODO fix me
-        */
+        } else if (source == null) {
+            explosionType = net.minecraft.world.level.Level.ExplosionInteraction.STANDARD; // Break blocks, don't decay drops
         } else {
             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.MOB; // Respect mobGriefing gamerule
         }
 
-        return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, explosionType).bridge$wasCanceled();
+        return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, explosionType).wasCanceled;
     }
 
     @Override
@@ -1093,7 +1092,7 @@
 
     @Override
     public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().bridge$serverLevelDataCB().setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
+        this.getHandle().serverLevelData.setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
     }
 
     @Override
@@ -1181,12 +1180,12 @@
 
     @Override
     public boolean getPVP() {
-        return this.world.bridge$pvpMode();
+        return this.world.pvpMode;
     }
 
     @Override
     public void setPVP(boolean pvp) {
-        this.world.banner$setPvpMode(pvp);
+        this.world.pvpMode = pvp;
     }
 
     public void playEffect(Player player, Effect effect, int data) {
@@ -1250,7 +1249,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isBlock(), "Material.%s must be a block", material);
 
-        FallingBlockEntity entity = BukkitExtraConstants.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1259,7 +1258,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
 
-        FallingBlockEntity entity = BukkitExtraConstants.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1378,7 +1377,7 @@
 
     @Override
     public File getWorldFolder() {
-        return this.world.bridge$convertable().getLevelPath(LevelResource.ROOT).toFile().getParentFile();
+        return this.world.convertable.getLevelPath(LevelResource.ROOT).toFile().getParentFile();
     }
 
     @Override
@@ -1408,7 +1407,7 @@
 
     @Override
     public boolean canGenerateStructures() {
-        return this.world.bridge$serverLevelDataCB().worldGenOptions().generateStructures();
+        return this.world.serverLevelData.worldGenOptions().generateStructures();
     }
 
     @Override
@@ -1418,7 +1417,7 @@
 
     @Override
     public void setHardcore(boolean hardcore) {
-        this.world.bridge$serverLevelDataCB().settings.hardcore = hardcore;
+        this.world.serverLevelData.settings.hardcore = hardcore;
     }
 
     @Override
@@ -1498,7 +1497,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        this.world.bridge$ticksPerSpawnCategory().put(spawnCategory, (long) ticksPerCategorySpawn);
+        this.world.ticksPerSpawnCategory.put(spawnCategory, (long) ticksPerCategorySpawn);
     }
 
     @Override
@@ -1506,7 +1505,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        return this.world.bridge$ticksPerSpawnCategory().getLong(spawnCategory);
+        return this.world.ticksPerSpawnCategory.getLong(spawnCategory);
     }
 
     @Override
@@ -1765,7 +1764,7 @@
 
         GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule));
         handle.deserialize(value);
-        handle.onChanged(this.getHandle().getServer());// Banner - do not pre world
+        handle.onChanged(this.getHandle());
         return true;
     }
 
@@ -1802,7 +1801,7 @@
 
         GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName()));
         handle.deserialize(newValue.toString());
-        handle.onChanged(this.getHandle().getServer());// Banner - do not pre world
+        handle.onChanged(this.getHandle());
         return true;
     }
 
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java	(date 1725177022705)
@@ -2,8 +2,6 @@
 
 import java.util.Iterator;
 import java.util.Map;
-
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeType;
@@ -13,7 +11,7 @@
     private final Iterator<Map.Entry<RecipeType<?>, RecipeHolder<?>>> recipes;
 
     public RecipeIterator() {
-        this.recipes = BukkitExtraConstants.getServer().getRecipeManager().byType.entries().iterator();
+        this.recipes = MinecraftServer.getServer().getRecipeManager().byType.entries().iterator();
     }
 
     @Override
Index: banner_server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java
--- a/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java	(revision eea6aeae4118d75cbad801ce70ccf9931644d103)
+++ b/banner_server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java	(date 1725177022705)
@@ -6,6 +6,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Map;
 import java.util.NoSuchElementException;
+import org.bukkit.block.Banner;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -30,6 +31,7 @@
                 .put(CraftMetaColorableArmor.class, "COLORABLE_ARMOR")
                 .put(CraftMetaMap.class, "MAP")
                 .put(CraftMetaPotion.class, "POTION")
+                .put(CraftMetaShield.class, "SHIELD")
                 .put(CraftMetaSpawnEgg.class, "SPAWN_EGG")
                 .put(CraftMetaEnchantedBook.class, "ENCHANTED")
                 .put(CraftMetaFirework.class, "FIREWORK")
@@ -72,10 +74,16 @@
         }
 
         try {
-            return constructor.newInstance(map);
-        } catch (final InstantiationException e) {
-            throw new AssertionError(e);
-        } catch (final IllegalAccessException e) {
+            CraftMetaItem meta = constructor.newInstance(map);
+
+            // Convert Shield CraftMetaBlockState to CraftMetaShield
+            if (meta instanceof CraftMetaBlockState state && state.hasBlockState() && state.getBlockState() instanceof Banner) {
+                meta = new CraftMetaShield(meta);
+                meta.unhandledTags.clear(CraftMetaShield.BASE_COLOR.TYPE);
+            }
+
+            return meta;
+        } catch (final InstantiationException | IllegalAccessException e) {
             throw new AssertionError(e);
         } catch (final InvocationTargetException e) {
             throw e.getCause();
@@ -96,6 +104,11 @@
         return value != null && value;
     }
 
+    public static int getInteger(Map<?, ?> map, Object field) {
+        Integer value = SerializableMeta.getObject(Integer.class, map, field, true);
+        return value != null ? value : 0;
+    }
+
     public static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean nullable) {
         final Object object = map.get(field);
 
